% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bind.R
\name{bind}
\alias{bind}
\alias{bind_mat}
\alias{bind_array}
\alias{bind_dt}
\title{Dimensional Binding of Objects}
\usage{
bind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)

bind_array(
  input,
  along,
  revalong,
  max_bc = 1L,
  name_along = TRUE,
  comnames_from = 1L
)

bind_dt(input, along, ...)
}
\arguments{
\item{input}{a list of only the appropriate objects. \cr
If \code{input} is named,
its names will be used for the names of dimension \code{along} of the output,
as far as possible.}

\item{along}{a single integer,
indicating the dimension along which to bind the dimensions. \cr
I.e. use \code{along = 1} for row-binding, \code{along = 2} for column-binding, etc. \cr
For arrays, additional flexibility is available:
\itemize{
\item Specifying \code{along = 0} will bind the arrays on a new dimension before the first,
making \code{along} the new first dimension.
\item Specifying \code{along = N + 1}, with \verb{N = }\link[base]{max}\code{(}\link{lst.ndim}\verb{(input))},
will create an additional dimension (\code{N + 1}) and bind the arrays along that new dimension.
}}

\item{name_deparse}{Boolean, for \code{bind_mat()}. \cr
Indicates if dimension \code{along} should be named. \cr
Uses the naming method from \link[base]{rbind}/\link[base]{cbind} itself.}

\item{comnames_from}{either integer scalar or \code{NULL},
for \code{bind_mat()} and  \code{bind_array()}. \cr
Indicates which object in \code{input} should be used for naming the shared dimension. \cr
If \code{NULL}, no communal names will be given. \cr
For example: \cr
When binding columns of matrices, the matrices will share the same rownames. \cr
Using \code{comnames_from = 10} will then result in \code{bind_array()} using
\code{rownames(input[[10]])} for the rownames of the output.}

\item{revalong}{for \code{bind_array()} only. \cr
Same as \code{along}, but counting backwards. \cr
I.e. \code{revalong = 0} is equivalent to \code{along = N+1}, and \code{revalong = N+1} is equivalent to \code{along = 0}; \cr
with \verb{N = }\link[base]{max}\code{(}\link{lst.ndim}\verb{(input))}.}

\item{max_bc}{integer, for \code{bind_array} only. \cr
Specify here the number of dimensions that are allowed to be broadcasted when binding arrays. \cr
If \code{max_bc = 0L}, \bold{no} broadcasting will be allowed at all.}

\item{name_along}{Boolean, for \code{bind_array()}. \cr
Indicates if dimension \code{along} should be named.}

\item{...}{arguments to be passed to \link[data.table]{rbindlist}. \cr \cr}
}
\value{
The bound object.
}
\description{
The \code{bind_}implementations provide dimensional binding functionalities. \cr
\cr
The following implementations are available:
\itemize{
\item \code{bind_mat()} binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise. \cr
Allows for recycling.
\item \code{bind_array()} binds (atomic/recursive) arrays and (atomic/recursive) matrices. \cr
Allows for broadcasting.
\item \code{bind_dt()} binds data.tables and other data.frame-like objects. \cr
This function is only available if the 'data.table' package is installed. \cr
Returns a \code{data.table}. \cr
Faster than \code{do.call(cbind, ...)} or \code{do.call(rbind, ...)} for regular \code{data.frame} objects. \cr
}

Note that the naming convention of the binding implementations here is
"bind_" followed by the \bold{resulting class} (abbreviated). \cr
I.e. \code{bind_mat} \bold{returns} a matrix, but can bind both matrices and vectors. \cr
And \code{bind_array} \bold{returns} an array, but can bind both arrays and matrices. \cr
And \code{bind_dt} \bold{returns} a data.table, but can bind not only data.tables,
but also most other data.frame-like objects. \cr \cr
}
\details{
For in-depth information about the binding implentations in the 'broadcast' package,
please refer to \link{broadcast_bind}. \cr
\cr
}
\examples{

# bind_array ====

# here, atomic and recursive arrays are mixed,
# resulting in recursive arrays

# creating the arrays
x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

# binding the arrays
input <- list(x = x, y = y)
bind_array(input, along = 0L) # binds on new dimension before first
bind_array(input, along = 1L) # binds on first dimension (i.e. rows)
bind_array(input, along = 2L)
bind_array(input, along = 3L) # bind on new dimension after last

bind_array(input, revalong = 0L) # binds on new dimension after last
bind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)
bind_array(input, revalong = 2L)
bind_array(input, revalong = 3L) # bind on new dimension before first


# binding, with empty arrays
emptyarray <- array(numeric(0L), c(0L, 3L))
dimnames(emptyarray) <- list(NULL, paste("empty", 1:3))
print(emptyarray)
input <- list(x = x, y = emptyarray)
bind_array(input, along = 1L, comnames_from = 2L) # row-bind



################################################################################

# bind_mat ====

# here, atomic and recursive matrices are mixed,
# resulting in a recursive matrix

x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

bind_mat(list(x = x, y = y), 2L)



################################################################################

# bind_dt ====


x <- data.frame(a = 1:12, b = month.abb) # data.frame
y <- data.table::data.table(a = 1:12, b = month.abb) # data.table

bind_dt(list(x = x, y = y), 2L) # column bind

bind_dt(list(x = x, y = y), 1L) # row bind

}
\references{
Plate T, Heiberger R (2016). \emph{abind: Combine Multidimensional Arrays}. R package version 1.4-5, \url{https://CRAN.R-project.org/package=abind}.
}
