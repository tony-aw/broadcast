% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/properties.R
\name{properties}
\alias{properties}
\alias{ndim}
\alias{lst.ndim}
\alias{lst.typeof}
\title{Small property functions}
\usage{
ndim(x)

lst.ndim(x)

lst.typeof(x)
}
\arguments{
\item{x}{an object.\cr
For functions starting with \code{lst.}, \code{x} must be a list (i.e. recursive vector or recursive array). \cr}
}
\value{
An integer scalar
}
\description{
\code{ndim()} returns the number of dimensions of an object. \cr
\code{lst.ndim()} returns the number of dimensions of every list-element. \cr
\code{lst.typeof()} returns the (internal) type of every list-element. \cr
\code{len()} is an alias for \code{length}. \cr
\code{lst.len()} is an alias for \code{lengths}. \cr
\cr
These functions were all designed to be efficient. \cr
\cr
}
\examples{

# bind_array ====

# here, atomic and recursive arrays are mixed,
# resulting in recursive arrays

# creating the arrays
x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

# binding the arrays
input <- list(x = x, y = y)
bind_array(input, along = 0L) # binds on new dimension before first
bind_array(input, along = 1L) # binds on first dimension (i.e. rows)
bind_array(input, along = 2L)
bind_array(input, along = 3L) # bind on new dimension after last

bind_array(input, revalong = 0L) # binds on new dimension after last
bind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)
bind_array(input, revalong = 2L)
bind_array(input, revalong = 3L) # bind on new dimension before first


# binding, with empty arrays
emptyarray <- array(numeric(0L), c(0L, 3L))
dimnames(emptyarray) <- list(NULL, paste("empty", 1:3))
print(emptyarray)
input <- list(x = x, y = emptyarray)
bind_array(input, along = 1L, comnames_from = 2L) # row-bind



################################################################################

# bind_mat ====

# here, atomic and recursive matrices are mixed,
# resulting in a recursive matrix

x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

bind_mat(list(x = x, y = y), 2L)



################################################################################

# bind_dt ====


x <- data.frame(a = 1:12, b = month.abb) # data.frame
y <- data.table::data.table(a = 1:12, b = month.abb) # data.table

bind_dt(list(x = x, y = y), 2L) # column bind

bind_dt(list(x = x, y = y), 1L) # row bind

}
