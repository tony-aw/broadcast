body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
SEXP out = PROTECT(Rf_allocVector(VECSXP, n));
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
SET_VECTOR_ELT(out, i, tempdim);
}
UNPROTECT(1);
return out;
"
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *restrict pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
lst.ndims
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *restrict pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
lst.ndims <- inline::cfunction(signature(x = "SEXP"), body = body)
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
lst.ndims <- inline::cfunction(signature(x = "SEXP"), body = body)
lst.ndims(lst)
lst.ndims <- inline::cfunction(signature(x = "SEXP"), body = body)
lst <- list(
array(1:9, 1:3),
array(1:16, 1:4),
array(1:2, 1:2),
1:10,
NULL,
~ "hooray"
)
lst.ndims(lst)
typeof
pryr::show_c_source(.Internal(typeof(x)))
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
lst.ndims <- inline::cfunction(signature(x = "SEXP"), body = body)
body <- "
int n = Rf_length(x);
SEXP tempout;
SEXP tempstr;
SEXP out = PROTECT(Rf_allocVector(STRSXP, n));
SEXP *pout = STRING_PTR(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
if(TYPEOF(tempout) == OBJSXP && ! IS_S4_OBJECT(tempout)) {
tempstr = mkString(\"object\");
}
else {
tempstr = type2str(TYPEOF(tempout));
}
pout[i] = tempstr;
}
UNPROTECT(1);
return out;
"
lst.typeof <- inline::cfunction(signature(x = "SEXP"), body = body)
lst <- list(
array(1:9, 1:3),
array(1:16, 1:4),
array(1:2, 1:2),
1:10,
NULL,
~ "hooray"
)
lst.ndims(lst)
lst.typeof(lst)
cat(lst.ndims@code)
body <- "
if(TYPEOF(x) != VECSXP) {
error(\"`x` must be a list\");
}
int n = Rf_length(x);
SEXP tempout;
SEXP tempdim;
int tempndims;
SEXP out = PROTECT(Rf_allocVector(INTSXP, n));
int *pout = INTEGER(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
tempdim = Rf_getAttrib(tempout, R_DimSymbol);
tempndims = Rf_length(tempdim);
pout[i] = tempndims;
}
UNPROTECT(1);
return out;
"
lst.ndims <- inline::cfunction(signature(x = "SEXP"), body = body)
cat(lst.ndims@code)
body <- "
if(TYPEOF(x) != VECSXP) {
error(\"`x` must be a list\");
}
int n = Rf_length(x);
SEXP tempout;
SEXP tempstr;
SEXP out = PROTECT(Rf_allocVector(STRSXP, n));
SEXP *pout = STRING_PTR(out);
for(int i = 0; i < n; ++i) {
tempout = VECTOR_ELT(x, i);
if(TYPEOF(tempout) == OBJSXP && ! IS_S4_OBJECT(tempout)) {
tempstr = mkString(\"object\");
}
else {
tempstr = type2str(TYPEOF(tempout));
}
pout[i] = tempstr;
}
UNPROTECT(1);
return out;
"
lst.typeof <- inline::cfunction(signature(x = "SEXP"), body = body)
cat(lst.typeof@code)
