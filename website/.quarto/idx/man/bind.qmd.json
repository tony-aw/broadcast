{"title":"bind","markdown":{"yaml":{"title":"bind"},"headingText":"Dimensional Binding of Objects","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n### Description\n\nThe <code>bind_</code>implementations provide dimensional binding functionalities. <br />\n<br />\nThe following implementations are available:\n\n\n<ul>\n<li> <code>bind_mat()</code> binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise. <br />\nReturns a matrix. <br />\nAllows for linear/vector recycling.\n\n</li>\n<li> <code>bind_array()</code> binds (atomic/recursive) arrays and (atomic/recursive) matrices. <br />\nReturns an array. <br />\nAllows for broadcasting.\n\n</li>\n<li> <code>bind_dt()</code> binds data.tables and other data.frame-like objects. <br />\nReturns a <code>data.table</code>. <br />\nThis function is only available if the 'data.table' package is installed. <br />\nThe <code>bind_dt()</code> function is faster than <code>do.call(cbind, ...)</code> or <code>do.call(rbind, ...)</code> for regular <code>data.frame</code> objects. <br />\n\n</li></ul>\n\n\n\n### Usage\n\n<pre><code class='language-R'>bind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"input\">input</code></td>\n<td>\na list of only the appropriate objects. <br />\nIf <code>input</code> is named,\nits names will be used for the names of dimension <code>along</code> of the output,\nas far as possible.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"along\">along</code></td>\n<td>\na single integer,\nindicating the dimension along which to bind the dimensions. <br />\nI.e. use <code>along = 1</code> for row-binding, <code>along = 2</code> for column-binding, etc. <br />\nFor arrays, additional flexibility is available:\n\n\n<ul>\n<li> Specifying <code>along = 0</code> will bind the arrays on a new dimension before the first,\nmaking <code>along</code> the new first dimension.\n\n</li>\n<li> Specifying <code>along = N + 1</code>, with <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>,\nwill create an additional dimension (<code>N + 1</code>) and bind the arrays along that new dimension.\n\n</li></ul>\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_deparse\">name_deparse</code></td>\n<td>\nBoolean, for <code>bind_mat()</code>. <br />\nIndicates if dimension <code>along</code> should be named. <br />\nUses the naming method from rbind/cbind itself.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"comnames_from\">comnames_from</code></td>\n<td>\neither integer scalar or <code>NULL</code>,\nfor <code>bind_mat()</code> and  <code>bind_array()</code>. <br />\nIndicates which object in <code>input</code> should be used for naming the shared dimension. <br />\nIf <code>NULL</code>, no communal names will be given. <br />\nFor example: <br />\nWhen binding columns of matrices, the matrices will share the same rownames. <br />\nUsing <code>comnames_from = 10</code> will then result in <code>bind_array()</code> using\n<code>rownames(input[[10]])</code> for the rownames of the output.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"rev\">rev</code></td>\n<td>\nBoolean, for <code>bind_array()</code> only. <br />\nIndicates if <code>along</code> should be reversed, counting backwards. <br />\nIf <code>FALSE</code> (default), <code>along</code> works like normally; if <code>TRUE</code>, <code>along</code> is reversed. <br />\nI.e. <code style=\"white-space: pre;\">along = 0, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = N+1, rev = FALSE</code>; <br />\nand <code style=\"white-space: pre;\">along = N+1, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = 0, rev = FALSE</code>; <br />\nwith <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"ndim2bc\">ndim2bc</code></td>\n<td>\nnon-negative integer, for <code>bind_array</code> only. <br />\nSpecify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays. <br />\nIf <code>ndim2bc = 0L</code>, <b>no</b> broadcasting will be allowed at all.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_along\">name_along</code></td>\n<td>\nBoolean, for <code>bind_array()</code>. <br />\nIndicates if dimension <code>along</code> should be named. <br />\nThe examples section illustrates the naming behaviour.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"...\">...</code></td>\n<td>\narguments to be passed to <code>data.table::rbindlist()</code>. <br /> <br />\n</td></tr>\n</table>\n\n\n### Details\n\nFor in-depth information about the binding implentations in the 'broadcast' package,\nplease refer to broadcast_bind. <br />\n<br />\n\n\n\n### Value\n\nThe bound object.\n\n\n\n### References\n\nPlate T, Heiberger R (2016). <em>abind: Combine Multidimensional Arrays</em>. R package version 1.4-5, <a href=\"https://CRAN.R-project.org/package=abind\">https://CRAN.R-project.org/package=abind</a>.\n\n\n\n### Examples\n```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n\n# binding the arrays\ninput <- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\nbind_array(input, along = 2L)\nbind_array(input, along = 3L) # bind on new dimension after last\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\nbind_array(input, along = 2L, TRUE)\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n\n\n# binding, with empty arrays\nemptyarray <- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) <- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\ninput <- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n\n# Illustrating `name_along`\n\nx <- array(1:20, c(5, 3), list(NULL, LETTERS[1:3]))\ny <- array(-1:-20, c(5, 3))\nz <- array(-1:-20, c(5, 3))\n\nbind_array(list(a = x, b = y, z), 2L)\n\nbind_array(list(x, y, z), 2L)\n\nbind_array(list(a = unname(x), b = y, c = z), 2L)\n\nbind_array(list(x, a = y, b = z), 2L)\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n\nbind_mat(list(x = x, y = y), 2L)\n\n\n\n################################################################################\n\n# bind_dt ====\nif(require(data.table)) {\n  x <- data.frame(a = 1:12, b = month.abb) # data.frame\n  y <- data.table::data.table(a = 1:12, b = month.abb) # data.table\n  \n  bind_dt(list(x = x, y = y), 2L) # column bind\n  \n  bind_dt(list(x = x, y = y), 1L) # row bind\n  \n}\n\n\n\n\n```\n","srcMarkdownNoYaml":"\n## Dimensional Binding of Objects {.unnumbered}\n\n\n### Description\n\nThe <code>bind_</code>implementations provide dimensional binding functionalities. <br />\n<br />\nThe following implementations are available:\n\n\n<ul>\n<li> <code>bind_mat()</code> binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise. <br />\nReturns a matrix. <br />\nAllows for linear/vector recycling.\n\n</li>\n<li> <code>bind_array()</code> binds (atomic/recursive) arrays and (atomic/recursive) matrices. <br />\nReturns an array. <br />\nAllows for broadcasting.\n\n</li>\n<li> <code>bind_dt()</code> binds data.tables and other data.frame-like objects. <br />\nReturns a <code>data.table</code>. <br />\nThis function is only available if the 'data.table' package is installed. <br />\nThe <code>bind_dt()</code> function is faster than <code>do.call(cbind, ...)</code> or <code>do.call(rbind, ...)</code> for regular <code>data.frame</code> objects. <br />\n\n</li></ul>\n\n\n\n### Usage\n\n<pre><code class='language-R'>bind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"input\">input</code></td>\n<td>\na list of only the appropriate objects. <br />\nIf <code>input</code> is named,\nits names will be used for the names of dimension <code>along</code> of the output,\nas far as possible.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"along\">along</code></td>\n<td>\na single integer,\nindicating the dimension along which to bind the dimensions. <br />\nI.e. use <code>along = 1</code> for row-binding, <code>along = 2</code> for column-binding, etc. <br />\nFor arrays, additional flexibility is available:\n\n\n<ul>\n<li> Specifying <code>along = 0</code> will bind the arrays on a new dimension before the first,\nmaking <code>along</code> the new first dimension.\n\n</li>\n<li> Specifying <code>along = N + 1</code>, with <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>,\nwill create an additional dimension (<code>N + 1</code>) and bind the arrays along that new dimension.\n\n</li></ul>\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_deparse\">name_deparse</code></td>\n<td>\nBoolean, for <code>bind_mat()</code>. <br />\nIndicates if dimension <code>along</code> should be named. <br />\nUses the naming method from rbind/cbind itself.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"comnames_from\">comnames_from</code></td>\n<td>\neither integer scalar or <code>NULL</code>,\nfor <code>bind_mat()</code> and  <code>bind_array()</code>. <br />\nIndicates which object in <code>input</code> should be used for naming the shared dimension. <br />\nIf <code>NULL</code>, no communal names will be given. <br />\nFor example: <br />\nWhen binding columns of matrices, the matrices will share the same rownames. <br />\nUsing <code>comnames_from = 10</code> will then result in <code>bind_array()</code> using\n<code>rownames(input[[10]])</code> for the rownames of the output.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"rev\">rev</code></td>\n<td>\nBoolean, for <code>bind_array()</code> only. <br />\nIndicates if <code>along</code> should be reversed, counting backwards. <br />\nIf <code>FALSE</code> (default), <code>along</code> works like normally; if <code>TRUE</code>, <code>along</code> is reversed. <br />\nI.e. <code style=\"white-space: pre;\">along = 0, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = N+1, rev = FALSE</code>; <br />\nand <code style=\"white-space: pre;\">along = N+1, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = 0, rev = FALSE</code>; <br />\nwith <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"ndim2bc\">ndim2bc</code></td>\n<td>\nnon-negative integer, for <code>bind_array</code> only. <br />\nSpecify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays. <br />\nIf <code>ndim2bc = 0L</code>, <b>no</b> broadcasting will be allowed at all.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_along\">name_along</code></td>\n<td>\nBoolean, for <code>bind_array()</code>. <br />\nIndicates if dimension <code>along</code> should be named. <br />\nThe examples section illustrates the naming behaviour.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"...\">...</code></td>\n<td>\narguments to be passed to <code>data.table::rbindlist()</code>. <br /> <br />\n</td></tr>\n</table>\n\n\n### Details\n\nFor in-depth information about the binding implentations in the 'broadcast' package,\nplease refer to broadcast_bind. <br />\n<br />\n\n\n\n### Value\n\nThe bound object.\n\n\n\n### References\n\nPlate T, Heiberger R (2016). <em>abind: Combine Multidimensional Arrays</em>. R package version 1.4-5, <a href=\"https://CRAN.R-project.org/package=abind\">https://CRAN.R-project.org/package=abind</a>.\n\n\n\n### Examples\n```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n\n# binding the arrays\ninput <- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\nbind_array(input, along = 2L)\nbind_array(input, along = 3L) # bind on new dimension after last\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\nbind_array(input, along = 2L, TRUE)\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n\n\n# binding, with empty arrays\nemptyarray <- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) <- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\ninput <- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n\n# Illustrating `name_along`\n\nx <- array(1:20, c(5, 3), list(NULL, LETTERS[1:3]))\ny <- array(-1:-20, c(5, 3))\nz <- array(-1:-20, c(5, 3))\n\nbind_array(list(a = x, b = y, z), 2L)\n\nbind_array(list(x, y, z), 2L)\n\nbind_array(list(a = unname(x), b = y, c = z), 2L)\n\nbind_array(list(x, a = y, b = z), 2L)\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n\nbind_mat(list(x = x, y = y), 2L)\n\n\n\n################################################################################\n\n# bind_dt ====\nif(require(data.table)) {\n  x <- data.frame(a = 1:12, b = month.abb) # data.frame\n  y <- data.table::data.table(a = 1:12, b = month.abb) # data.table\n  \n  bind_dt(list(x = x, y = y), 2L) # column bind\n  \n  bind_dt(list(x = x, y = y), 1L) # row bind\n  \n}\n\n\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"bind.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","fontsize":"1.2em","fontcolor":"#18161B","mainfont":"Tahoma","theme":["pandoc","../light.css"],"title":"bind"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}