{"title":"acast","markdown":{"yaml":{"title":"acast"},"headingText":"Simple and Fast Casting/Pivoting of an Array","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n\n\n### Description\n\nThe <code>acast()</code> function spreads subsets of an array margin over a new dimension. <br />\nWritten in 'C' and 'C++' for high speed and memory efficiency. <br />\n<br />\nRoughly speaking, <code>acast()</code> can be thought of as the &quot;array&quot; analogy to\n<code>data.table::</code>dcast. <br />\nBut note 2 important differences:\n\n\n<ul>\n<li> <code>acast()</code> works on arrays instead of data.tables.\n\n</li>\n<li> <code>acast()</code> casts into a completely new dimension\n(namely <code>ndim(x) + 1</code>),\ninstead of casting into new columns.\n\n</li></ul>\n\n\n\n### Usage\n\n<pre><code class='language-R'>acast(x, margin, grp, fill = FALSE)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code></td>\n<td>\nan atomic or recursive array.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"margin\">margin</code></td>\n<td>\na scalar integer, specifying the margin to cast from.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"grp\">grp</code></td>\n<td>\na factor, where <code>length(grp) == dim(x)[margin]</code>, with at least <code>2</code> unique values,\nspecifying which indices of <code>dim(x)[margin]</code> belong to which group. <br />\nEach group will be cast onto a separate index of dimension <code>ndim(x) + 1</code>. <br />\nUnused levels of <code>grp</code> will be dropped. <br />\nAny <code>NA</code> values or levels found in <code>grp</code> will result in an error.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"fill\">fill</code></td>\n<td>\nBoolean, indicating if missing values should be filled. <br />\nThis is used in case the levels of <code>grp</code> do not have equal frequencies,\nand thus additional values must be filled. <br />\nIf <code>x</code> is atomic but not <code>raw</code>, missing values are filled with <code>NA</code>. <br />\nIf <code>x</code> is recursive, missing values are filled with <code>list(NULL)</code>. <br />\nIf <code>x</code> is of type <code>raw</code>, uneven groupings are not supported.\n</td></tr>\n</table>\n\n\n### Details\n\nFor the sake of illustration, consider a matrix <code>x</code> and a grouping factor <code>grp</code>. <br />\nLet the integer scalar <code>k</code> represent a group in <code>grp</code>, such that <code>k</code> $\\in$ <code>1:nlevels(grp)</code>. <br />\nThen the code <br />\n<code>out = acast(x, margin = 1, grp = grp)</code> <br />\nessentially performs the following for every group <code>k</code>:\n\n\n<ul>\n<li> copy-paste the subset <code>x[grp == k, ]</code> to the subset <code>out[, , k]</code>.\n\n</li></ul>\n\nPlease see the examples section\nto get a good idea on how this function casts an array. <br />\nA more detailed explanation of the <code>acast()</code> function\ncan be found on the website. <br /> <br />\n\n\n\n### Value\n\nAn array with the following properties:\n\n\n<ul>\n<li> the number of dimensions of the output array is equal to <code>ndim(x) + 1</code>;\n\n</li>\n<li> the dimensions of the output array is equal to <code style=\"white-space: pre;\">c(dim(x), max(tabulate(grp))</code>;\n\n</li>\n<li> the <code>dimnames</code> of the output array is equal to <code>c(dimnames(x), list(levels(grp)))</code>. <br /> <br />\n\n</li></ul>\n\n\n\n### Back transformation\n\nFrom the casted array, <br />\n<code>out = acast(x, margin, grp)</code>, <br />\none can get the original <code>x</code> back by using <br />\n<code>back = asplit(out, ndim(out)) |&gt; bind_array(along = margin)</code>. <br />\nNote, however, the following about the back-transformed array <code>back</code>:\n\n\n<ul>\n<li> <code>back</code> will be ordered by <code>grp</code> along dimension <code>margin</code>;\n\n</li>\n<li> if the levels of <code>grp</code> did not have equal frequencies,\nthen <code>dim(back)[margin] &gt; dim(x)[margin]</code>,\nand <code>back</code> will have more missing values than <code>x</code>. <br /> <br />\n\n</li></ul>\n\n\n\n### Examples\n```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}\nlibrary(\"broadcast\")\n\n\nx <- cbind(id = c(rep(1:3, each = 2), 1), grp = c(rep(1:2, 3), 2), val = rnorm(7))\nprint(x)\n\ngrp <- as.factor(x[, 2])\nlevels(grp) <- c(\"a\", \"b\")\nmargin <- 1L\n\nacast(x, margin, grp, fill = TRUE)\n\n\n```\n","srcMarkdownNoYaml":"\n## Simple and Fast Casting/Pivoting of an Array {.unnumbered}\n\n\n### Description\n\nThe <code>acast()</code> function spreads subsets of an array margin over a new dimension. <br />\nWritten in 'C' and 'C++' for high speed and memory efficiency. <br />\n<br />\nRoughly speaking, <code>acast()</code> can be thought of as the &quot;array&quot; analogy to\n<code>data.table::</code>dcast. <br />\nBut note 2 important differences:\n\n\n<ul>\n<li> <code>acast()</code> works on arrays instead of data.tables.\n\n</li>\n<li> <code>acast()</code> casts into a completely new dimension\n(namely <code>ndim(x) + 1</code>),\ninstead of casting into new columns.\n\n</li></ul>\n\n\n\n### Usage\n\n<pre><code class='language-R'>acast(x, margin, grp, fill = FALSE)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code></td>\n<td>\nan atomic or recursive array.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"margin\">margin</code></td>\n<td>\na scalar integer, specifying the margin to cast from.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"grp\">grp</code></td>\n<td>\na factor, where <code>length(grp) == dim(x)[margin]</code>, with at least <code>2</code> unique values,\nspecifying which indices of <code>dim(x)[margin]</code> belong to which group. <br />\nEach group will be cast onto a separate index of dimension <code>ndim(x) + 1</code>. <br />\nUnused levels of <code>grp</code> will be dropped. <br />\nAny <code>NA</code> values or levels found in <code>grp</code> will result in an error.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"fill\">fill</code></td>\n<td>\nBoolean, indicating if missing values should be filled. <br />\nThis is used in case the levels of <code>grp</code> do not have equal frequencies,\nand thus additional values must be filled. <br />\nIf <code>x</code> is atomic but not <code>raw</code>, missing values are filled with <code>NA</code>. <br />\nIf <code>x</code> is recursive, missing values are filled with <code>list(NULL)</code>. <br />\nIf <code>x</code> is of type <code>raw</code>, uneven groupings are not supported.\n</td></tr>\n</table>\n\n\n### Details\n\nFor the sake of illustration, consider a matrix <code>x</code> and a grouping factor <code>grp</code>. <br />\nLet the integer scalar <code>k</code> represent a group in <code>grp</code>, such that <code>k</code> $\\in$ <code>1:nlevels(grp)</code>. <br />\nThen the code <br />\n<code>out = acast(x, margin = 1, grp = grp)</code> <br />\nessentially performs the following for every group <code>k</code>:\n\n\n<ul>\n<li> copy-paste the subset <code>x[grp == k, ]</code> to the subset <code>out[, , k]</code>.\n\n</li></ul>\n\nPlease see the examples section\nto get a good idea on how this function casts an array. <br />\nA more detailed explanation of the <code>acast()</code> function\ncan be found on the website. <br /> <br />\n\n\n\n### Value\n\nAn array with the following properties:\n\n\n<ul>\n<li> the number of dimensions of the output array is equal to <code>ndim(x) + 1</code>;\n\n</li>\n<li> the dimensions of the output array is equal to <code style=\"white-space: pre;\">c(dim(x), max(tabulate(grp))</code>;\n\n</li>\n<li> the <code>dimnames</code> of the output array is equal to <code>c(dimnames(x), list(levels(grp)))</code>. <br /> <br />\n\n</li></ul>\n\n\n\n### Back transformation\n\nFrom the casted array, <br />\n<code>out = acast(x, margin, grp)</code>, <br />\none can get the original <code>x</code> back by using <br />\n<code>back = asplit(out, ndim(out)) |&gt; bind_array(along = margin)</code>. <br />\nNote, however, the following about the back-transformed array <code>back</code>:\n\n\n<ul>\n<li> <code>back</code> will be ordered by <code>grp</code> along dimension <code>margin</code>;\n\n</li>\n<li> if the levels of <code>grp</code> did not have equal frequencies,\nthen <code>dim(back)[margin] &gt; dim(x)[margin]</code>,\nand <code>back</code> will have more missing values than <code>x</code>. <br /> <br />\n\n</li></ul>\n\n\n\n### Examples\n```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}\nlibrary(\"broadcast\")\n\n\nx <- cbind(id = c(rep(1:3, each = 2), 1), grp = c(rep(1:2, 3), 2), val = rnorm(7))\nprint(x)\n\ngrp <- as.factor(x[, 2])\nlevels(grp) <- c(\"a\", \"b\")\nmargin <- 1L\n\nacast(x, margin, grp, fill = TRUE)\n\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"acast.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","fontsize":"1.2em","fontcolor":"#18161B","mainfont":"Tahoma","theme":["pandoc","../light.css"],"title":"acast"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}