{
  "hash": "6b50bf0b84367e9e82afa0823a9e561e",
  "result": {
    "markdown": "\n\n<img src=\"man/figures/broadcast.png\" height=\"300\" alt=\"\" />\n\n\n\n\n\n\n\n\n<!-- badges: start -->\n\n[![Project Status: WIP - Initial development is in progress, but there has not yet been a stable, usable release suitable for the public.](https://www.repostatus.org/badges/latest/wip.svg)](https://www.repostatus.org/#wip)\n[![](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)\n[![](https://img.shields.io/badge/ORCID-0000--0001--9498--8379-green.svg)](https://orcid.org/0000-0001-9498-8379)\n\n<!-- badges: end -->\n\n&nbsp;\n\n## üó∫Ô∏èOverview\n\nThe 'broadcast' package, as the name suggests, performs \"broadcasting\" (similar to broadcasting in the 'Numpy' module for 'Python').\n\nIn the context of operations involving 2 (or more) arrays, \"broadcasting\" refers to recycling array dimensions **without** allocating additional memory, which is considerably **faster** and **more memory-efficient** than R's regular dimensions repetition mechanism.\n\nPlease read the article \"Broadcasting explained\" for a more complete explanation of what \"broadcasting\" is.\n\n&nbsp;\n\nAt its core, the 'broadcast' package provides 3 functionalities, all 3 related to \"broadcasting\":\n\n&nbsp;\n\nFirst, 'broadcast' provides functions for element-wise outer computations between any 2 arrays.  \nThese are similar to base R's `outer()` function, but using broadcasting, which is faster and more efficient than the mechanism employed by `outer()`.  \nThe outer-like functions provided by 'broadcast' are optimised for a large set of operations, including, but not limited to, the following:\n\n-   relational operations (like ==, !=, <, >, <=, >=, etc.);\n-   arithmetic operations (like +, -, *, /, ^, etc.);\n-   Boolean combiner operations (like &, |, xor, etc.);\n-   string concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase 'R' `outer()` function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.  \nThe outer-like functions provided by 'broadcast' have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n\n&nbsp;\n\nSecond, 'broadcast' provides the `bind_array()` function, which is an broadcasted and enhanced form of the fantastic `abind::abind()` function:\n\n-   `bind_array()` allows for broadcasting (obviously), whereas `abind::abind()` does not.\n-   `bind_array()` is significantly **faster** and uses **less memory** than `abind::abind()`.\n-   `bind_array()` also differs from `abind::abind()` in that it can handle recursive arrays properly; `abind::abind()` unlists everything to atomic arrays, ruining the structure.\n\n&nbsp;\n\nThird, 'broadcast' provides several generic functions for broadcasting:\n\n-   `bcapply()`: a broadcasted apply-like function that works on pairs of arrays.\n-   `bc_ifelse()`: a broadcasted `ifelse()` function. Broadcasts between the `yes` and `no` arguments.\n\n&nbsp;\n\n## ü§∑üèΩWhy use 'broadcast'\n\n**Efficiency**\n\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.  \nThis is not simply a need for speed.  \nEfficient programs use less energy and resources, and is thus better for the environment.  \nAs a favoured language for the sciences, 'R' should not throw away an opportunity to become more efficient.\n\nThe `Benchmarks` show that 'broadcast' has a somewhat similar speed as equivalent operations in 'Numpy'.\n\n&nbsp;\n\n**Convenience**\n\nBroadcasting can make many applications much easier to write.  \nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.  \nYou *could* write slow and ugly nested for-loops...  \nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.  \nThe broadcasted method runs **much** faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.  \nFor more practical examples, see `Examples of Practical Applictaions`.\n\n&nbsp;\n\n**High Test Coverage**\n\nThe 'broadcast' package has been developed with a `set of unit tests` that have high (> 95%) coverage.\n\n&nbsp;\n\n**Minimal Dependencies**\n\nBesides linking to 'Rcpp', 'broadcast' does not depend on, vendor, link to, include, or otherwise use any external libraries; 'broadcast' was essentially made from scratch and can be installed out-of-the-box.\n\nNot using external libraries brings a number of advantages:\n\n-   **Avoid dependency hell**: Every dependency that is added to a software package increases the likelihood of something breaking (AKA \"dependency hell\"). 'broadcast' thus avoids this.\n-   **Avoid wasting resources for translations**: Using libraries from other languages, such as 'xtensor' ('C++') or 'Numpy' ('Python') means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. 'broadcast' requires no such translations of structures, and thus does not waste precious time and memory.\n-   **Ensure consistent behaviour**: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both 'Numpy' and 'xtensor' have only limited support for missing values, whereas 'R' supports missing values for both atomic and recursive array/vector types (except type of 'Raw'). Since 'broadcast' does not rely on external libraries, it can ensure consistent behaviour.\n\n&nbsp;\n\n## üìñDocumentation\n\n-   Installation:\n-   Broadcasting Explained:\n-   Examples of Practical Applications:\n-   Comparisons & Benchmarks:\n\n&nbsp;\n&nbsp;\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}