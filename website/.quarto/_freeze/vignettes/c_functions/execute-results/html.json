{
  "hash": "38fba9457ddbb49cda40bba68fea9018",
  "result": {
    "markdown": "---\ntitle: \"Functions Overview\"\nformat: html\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n&nbsp;\n\n# Introduction\n\nThe 'broadcast' package provides 5 main functionalities:\n\n - functions to perform broadcasted element-wise binary operations\n - broadcasted dimensional binding of arrays\n - broadcasted generic pair-wise functions\n - casting/pivoting an array into a new dimension\n - array typecasting with dimensions and names preserved\n \nThis guide gives a brief overview of the functions provided by the 'broadcast' `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} - package.\n\n\n&nbsp;\n\n# Functions for broadcasted element-wise binary operations\n\n\nThe 'broadcast' package provides functions that perform broadcasted element-wise binary operations.\nThese functions use an API similar to the `outer()` function.\n\nThe functions are the following:\n\n - [bc.b()](/man/bc.b.qmd): Broadcasted Boolean operations.  \n Includes the &, |, xor, nand, ==, !=, <, >, <=, >= operations.\n - [bc.i()](/man/bc.i.qmd) Broadcasted (53bit) Integer Numeric operations.  \n Includes relational operations, basic arithmetic, and the GCD (greatest common divisor) operation.\n - [bc.d()](/man/bc.d.qmd): Broadcasted (64bit) Decimal Numeric operations.  \n Includes relational operations, relational operations with Machine precision specification, and arithmetic operations.\n - [bc.cplx()](/man/bc.cplx.qmd): Broadcasted Complex Numeric operations.  \n Includes (in)equality operations, and basic arithmetic operations.\n - [bc.str()](/man/bc.str.qmd): Broadcasted String operations.  \n Includes operations for (in)equality, concatenation, and string distance (Levenshtein) calculation.\n - [bc.list()](/man/bc.list.qmd): Broadcasted operations on Recursive arrays.  \n \n\nThese are all pair-wise functions; i.e. they operate on 2 arrays at a time.  \nThis is intentional, as it is quite difficult to reason about broadcasting when it involves more than a pair of arrays.\n\n&nbsp;\n\n::: {.callout-note}\n\n - [bc.num()](/man/bc.d.qmd) is an alias for [bc.d()](/man/bc.d.qmd)\n - `bc.i(x, y \"+\")` is faster and more memory efficient than `bc.num(trunc(x), trunc(y), \"+\")`, as the latter results in producing unnecessary copies of both `x` and `y`.\n \n:::\n\n\n  \n \n&nbsp;\n\n# Binding arrays\n\n'broadcast' provides the [bind_array()](/man/bind_array.qmd) function. This binds arrays (including matrices) along any arbitrary dimension. It allows for dimensional broadcasting, and returns an array.\n\n\n&nbsp;\n\n\n## Why another array binding function\n\nThere is already a famous, battle-tested function for binding arrays, namely the `abind()` function from the fantastic `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} package of the same name. So why does 'broadcast' provide another array binding function?\n\nWell, as great as `abind::abind()` is, there are some issues with it, and the [bind_array()](/man/bind_array.qmd) function from 'broadcast` attempts (and in my humble opinion succeeds) to provide a better alternative:\n\n - `abind()` is a bit slow. [bind_array()](/man/bind_array.qmd) is significantly faster.\n - `abind()` does not support broadcasting. [bind_array()](/man/bind_array.qmd) does support broadcasting.\n - `abind()` does not support recursive arrays (i.e. arrays of type `list`). When binding recursive arrays, `abind()` will attempt to unlist it, even when it does not make sense, ruining the structure of the array. [bind_array()](/man/bind_array.qmd) fully supports recursive arrays, as well as arrays of all atomic types.\n - `abind()` has somewhat confusing mechanisms for giving dimension names to the output. [bind_array()](/man/bind_array.qmd) has more streamlined naming arguments.\n\n\n[bind_array()](/man/bind_array.qmd) uses a similar API to that of `abind::abind()`, and provides similar features like binding arrays before the first dimension (using `along = 0`) or after the last dimension.\n\n&nbsp;\n\n# Generic Broadcasted functions\n\n'broadcast' provides [bcapply()](/man/bcapply.qmd), which is a broadcasted apply-like function, and [bc_ifelse()](/man/bc_ifelse.qmd), which is a broadcasted version of `ifelse()`.\n\n&nsbp;\n\n# Acast\n\nThe [acast()](/man/acast.qmd) function casts an array into a new dimension.  \nRoughly speaking, it is somewhat analogous to `data.table::dcast()`, except that [acast()](/man/acast.qmd) works on arrays (instead of data.tables) and casts into a entirely new dimension (instead of into more columns).\n\n&nbsp;\n\n# Type-casting\n\n'broadcast' offers type-casting functions. Unlike base R's type-casting functions (`as.logical()`, `as.integer()`, etc.), the type-casting functions from 'broadcast' preserve names and dimensions.\n\n&nbsp;\n\n# Supported Structures\n\nThe functions in the 'broadcast' package only support S3 structures. S4 structures, Reference Classes, and so on are not supported.\n\n\n&nbsp;\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}