{
  "hash": "da4538dbbcb99a938c5fe1d0801740eb",
  "result": {
    "markdown": "---\ntitle: \"Functions Overview\"\nformat: html\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n&nbsp;\n\n# Introduction\n\nThe 'broadcast' package provides 5 main functionalities:\n\n - functions to perform broadcasted element-wise binary operations\n - broadcasted dimensional binding of arrays (and also matrices and data.tables)\n - broadcasted generic pair-wise functions\n - casting/pivoting an array into a new dimension\n - array typecasting with dimensions and names preserved\n \nThis guide gives a brief overview of the functions provided by the 'broadcast' 'R'-package.\n\n\n&nbsp;\n\n# Functions broadcasted element-wise binary operations\n\n\nThe 'broadcast' package provides functions that perform broadcasted element-wise binary operations.\nThese functions use an API similar to the `outer()` function.\n\nThe functions are the following:\n\n - [bc.b()](/man/bc.b.qmd): Broadcasted Boolean operations.  \n Includes the &, |, xor, nand, ==, !=, <, >, <=, >= operations.\n - [bc.i()](/man/bc.i.qmd) Broadcasted (53bit) Integer Numeric operations.  \n Includes relational operations, basic arithmetic, and the GCD (greatest common divisor) operation.\n - [bc.d()](/man/bc.d.qmd): Broadcasted (64bit) Decimal Numeric operations.  \n Includes relational operations, relational operations with Machine precision specification, and arithmetic operations.\n - [bc.cplx()](/man/bc.cplx.qmd): Broadcasted Complex Numeric operations.  \n Includes (in)equality operations, and basic arithmetic operations.\n - [bc.str()](/man/bc.str.qmd): Broadcasted String operations.  \n Includes operations for (in)equality, concatenation, and string distance (Levenshtein) calculation.\n - [bc.list()](/man/bc.list.qmd): Broadcasted operations on Recursive arrays.  \n \n\nThese are all pair-wise functions; i.e. they operate on 2 arrays at a time.  \nThis is intentional, as it is quite difficult to reason about broadcasting when it involves more than a pair of arrays.\n\n&nbsp;\n\n::: {.callout-note}\n\n - [bc.num()](/man/bc.d.qmd) is an alias for [bc.d()](/man/bc.d.qmd)\n - `bc.i(x, y \"+\")` is faster and more memory efficient than `bc.num(trunc(x), trunc(y), \"+\")`, as the latter results in producing unnecessary copies of both `x` and `y`.\n \n:::\n\n\n  \n \n&nbsp;\n\n# Binding implementations\n\n'broadcast' provides 3 functions for dimensional binding:\n\n - [bind_mat()](/man/bind.qmd): binds vectors and matrices row-wise or column-wise; allows for vector (i.e. linear) recycling. Returns a matrix.\n - [bind_array()](/man/bind.qmd): binds arrays (including matrices) along any arbitrary dimension; allows dimensional broadcasting. Returns an array.\n - [bind_dt()](/man/bind.qmd): binds data.frames and data.tables; allows for matching unmatched columns. Returns a data.table.\n \n\n\n::: {.callout-note}\n\nThe [bind_dt()](/man/bind.qmd) function is only callable if the 'data.table' package is also installed.\n\n:::\n\n&nbsp;\n\n\n# Acast\n\nThe [acast()](/man/acast.qmd) function casts an array into a new dimension.  \nRoughly speaking, it is somewhat analogous to `data.table::dcast()`, except that [acast()](/man/acast.qmd) works on arrays (instead of data.tables) and casts into a entirely new dimension (instead of into more columns).\n\n&nbsp;\n\n# Type-casting\n\n'broadcast' offers type-casting functions. Unlike base R's type-casting functions (`as.logical()`, `as.integer()`, etc.), the type-casting functions from 'broadcast' preserve names and dimensions.\n\n&nbsp;\n\n# Supported Structures\n\nThe functions in the 'broadcast' package only support S3 structures. S4 structures, Reference Classes, and so on are not supported.\n\n&nbsp;\n&nbsp;\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}