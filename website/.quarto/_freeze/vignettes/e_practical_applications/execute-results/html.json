{
  "hash": "4f59a3f3060e262fabe403b1f6e257ad",
  "result": {
    "markdown": "---\ntitle: \"Practical Applications\"\nformat: html\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n&nbsp;\n\n# Introduction\n\nBroadcasting comes up frequent enough in real world problems. This articles gives a few examples of these.\n\n&nbsp;\n\n# Simple outer computarions\n\nOuter computations is a common set of operations used in Linear Algebra, and base `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 581 512\" style=\"height:1em;width:1.13em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M581 226.6C581 119.1 450.9 32 290.5 32S0 119.1 0 226.6C0 322.4 103.3 402 239.4 418.1V480h99.1v-61.5c24.3-2.7 47.6-7.4 69.4-13.9L448 480h112l-67.4-113.7c54.5-35.4 88.4-84.9 88.4-139.7zm-466.8 14.5c0-73.5 98.9-133 220.8-133s211.9 40.7 211.9 133c0 50.1-26.5 85-70.3 106.4-2.4-1.6-4.7-2.9-6.4-3.7-10.2-5.2-27.8-10.5-27.8-10.5s86.6-6.4 86.6-92.7-90.6-87.9-90.6-87.9h-199V361c-74.1-21.5-125.2-67.1-125.2-119.9zm225.1 38.3v-55.6c57.8 0 87.8-6.8 87.8 27.3 0 36.5-38.2 28.3-87.8 28.3zm-.9 72.5H365c10.8 0 18.9 11.7 24 19.2-16.1 1.9-33 2.8-50.6 2.9v-22.1z\"/></svg>`{=html} provides the `outer()` function to facilitate such computations. But `outer()` is not at all an efficient function.\n\n'broadcast' provides a set of outer-like functions that are very fast and memory efficient.\n\n\n&nbsp;\n\n# Binding arrays along an arbitrary dimension\n\nThe `abind()` function, from the package of the same name, allows one to bind arrays along any arbitrary dimensions (not just along rows or columns).  \nUnfortunately, `abind()` does not support broadcasting, which can lead to frustrations such as the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- array(1:27, c(3,3,3))\ny <- array(1L, c(3,3,1))\nabind::abind(x, y, along = 2)\n\n#> Error in abind(x, y, along = 2) : \n#>  arg 'X2' has dims=3, 3, 1; but need dims=3, X, 3\n```\n:::\n\n\nHere, `abind()` is complaining about the dimensions not fitting perfectly.  \nBut intuitively, binding `x` and `y` should be possible, with dimension `3` from array `y` being broadcasted to size 3.\n\nThe [bind_array()](/man/bind.qmd) function provided by the 'broadcast' package can bind the arrays without problems:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- array(1:27, c(3,3,3))\ny <- array(1L, c(3,3,1))\nbind_array(list(x, y), 2)\n#> , , 1\n#> \n#>      [,1] [,2] [,3] [,4] [,5] [,6]\n#> [1,]    1    4    7    1    1    1\n#> [2,]    2    5    8    1    1    1\n#> [3,]    3    6    9    1    1    1\n#> \n#> , , 2\n#> \n#>      [,1] [,2] [,3] [,4] [,5] [,6]\n#> [1,]   10   13   16    1    1    1\n#> [2,]   11   14   17    1    1    1\n#> [3,]   12   15   18    1    1    1\n#> \n#> , , 3\n#> \n#>      [,1] [,2] [,3] [,4] [,5] [,6]\n#> [1,]   19   22   25    1    1    1\n#> [2,]   20   23   26    1    1    1\n#> [3,]   21   24   27    1    1    1\n```\n:::\n\n\n[bind_array()](/man/bind.qmd) is also considerably faster and more memory efficient than `abind()`.\n\n&nbsp;\n\n# Array casting\n\n## Casting with equal group sizes\n\nSuppose you read the following matrix from a file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- cbind(\n  id = rep(1:3, each = 2),\n  grp = rep(1:2, 3),\n  val = 1:6 * 2\n)\nprint(x)\n#>      id grp val\n#> [1,]  1   1   2\n#> [2,]  1   2   4\n#> [3,]  2   1   6\n#> [4,]  2   2   8\n#> [5,]  3   1  10\n#> [6,]  3   2  12\n```\n:::\n\n\nFor computing purposes, you may need the rows of each group - defined in column \"grp\" - to be cast to a new dimension.\n\n'broadcast' allows users to cast subsets of an array onto a new dimension, based on some grouping factor.\nIn this case, the following will do the job:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmargin <- 1L # we cast from the rows, so margin = 1\ngrp <- as.factor(x[, 2]) # factor to define which rows belongs to which group\nlevels(grp) <- c(\"a\", \"b\") # names for the new dimension\nout <- acast(x, margin, grp) # casting is performed here\nprint(out)\n#> , , a\n#> \n#>      id grp val\n#> [1,]  1   1   2\n#> [2,]  2   1   6\n#> [3,]  3   1  10\n#> \n#> , , b\n#> \n#>      id grp val\n#> [1,]  1   2   4\n#> [2,]  2   2   8\n#> [3,]  3   2  12\n```\n:::\n\n\nNotice that the dimension-names of the new dimension (dimension 3) are equal to `levels(grp)`.\n\nWith the cast array, one can use broadcasting to easily do things like multiply the values in each group with a different value, like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\n# create the multiplication factor array\nmult <- array(\n  1, c(1, 3, 2),\n  list(NULL, c(\"mult_id\", \"mult_grp\", \"mult_val\"), c(\"a\", \"b\"))\n)\nmult[, \"mult_val\", c(\"a\", \"b\")] <- c(2, 10)\nprint(mult)\n#> , , a\n#> \n#>      mult_id mult_grp mult_val\n#> [1,]       1        1        2\n#> \n#> , , b\n#> \n#>      mult_id mult_grp mult_val\n#> [1,]       1        1       10\n\nout2 <- bc.num(out, mult, \"*\")\ndimnames(out2) <- dimnames(out)\nprint(out2)\n#> , , a\n#> \n#>      id grp val\n#> [1,]  1   1   4\n#> [2,]  2   1  12\n#> [3,]  3   1  20\n#> \n#> , , b\n#> \n#>      id grp val\n#> [1,]  1   2  40\n#> [2,]  2   2  80\n#> [3,]  3   2 120\n```\n:::\n\n\n\nPerhaps you'd like to reverse-cast the array back when you're done computing; reverse-casting an array can be done be combining `asplit()` with [bind_array()](/man/bind.qmd):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasplit(out2, ndim(out2)) |> bind_array(along = margin)\n#>     id grp val\n#> a.1  1   1   4\n#> a.2  2   1  12\n#> a.3  3   1  20\n#> b.1  1   2  40\n#> b.2  2   2  80\n#> b.3  3   2 120\n```\n:::\n\n\n...though the order of, in this case, the rows (because `margin = 1`) will not necessarily be the same as the original array.\n\n\n&nbsp;\n\n\n## Casting with unequal group sizes\n\nThe casting arrays also works when the groups have unequal sizes, though there are a few things to keep in mind.\n\nLet's start again with the input array:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- cbind(\n  id = c(rep(1:3, each = 2), 1),\n  grp = c(rep(1:2, 3), 2),\n  val = rnorm(7)\n)\nprint(x)\n#>      id grp         val\n#> [1,]  1   1  0.16417542\n#> [2,]  1   2  0.74649946\n#> [3,]  2   1 -0.05821923\n#> [4,]  2   2  0.60571476\n#> [5,]  3   1 -0.10706383\n#> [6,]  3   2  0.32712375\n#> [7,]  1   2  1.79955043\n```\n:::\n\n\nOnce again, the [acast()](/man/acast.qmd) function can be used to cast the group subsets from the rows over a new dimension. But this time, we need to specify `fill = TRUE` to allow [acast()](/man/acast.qmd) to fill the gaps, otherwise an error is called.\n\nThus one can cast in this case like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrp <- as.factor(x[, 2])\nlevels(grp) <- c(\"a\", \"b\")\nmargin <- 1L\nout <- acast(x, margin, grp, fill = TRUE)\nprint(out)\n#> , , a\n#> \n#>      id grp         val\n#> [1,]  1   1  0.16417542\n#> [2,]  2   1 -0.05821923\n#> [3,]  3   1 -0.10706383\n#> [4,] NA  NA          NA\n#> \n#> , , b\n#> \n#>      id grp       val\n#> [1,]  1   2 0.7464995\n#> [2,]  2   2 0.6057148\n#> [3,]  3   2 0.3271237\n#> [4,]  1   2 1.7995504\n```\n:::\n\n\nNotice that some values are missing ( `NA` ); if some groups have unequal number of elements, [acast()](/man/acast.qmd) needs to fill the gaps with missing values.\n\nOnce again, we can get the original array back when we're done like so:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasplit(out, ndim(out)) |> bind_array(along = margin)\n#>     id grp         val\n#> a.1  1   1  0.16417542\n#> a.2  2   1 -0.05821923\n#> a.3  3   1 -0.10706383\n#> a.4 NA  NA          NA\n#> b.1  1   2  0.74649946\n#> b.2  2   2  0.60571476\n#> b.3  3   2  0.32712375\n#> b.4  1   2  1.79955043\n```\n:::\n\n\n... but we do keep the missing values when the groups have an unequal number of elements.\n\n\n&nbsp;\n\n# Vector quantization\n\nHere is an example taken from Numpy's own online documentation.\n\nThe basic operation in Vector Quantization (VQ) finds the closest point in a set of points, called codes in VQ jargon, to a given point, called the observation. In the very simple, two-dimensional case shown below, the values in observation describe the weight and height of an athlete to be classified. The codes represent different classes of athletes. Finding the closest point requires calculating the distance between observation and each of the codes. The shortest distance provides the best match. In this example, `codes[1]` is the closest class indicating that the athlete is likely a basketball player.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nobservation <- array(c(111.0, 188.0), dim = c(1, 2))\ncodes <- array(\n  c(102.0, 203.0,\n    132.0, 193.0,\n    45.0, 155.0,\n    57.0, 173.0),\n  dim = c(4, 2)\n)\n\ndiff <- bc.num(codes, observation, \"-\") # broadcasting happens here\ndist <- matrixStats::colSums2(diff^2) |> sqrt()\nwhich.min(dist) |> print()\n#> [1] 1\ncodes[1] |> print()\n#> [1] 102\n```\n:::\n\n\n\n&nbsp;\n\n\n# Perform computation on all possible pairs\n\nSuppose you have 2 vectors of strings, and you want to find concatenate every possible pair strings.\n\nIn base R, this would require a either a loop (which is slow), or repeating the vectors several times (which requires more memory).\n\nThe 'broadcasted way to do this, is to make the vectors orthogonal, and concatenate the strings of the orthogonal vectors, using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- array(letters[1:10], c(10, 1))\ny <- array(letters[1:10], c(1, 10))\n\nout <- bc.str(x, y, \"+\")\ndimnames(out) <- list(x, y)\nprint(out)\n#>   a    b    c    d    e    f    g    h    i    j   \n#> a \"aa\" \"ab\" \"ac\" \"ad\" \"ae\" \"af\" \"ag\" \"ah\" \"ai\" \"aj\"\n#> b \"ba\" \"bb\" \"bc\" \"bd\" \"be\" \"bf\" \"bg\" \"bh\" \"bi\" \"bj\"\n#> c \"ca\" \"cb\" \"cc\" \"cd\" \"ce\" \"cf\" \"cg\" \"ch\" \"ci\" \"cj\"\n#> d \"da\" \"db\" \"dc\" \"dd\" \"de\" \"df\" \"dg\" \"dh\" \"di\" \"dj\"\n#> e \"ea\" \"eb\" \"ec\" \"ed\" \"ee\" \"ef\" \"eg\" \"eh\" \"ei\" \"ej\"\n#> f \"fa\" \"fb\" \"fc\" \"fd\" \"fe\" \"ff\" \"fg\" \"fh\" \"fi\" \"fj\"\n#> g \"ga\" \"gb\" \"gc\" \"gd\" \"ge\" \"gf\" \"gg\" \"gh\" \"gi\" \"gj\"\n#> h \"ha\" \"hb\" \"hc\" \"hd\" \"he\" \"hf\" \"hg\" \"hh\" \"hi\" \"hj\"\n#> i \"ia\" \"ib\" \"ic\" \"id\" \"ie\" \"if\" \"ig\" \"ih\" \"ii\" \"ij\"\n#> j \"ja\" \"jb\" \"jc\" \"jd\" \"je\" \"jf\" \"jg\" \"jh\" \"ji\" \"jj\"\n```\n:::\n\n\n\n&nbsp;\n\n\n\n\n\n\n\n\n&nbsp;\n&nbsp;\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}