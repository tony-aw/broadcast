{
  "hash": "5efd2b7407fd70000f84ff9aaced8c3c",
  "result": {
    "markdown": "---\ntitle: properties\n---\n\n## Small property functions {.unnumbered}\n\n\n### Description\n\n<code>ndim()</code> returns the number of dimensions of an object. <br />\n<code>lst.ndim()</code> returns the number of dimensions of every list-element. <br />\n<code>lst.typeof()</code> returns the (internal) type of every list-element. <br />\n<code>len()</code> is an alias for <code>length</code>. <br />\n<code>lst.len()</code> is an alias for <code>lengths</code>. <br />\n<br />\nThese functions were all designed to be efficient. <br />\n<br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>ndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code></td>\n<td>\nan object.<br />\nFor functions starting with <code>lst.</code>, <code>x</code> must be a list (i.e. recursive vector or recursive array). <br />\n</td></tr>\n</table>\n\n\n### Value\n\nAn integer scalar\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx <- list(\n  array(1:10, 10),\n  array(1:10, c(2, 5)),\n  array(c(letters, NA), c(3,3,3))\n)\nlst.ndim(x)\n## [1] 1 2 3\nlst.typeof(x)\n## [1] \"integer\"   \"integer\"   \"character\"\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}