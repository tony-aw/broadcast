{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA FALSE    NA\n## [2,]    NA    NA    NA\n## [3,] FALSE FALSE FALSE\n## [4,]    NA FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA FALSE\n## [2,]    NA    NA    NA\n## [3,]    NA    NA FALSE\n## [4,] FALSE FALSE    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,]   NA   NA   NA\n## [3,] TRUE TRUE TRUE\n## [4,]   NA TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA   NA TRUE\n## [4,] TRUE TRUE   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##               [,1]                  [,2]                 [,3]\n## [1,]            NA -0.1977829+1.9688887i                   NA\n## [2,]            NA                    NA                   NA\n## [3,] Inf+1.535737i        NaN-0.8363646i       Inf+0.8895784i\n## [4,]            NA -2.7114766+1.4957585i -1.922585-1.8937697i\n## \n## , , 2\n## \n##                      [,1]                [,2]          [,3]\n## [1,]                   NA                  NA Inf+1.416614i\n## [2,]                   NA                  NA            NA\n## [3,]                   NA                  NA Inf+2.088012i\n## [4,] -1.257323-0.6558013i -1.592365-1.167026i            NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA FALSE    NA    NA    NA    NA    NA    NA    NA    NA FALSE FALSE\n## [13]    NA    NA    NA FALSE FALSE    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA TRUE   NA   NA TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE   NA   NA\n## [16]   NA TRUE   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                      y                  \n##  [1,]  0.85244484+0.08916334i        Inf-0.41635486i     Inf+     Infi\n##  [2,]        -Inf+0.47762792i  1.0364495+0.47051704i    -Inf-     Infi\n##  [3,]         NaN+       Infi                     NA     Inf+     NaNi\n##  [4,]         NaN-       Infi  0.9606224+0.65998000i     Inf-     Infi\n##  [5,]                      NA  0.8066180-0.13055867i                NA\n##  [6,]  2.20089369+1.20724740i        NaN+       Infi    -Inf+     Infi\n##  [7,]         Inf+0.22872365i        NaN+       Infi     NaN+     Infi\n##  [8,]         NaN+       NaNi        NaN-       Infi     NaN+     NaNi\n##  [9,] -1.05526629+0.16417980i -3.3909148+0.54701235i 3.48851-1.133963i\n## [10,]                      NA       -Inf+0.03095581i     NaN+     Infi\n## [11,]         NaN+       NaNi                     NA                NA\n## [12,]        -Inf-0.22995693i        NaN+       NaNi     NaN+     NaNi\n## [13,]         NaN+       Infi       -Inf-0.87433648i     NaN-     Infi\n## [14,]         NaN-0.67479187i        NaN-0.26091370i     NaN+     NaNi\n## [15,]         NaN-0.03719552i  1.1280804-0.82389978i     NaN+     NaNi\n## [16,]                      NA                     NA     NaN+     NaNi\n## [17,]         Inf+1.46041088i        NaN+       NaNi     NaN+     NaNi\n## [18,]  0.09851467+0.44262869i                     NA     Inf-     Infi\n##                     out\n##  [1,]     Inf+     Infi\n##  [2,]    -Inf-     Infi\n##  [3,]                NA\n##  [4,]                NA\n##  [5,]                NA\n##  [6,]                NA\n##  [7,]                NA\n##  [8,]                NA\n##  [9,] 3.48851-1.133963i\n## [10,]                NA\n## [11,]                NA\n## [12,]                NA\n## [13,]                NA\n## [14,]                NA\n## [15,]                NA\n## [16,]                NA\n## [17,]                NA\n## [18,]                NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}