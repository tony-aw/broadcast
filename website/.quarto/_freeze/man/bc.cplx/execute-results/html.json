{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA FALSE    NA\n## [2,]   NA    NA    NA\n## [3,]   NA    NA    NA\n## [4,]   NA FALSE FALSE\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA    NA   NA\n## [3,]   NA    NA   NA\n## [4,]   NA FALSE   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]               [,2]            [,3]\n## [1,]   NA 1.726131-1.159285i              NA\n## [2,]   NA                 NA              NA\n## [3,]   NA                 NA              NA\n## [4,]   NA     -Inf+1.071514i -Inf+0.7197485i\n## \n## , , 2\n## \n##      [,1]            [,2] [,3]\n## [1,]   NA              NA   NA\n## [2,]   NA              NA   NA\n## [3,]   NA              NA   NA\n## [4,]   NA -Inf-0.4944084i   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA FALSE    NA    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA FALSE    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA   NA TRUE   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                     y                     \n##  [1,]        NaN+      Infi  0.4643317+0.1159445i      -Inf+      Infi\n##  [2,]                    NA        NaN+      Infi       NaN+      NaNi\n##  [3,]  1.7873445-0.8540083i        NaN+      NaNi       NaN+      NaNi\n##  [4,]                    NA                    NA                   NA\n##  [5,]        NaN+      Infi -1.1588726+2.8244150i      -Inf-      Infi\n##  [6,]        NaN+      NaNi  1.1337459-1.4993526i       NaN+      NaNi\n##  [7,]                    NA  0.9422256+1.2983238i                   NA\n##  [8,]        Inf-0.8466921i        NaN-      Infi       NaN-      Infi\n##  [9,] -0.7394466-0.4058033i        Inf+0.6728003i      -Inf-      Infi\n## [10,]  0.8216772-0.9322444i        NaN+      Infi       Inf+      Infi\n## [11,]  0.6389612+0.5168002i                    NA                   NA\n## [12,]  1.0319741-0.9627574i        NaN-      Infi      -Inf-      Infi\n## [13,]       -Inf+0.2666942i        NaN+0.3644488i       NaN-      Infi\n## [14,]        NaN+0.7616804i                    NA                   NA\n## [15,]  0.4384738+0.6134231i                    NA                   NA\n## [16,]  0.4670954-0.6268939i -1.2211140-1.4141930i -1.456926+0.1049459i\n## [17,]        NaN-      Infi -0.6657677+2.1003553i       Inf+      Infi\n## [18,]        NaN-      Infi       -Inf+0.4770424i       NaN+      Infi\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,]                   NA\n##  [8,]                   NA\n##  [9,]      -Inf-      Infi\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,]                   NA\n## [15,]                   NA\n## [16,] -1.456926+0.1049459i\n## [17,]                   NA\n## [18,]                   NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}