{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA FALSE FALSE\n## [2,]    NA    NA    NA\n## [3,]    NA    NA    NA\n## [4,] FALSE    NA    NA\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA FALSE   NA\n## [2,]   NA    NA   NA\n## [3,]   NA    NA   NA\n## [4,]   NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,] TRUE   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]                 [,2]              [,3]\n## [1,]             NA -0.4721019+1.292449i 1.92658+1.647494i\n## [2,]             NA                   NA                NA\n## [3,]             NA                   NA                NA\n## [4,] NaN-0.6421012i                   NA                NA\n## \n## , , 2\n## \n##      [,1]           [,2] [,3]\n## [1,]   NA Inf+0.2418503i   NA\n## [2,]   NA             NA   NA\n## [3,]   NA             NA   NA\n## [4,]   NA             NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA FALSE    NA    NA\n## [13]    NA    NA    NA FALSE    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA TRUE   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA   NA TRUE   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                     \n##  [1,]        NaN-      Infi        Inf-0.91115828i       NaN-      Infi\n##  [2,]                    NA       -Inf+1.07531009i       NaN+      NaNi\n##  [3,]        NaN+1.9607625i        NaN-       Infi       Inf+      NaNi\n##  [4,]        Inf+1.4996320i                     NA       NaN+      NaNi\n##  [5,]                    NA  0.8151653-0.11920466i                   NA\n##  [6,]       -Inf-1.2490733i        NaN+       NaNi       NaN+      NaNi\n##  [7,]                    NA        NaN-0.07117394i       NaN+      NaNi\n##  [8,] -0.6086691-1.4642893i       -Inf+0.01871025i       Inf+      Infi\n##  [9,]        Inf+0.5124424i                     NA       NaN+      Infi\n## [10,]       -Inf+1.2482933i        NaN-       Infi       NaN+      Infi\n## [11,] -1.2226537-0.8902733i        NaN-0.53516011i       NaN+      NaNi\n## [12,]  1.2434409-0.2659513i                     NA       Inf+      Infi\n## [13,]        NaN+      NaNi        NaN+       NaNi       NaN+      NaNi\n## [14,]  0.7520077+0.1188608i  1.1111220-0.91215953i 0.9439923-0.5538822i\n## [15,]        NaN+      Infi        Inf+0.16162917i       NaN+      Infi\n## [16,]        NaN+      Infi        NaN+       Infi      -Inf+      NaNi\n## [17,]        NaN-      Infi                     NA       NaN+      NaNi\n## [18,]                    NA -0.5001000-1.16658078i                   NA\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,]                   NA\n##  [8,]       Inf+      Infi\n##  [9,]                   NA\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,] 0.9439923-0.5538822i\n## [15,]                   NA\n## [16,]                   NA\n## [17,]                   NA\n## [18,]                   NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}