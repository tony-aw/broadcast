{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA FALSE   NA\n## [2,]   NA    NA   NA\n## [3,]   NA    NA   NA\n## [4,]   NA    NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]                 [,2] [,3]\n## [1,]   NA 0.5893486+0.6151244i   NA\n## [2,]   NA                   NA   NA\n## [3,]   NA                   NA   NA\n## [4,]   NA                   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA FALSE    NA    NA    NA    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## [16] TRUE   NA TRUE\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                      y                        \n##  [1,]                     NA                     NA         Inf+       NaNi\n##  [2,]                     NA                     NA         NaN+       NaNi\n##  [3,]        NaN-       Infi  0.3263209-1.59820243i        -Inf-       Infi\n##  [4,]        NaN+2.71436045i -0.1673598+0.52131377i         NaN+       NaNi\n##  [5,]  1.9336562+0.28826312i -0.6406302-0.82559977i -1.00076857-1.78109619i\n##  [6,]        NaN-       Infi                     NA         NaN+       NaNi\n##  [7,]        NaN+0.53170919i        Inf-1.68749656i         NaN+       Infi\n##  [8,]        Inf-0.32588808i        NaN+       Infi         NaN+       Infi\n##  [9,]                     NA        NaN+       NaNi         NaN+       NaNi\n## [10,]        NaN+       Infi        NaN+       NaNi         NaN+       NaNi\n## [11,]  0.7592814+0.50678211i -0.5309854-0.97166889i  0.08925708-1.00686403i\n## [12,]       -Inf-0.01605535i        NaN-       Infi         NaN+       Infi\n## [13,] -0.8912696-0.27135968i  0.2287813-0.81680478i -0.42555370+0.66591126i\n## [14,] -0.7421851+0.68044765i -0.8362458+0.09039127i  0.55914266-0.63610854i\n## [15,]  0.3159009-1.07693809i -0.2178745-0.81387520i -0.94531996-0.02246659i\n## [16,]        NaN+       NaNi        NaN-0.26853886i         NaN+       NaNi\n## [17,]                     NA                     NA         NaN+       NaNi\n## [18,]        NaN+       NaNi       -Inf+0.93767919i         NaN+       NaNi\n##                           out\n##  [1,]                      NA\n##  [2,]                      NA\n##  [3,]                      NA\n##  [4,]                      NA\n##  [5,] -1.00076857-1.78109619i\n##  [6,]                      NA\n##  [7,]                      NA\n##  [8,]                      NA\n##  [9,]                      NA\n## [10,]                      NA\n## [11,]  0.08925708-1.00686403i\n## [12,]                      NA\n## [13,] -0.42555370+0.66591126i\n## [14,]  0.55914266-0.63610854i\n## [15,] -0.94531996-0.02246659i\n## [16,]                      NA\n## [17,]                      NA\n## [18,]                      NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}