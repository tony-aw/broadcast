{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1] [,2]  [,3]\n## [1,]    NA   NA    NA\n## [2,] FALSE   NA    NA\n## [3,]    NA   NA FALSE\n## [4,]    NA   NA    NA\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA    NA\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE    NA\n## [4,]    NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE   NA   NA\n## [3,]   NA   NA TRUE\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                      [,1] [,2]            [,3]\n## [1,]                   NA   NA              NA\n## [2,] 0.06078364-1.546672i   NA              NA\n## [3,]                   NA   NA -Inf-0.9714465i\n## [4,]                   NA   NA              NA\n## \n## , , 2\n## \n##                     [,1]                 [,2]          [,3]\n## [1,]                  NA                   NA            NA\n## [2,] 3.692324+0.2862562i -1.332681-0.7190036i Inf-1.030432i\n## [3,]     -Inf-0.1484175i      -Inf-2.7713135i            NA\n## [4,]                  NA                   NA            NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA FALSE    NA    NA    NA    NA FALSE    NA\n## [13] FALSE    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA TRUE   NA TRUE   NA   NA   NA   NA   NA\n## [16]   NA TRUE   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                        y                    \n##  [1,]        -Inf-0.34899780i        NaN+         Infi       NaN-     Infi\n##  [2,]         NaN-       Infi                       NA       NaN+     NaNi\n##  [3,] -0.09564894-0.68933146i        NaN+0.0001577295i       NaN+     NaNi\n##  [4,]                      NA        NaN+         Infi      -Inf+     NaNi\n##  [5,] -1.92841884+0.93598513i        NaN-         Infi       Inf+     Infi\n##  [6,]         Inf+0.28581627i        NaN+         NaNi       NaN+     NaNi\n##  [7,]                      NA                       NA       NaN+     NaNi\n##  [8,] -0.28083431+0.63673949i -0.7273457+2.4222324921i -1.338067-1.143376i\n##  [9,] -0.75448249+0.05114343i                       NA                  NA\n## [10,] -0.16101812+0.05674308i        NaN-0.2430722311i       NaN+     NaNi\n## [11,]         NaN-       Infi -1.7496548-0.4961203615i      -Inf+     Infi\n## [12,]         NaN+       NaNi                       NA                  NA\n## [13,]         NaN+       NaNi        Inf-1.4818436298i       NaN+     NaNi\n## [14,]         NaN+       Infi -1.1321449-0.2419918334i       Inf-     Infi\n## [15,]                      NA -0.3673567-0.1653348035i                  NA\n## [16,]        -Inf+0.56451562i -0.8737227-0.1678381037i       Inf+     Infi\n## [17,] -0.62257398+1.24880174i        Inf+1.0942190462i      -Inf+     Infi\n## [18,]                      NA        NaN-         Infi       NaN+     NaNi\n##                       out\n##  [1,]                  NA\n##  [2,]                  NA\n##  [3,]                  NA\n##  [4,]                  NA\n##  [5,]                  NA\n##  [6,]                  NA\n##  [7,]                  NA\n##  [8,] -1.338067-1.143376i\n##  [9,]                  NA\n## [10,]                  NA\n## [11,]                  NA\n## [12,]                  NA\n## [13,]                  NA\n## [14,]                  NA\n## [15,]                  NA\n## [16,]       Inf+     Infi\n## [17,]      -Inf+     Infi\n## [18,]                  NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}