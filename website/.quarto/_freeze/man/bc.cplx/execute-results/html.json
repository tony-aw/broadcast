{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA FALSE   NA\n## [3,]   NA    NA   NA\n## [4,]   NA    NA   NA\n## \n## , , 2\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA    NA\n## [2,]   NA FALSE FALSE\n## [3,]   NA    NA    NA\n## [4,]   NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE TRUE\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]          [,2] [,3]\n## [1,]   NA            NA   NA\n## [2,]   NA NaN+2.518636i   NA\n## [3,]   NA            NA   NA\n## [4,]   NA            NA   NA\n## \n## , , 2\n## \n##      [,1]           [,2]           [,3]\n## [1,]   NA             NA             NA\n## [2,]   NA -Inf+2.648478i -Inf+2.083637i\n## [3,]   NA             NA             NA\n## [4,]   NA             NA             NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA FALSE FALSE    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA   NA TRUE TRUE TRUE TRUE\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                     y                      \n##  [1,]                     NA                    NA       -Inf+      NaNi\n##  [2,]  0.3016542+1.26820536i       -Inf+0.7508968i       -Inf-      Infi\n##  [3,]        NaN+       Infi        NaN+      NaNi        NaN+      NaNi\n##  [4,]        NaN-       Infi        NaN-      Infi       -Inf+      NaNi\n##  [5,]        NaN+       NaNi        NaN+      NaNi        NaN+      NaNi\n##  [6,]        NaN-       Infi        NaN+0.8530141i        Inf+      NaNi\n##  [7,]  0.9071303-1.45336733i        NaN+      Infi        Inf+      Infi\n##  [8,] -0.9705749+1.03975574i        NaN+      Infi       -Inf-      Infi\n##  [9,]        NaN-1.01732170i  1.4544671-0.1667895i        NaN+      NaNi\n## [10,]                     NA  0.3405395+0.5907766i                    NA\n## [11,]        Inf+0.76590235i        Inf-1.5896002i        Inf+      NaNi\n## [12,] -1.3994971-0.03733574i  0.2899981-0.6841766i -0.4313957+0.9466759i\n## [13,] -0.9417448+0.86382214i                    NA                    NA\n## [14,]                     NA  1.3233989+0.3603982i                    NA\n## [15,]       -Inf+0.91733031i  0.3976425-0.4834826i       -Inf+      Infi\n## [16,]       -Inf+0.61167632i -1.0695176+1.1633654i        Inf-      Infi\n## [17,]        NaN+       NaNi                    NA                    NA\n## [18,]        NaN+       Infi                    NA        Inf+      NaNi\n##                         out\n##  [1,]                    NA\n##  [2,]       -Inf-      Infi\n##  [3,]                    NA\n##  [4,]                    NA\n##  [5,]                    NA\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]                    NA\n##  [9,]                    NA\n## [10,]                    NA\n## [11,]        Inf+      NaNi\n## [12,] -0.4313957+0.9466759i\n## [13,]                    NA\n## [14,]                    NA\n## [15,]       -Inf+      Infi\n## [16,]        Inf-      Infi\n## [17,]                    NA\n## [18,]                    NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}