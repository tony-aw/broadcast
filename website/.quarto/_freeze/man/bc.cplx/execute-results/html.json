{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE    NA    NA    NA    NA    NA    NA    NA FALSE    NA FALSE    NA\n## [13] FALSE FALSE    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA TRUE   NA   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA\n## [16]   NA   NA TRUE\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                      y                       \n##  [1,]        NaN-0.72251451i  1.1875315+0.75018754i         NaN+      NaNi\n##  [2,] -0.5713408+1.43679556i -0.1443451+0.12811999i -0.10161200-0.2805945i\n##  [3,]        NaN+       Infi -0.4440159+1.09885491i        -Inf-      Infi\n##  [4,]        NaN+       NaNi        Inf-0.68033901i         NaN+      NaNi\n##  [5,]  0.6556025+0.35374457i                     NA                     NA\n##  [6,] -0.6596389-0.28206437i        NaN+       NaNi         NaN+      NaNi\n##  [7,]                     NA -0.2549146+0.85738700i                     NA\n##  [8,] -0.7696597-1.29729481i  0.5076877+0.34560177i  0.05760061-0.9246164i\n##  [9,]        NaN+       Infi  0.9511938-0.05088573i         Inf+      Infi\n## [10,]        NaN-       Infi        NaN+       NaNi         NaN+      NaNi\n## [11,]                     NA                     NA         NaN+      NaNi\n## [12,]        NaN-       Infi        NaN-0.90772039i        -Inf+      NaNi\n## [13,]                     NA                     NA                     NA\n## [14,] -0.4013938-0.58922343i        NaN-       Infi        -Inf+      Infi\n## [15,]        Inf-0.58669364i        NaN-       Infi         NaN-      Infi\n## [16,]  0.3605970+0.87265197i       -Inf+0.54883249i        -Inf-      Infi\n## [17,]        Inf+0.02277322i        NaN+       Infi         NaN+      Infi\n## [18,]       -Inf-0.08896818i                     NA         NaN+      NaNi\n##                          out\n##  [1,]                     NA\n##  [2,] -0.10161200-0.2805945i\n##  [3,]                     NA\n##  [4,]                     NA\n##  [5,]                     NA\n##  [6,]                     NA\n##  [7,]                     NA\n##  [8,]  0.05760061-0.9246164i\n##  [9,]                     NA\n## [10,]                     NA\n## [11,]                     NA\n## [12,]                     NA\n## [13,]                     NA\n## [14,]                     NA\n## [15,]                     NA\n## [16,]        -Inf-      Infi\n## [17,]                     NA\n## [18,]                     NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}