{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,]    NA    NA    NA\n## [3,]    NA FALSE    NA\n## [4,]    NA    NA FALSE\n## \n## , , 2\n## \n##       [,1]  [,2] [,3]\n## [1,] FALSE FALSE   NA\n## [2,]    NA    NA   NA\n## [3,] FALSE FALSE   NA\n## [4,] FALSE    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE   NA TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE   NA\n## [2,]   NA   NA   NA\n## [3,] TRUE TRUE   NA\n## [4,] TRUE   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                     [,1]           [,2]                 [,3]\n## [1,] 0.2388349-1.516583i             NA  1.834292-1.6516378i\n## [2,]                  NA             NA                   NA\n## [3,]                  NA Inf+0.1481176i                   NA\n## [4,]                  NA             NA -1.956312-0.2571816i\n## \n## , , 2\n## \n##                       [,1]                   [,2] [,3]\n## [1,] -0.4987683-0.9756431i  0.7210567-0.51561304i   NA\n## [2,]                    NA                     NA   NA\n## [3,] -1.3784883+1.5936054i -0.9174871+0.04592332i   NA\n## [4,] -1.3768291-1.5877090i                     NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA FALSE FALSE    NA FALSE    NA    NA    NA    NA    NA\n## [13]    NA FALSE    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA TRUE   NA   NA TRUE TRUE   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                   \n##  [1,]        NaN-2.7271465i        NaN+       Infi      Inf+     NaNi\n##  [2,]        NaN+      NaNi        NaN-       Infi      NaN+     NaNi\n##  [3,]  0.2692642-0.1206421i        NaN+       NaNi      NaN+     NaNi\n##  [4,]        NaN-      Infi -0.9840372-0.03181721i     -Inf+     Infi\n##  [5,]        NaN+      NaNi                     NA                 NA\n##  [6,] -0.5455594+0.8922008i        NaN+       Infi     -Inf-     Infi\n##  [7,]                    NA        Inf+0.94077291i      NaN+     NaNi\n##  [8,]                    NA  0.3691326+0.21396791i                 NA\n##  [9,] -1.3541334+1.6095628i       -Inf+0.11973824i      Inf-     Infi\n## [10,]        NaN+      Infi                     NA     -Inf+     NaNi\n## [11,] -0.8316599+1.1686599i                     NA                 NA\n## [12,]       -Inf+2.1148785i        NaN-       Infi      NaN+     Infi\n## [13,] -1.7763183-1.4240770i  0.2982570+1.11518365i 1.058308-2.405662i\n## [14,]        Inf-0.1702734i                     NA      NaN+     NaNi\n## [15,]                    NA        Inf+0.20421716i      NaN-     Infi\n## [16,]        Inf-1.0554127i -0.4727713+0.93104816i     -Inf+     Infi\n## [17,]        NaN+      Infi  1.7259853+0.21673484i     -Inf+     Infi\n## [18,]                    NA       -Inf-0.28123839i      NaN-     Infi\n##                      out\n##  [1,]                 NA\n##  [2,]                 NA\n##  [3,]                 NA\n##  [4,]                 NA\n##  [5,]                 NA\n##  [6,]                 NA\n##  [7,]                 NA\n##  [8,]                 NA\n##  [9,]      Inf-     Infi\n## [10,]                 NA\n## [11,]                 NA\n## [12,]                 NA\n## [13,] 1.058308-2.405662i\n## [14,]                 NA\n## [15,]                 NA\n## [16,]     -Inf+     Infi\n## [17,]                 NA\n## [18,]                 NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}