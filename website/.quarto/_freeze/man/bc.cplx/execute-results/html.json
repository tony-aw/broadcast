{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,]    NA    NA    NA\n## [3,] FALSE    NA FALSE\n## [4,]    NA FALSE    NA\n## \n## , , 2\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA FALSE\n## [2,]   NA    NA    NA\n## [3,]   NA FALSE    NA\n## [4,]   NA    NA FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE   NA TRUE\n## [2,]   NA   NA   NA\n## [3,] TRUE   NA TRUE\n## [4,]   NA TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                        [,1]          [,2]                  [,3]\n## [1,] -0.4618393-0.08155357i            NA -1.994529+0.29737220i\n## [2,]                     NA            NA                    NA\n## [3,]  1.8494688+1.61255419i            NA  2.905915+0.02938799i\n## [4,]                     NA Inf+1.947839i                    NA\n## \n## , , 2\n## \n##      [,1]                [,2]                 [,3]\n## [1,]   NA                  NA -1.499057+1.8403939i\n## [2,]   NA                  NA                   NA\n## [3,]   NA 2.886686-0.3093932i                   NA\n## [4,]   NA                  NA -0.123883+0.7853007i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA FALSE\n## [13]    NA FALSE    NA FALSE    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA TRUE\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                out\n##  [1,]        NaN+      Infi                     NA -Inf+NaNi       NA\n##  [2,]        NaN+      NaNi        Inf-0.23850815i  NaN+NaNi       NA\n##  [3,]       -Inf-1.1804207i       -Inf+0.01822371i  Inf+NaNi Inf+NaNi\n##  [4,]  1.0061993+0.2883263i                     NA        NA       NA\n##  [5,]        NaN-      Infi  2.2249489-0.72797540i -Inf-Infi       NA\n##  [6,]        NaN+0.8077009i        NaN+       NaNi  NaN+NaNi       NA\n##  [7,]        NaN-      Infi  0.1600611-1.21072637i -Inf-Infi       NA\n##  [8,] -0.7111774+1.2321498i        NaN-       Infi  Inf+Infi       NA\n##  [9,] -0.3075782+0.1810922i        NaN+       NaNi  NaN+NaNi       NA\n## [10,]                    NA  1.0242464+0.37516118i        NA       NA\n## [11,]                    NA                     NA  NaN+NaNi       NA\n## [12,]                    NA  1.5172741+1.23664263i        NA       NA\n## [13,]        NaN-0.2682017i  0.3995929+0.20512288i  NaN+NaNi       NA\n## [14,]  0.5430853-1.5583047i        NaN-0.24541057i  NaN+NaNi       NA\n## [15,]                    NA        NaN-       Infi  NaN+NaNi       NA\n## [16,]        NaN+      NaNi        NaN+       Infi  NaN+NaNi       NA\n## [17,]       -Inf-0.3856684i -0.4933636-1.23139222i  Inf+Infi Inf+Infi\n## [18,]  0.4045719+0.3335154i        NaN+       Infi -Inf+Infi       NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}