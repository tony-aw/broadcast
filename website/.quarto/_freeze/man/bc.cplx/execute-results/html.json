{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA    NA   NA\n## [3,]   NA FALSE   NA\n## [4,]   NA    NA   NA\n## \n## , , 2\n## \n##       [,1]  [,2] [,3]\n## [1,] FALSE FALSE   NA\n## [2,]    NA    NA   NA\n## [3,]    NA    NA   NA\n## [4,]    NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]           [,2] [,3]\n## [1,]   NA             NA   NA\n## [2,]   NA             NA   NA\n## [3,]   NA -Inf+1.388436i   NA\n## [4,]   NA             NA   NA\n## \n## , , 2\n## \n##                [,1]                  [,2] [,3]\n## [1,] Inf+0.4824432i -1.512028+0.09656043i   NA\n## [2,]             NA                    NA   NA\n## [3,]             NA                    NA   NA\n## [4,]             NA                    NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA FALSE    NA    NA    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA TRUE   NA   NA   NA TRUE   NA   NA TRUE   NA\n## [16]   NA TRUE   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                     y                     \n##  [1,]                      NA                    NA                   NA\n##  [2,]         NaN-       Infi        NaN+      NaNi       NaN+      NaNi\n##  [3,]         NaN+       NaNi                    NA                   NA\n##  [4,] -0.08893317-0.44374475i                    NA                   NA\n##  [5,]         NaN-0.20362268i        NaN+      NaNi       NaN+      NaNi\n##  [6,] -0.43475076-1.80331909i        NaN+      Infi       Inf-      Infi\n##  [7,]         NaN+       NaNi -0.9954418+0.1433055i       NaN+      NaNi\n##  [8,]        -Inf-0.11412224i        NaN+      Infi       NaN-      Infi\n##  [9,]         Inf-0.05276440i        NaN+0.1664074i       NaN+      Infi\n## [10,] -1.19909701-0.51844468i        NaN-      Infi      -Inf+      Infi\n## [11,]         NaN+       Infi  1.0575888-1.4902912i       Inf+      Infi\n## [12,]                      NA        NaN-      Infi       Inf+      NaNi\n## [13,] -0.48864175-0.04277979i                    NA                   NA\n## [14,]                      NA       -Inf-1.1704170i       NaN+      NaNi\n## [15,]                      NA       -Inf+1.1202233i       NaN+      Infi\n## [16,] -0.62498828+0.24051103i -0.9467739+0.4669006i 0.4794279-0.5195170i\n## [17,]         NaN+       Infi        Inf+0.2023262i       NaN+      Infi\n## [18,] -0.55393267-1.43776184i  0.2442347+0.6993706i 0.8702388-0.7385555i\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,]                   NA\n##  [8,]                   NA\n##  [9,]                   NA\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,]                   NA\n## [15,]                   NA\n## [16,] 0.4794279-0.5195170i\n## [17,]                   NA\n## [18,] 0.8702388-0.7385555i\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}