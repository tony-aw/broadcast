{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2] [,3]\n## [1,]    NA    NA   NA\n## [2,] FALSE FALSE   NA\n## [3,]    NA    NA   NA\n## [4,]    NA FALSE   NA\n## \n## , , 2\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA    NA\n## [2,]   NA    NA    NA\n## [3,]   NA    NA    NA\n## [4,]   NA FALSE FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]           [,2] [,3]\n## [1,]             NA             NA   NA\n## [2,] -Inf+1.662053i -Inf+2.294139i   NA\n## [3,]             NA             NA   NA\n## [4,]             NA  Inf+0.360539i   NA\n## \n## , , 2\n## \n##      [,1]            [,2]                 [,3]\n## [1,]   NA              NA                   NA\n## [2,]   NA              NA                   NA\n## [3,]   NA              NA                   NA\n## [4,]   NA -Inf+0.9782609i -0.7908463+1.610347i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA FALSE    NA    NA FALSE    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA   NA TRUE   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                       y                     \n##  [1,]        NaN-      Infi  0.9699300+0.800823901i       Inf-      Infi\n##  [2,]        NaN-      Infi                      NA       NaN+      NaNi\n##  [3,]  0.3474393-1.5797027i        NaN-        Infi      -Inf-      Infi\n##  [4,]       -Inf-1.0822852i        NaN+        Infi       NaN-      Infi\n##  [5,]        NaN+0.3521373i       -Inf-0.285834919i       NaN-      Infi\n##  [6,]                    NA        NaN+        Infi      -Inf+      NaNi\n##  [7,]  1.2518014-0.1173712i -1.0471621-0.001369802i -1.311000+0.1211920i\n##  [8,]        NaN+      NaNi -0.3357772+0.198932117i       NaN+      NaNi\n##  [9,]  0.7412007+0.7165281i -0.2764484+1.194894093i -1.061079+0.6875732i\n## [10,]        NaN+      Infi  1.2578954-0.331414307i       Inf+      Infi\n## [11,] -1.7802090+0.2137576i                      NA                   NA\n## [12,]                    NA        NaN-        Infi       NaN+      NaNi\n## [13,]       -Inf+0.2176042i        NaN+        NaNi       NaN+      NaNi\n## [14,]        NaN+2.1574694i                      NA       NaN+      NaNi\n## [15,]                    NA        NaN+        NaNi       NaN+      NaNi\n## [16,]        Inf-1.6622111i                      NA       NaN-      Infi\n## [17,]                    NA -0.5185176+0.023777224i                   NA\n## [18,]        NaN+      NaNi  0.5727317+0.822534895i       NaN+      NaNi\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,] -1.311000+0.1211920i\n##  [8,]                   NA\n##  [9,] -1.061079+0.6875732i\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,]                   NA\n## [15,]                   NA\n## [16,]                   NA\n## [17,]                   NA\n## [18,]                   NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}