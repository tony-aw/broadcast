{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,]    NA   NA    NA\n## [2,]    NA   NA    NA\n## [3,] FALSE   NA FALSE\n## [4,]    NA   NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,] TRUE   NA TRUE\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##               [,1] [,2]           [,3]\n## [1,]            NA   NA             NA\n## [2,]            NA   NA             NA\n## [3,] Inf+1.723794i   NA Inf-0.4579423i\n## [4,]            NA   NA             NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA    NA FALSE    NA    NA FALSE\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA TRUE   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                       y                        \n##  [1,]        NaN+       Infi         NaN+       NaNi         NaN+       NaNi\n##  [2,]        Inf+0.35825091i -0.03600920+0.54745653i        -Inf+       Infi\n##  [3,]        Inf-0.37186135i                      NA         NaN-       Infi\n##  [4,] -0.1690462-0.02828919i  0.44102425+0.36861194i -0.06412576-0.07478868i\n##  [5,] -0.3659832+0.81246215i         NaN+       Infi        -Inf-       Infi\n##  [6,]                     NA                      NA                      NA\n##  [7,] -0.5781897-0.82925528i         NaN-1.41882323i         NaN+       NaNi\n##  [8,]       -Inf+0.91220018i        -Inf+1.01541055i         Inf-       Infi\n##  [9,]                     NA  1.22846673-0.60307926i                      NA\n## [10,]                     NA  0.09490571-0.61298877i        -Inf-       Infi\n## [11,]        NaN+       NaNi         NaN+       NaNi         NaN+       NaNi\n## [12,]                     NA         NaN+       Infi         NaN+       NaNi\n## [13,]  1.5653536+1.08759096i -2.25827636-0.03143679i -3.50081064-2.50529064i\n## [14,]        NaN-       Infi                      NA         NaN+       NaNi\n## [15,]        NaN-0.89854929i                      NA                      NA\n## [16,]  1.5962948-1.02123577i         Inf+1.09232581i         Inf-       Infi\n## [17,]  0.8103137+1.25225728i         NaN-       Infi         Inf-       Infi\n## [18,]        NaN+       Infi  0.04802723+0.07226508i        -Inf+       Infi\n##                           out\n##  [1,]                      NA\n##  [2,]        -Inf+       Infi\n##  [3,]                      NA\n##  [4,] -0.06412576-0.07478868i\n##  [5,]                      NA\n##  [6,]                      NA\n##  [7,]                      NA\n##  [8,]         Inf-       Infi\n##  [9,]                      NA\n## [10,]                      NA\n## [11,]                      NA\n## [12,]                      NA\n## [13,] -3.50081064-2.50529064i\n## [14,]                      NA\n## [15,]                      NA\n## [16,]         Inf-       Infi\n## [17,]                      NA\n## [18,]                      NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}