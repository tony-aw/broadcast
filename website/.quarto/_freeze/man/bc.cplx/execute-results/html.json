{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA FALSE   NA\n## [3,]   NA    NA   NA\n## [4,]   NA    NA   NA\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA FALSE   NA\n## [3,]   NA    NA   NA\n## [4,]   NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]                 [,2] [,3]\n## [1,]   NA                   NA   NA\n## [2,]   NA 0.06265135-1.687134i   NA\n## [3,]   NA                   NA   NA\n## [4,]   NA                   NA   NA\n## \n## , , 2\n## \n##      [,1]                  [,2] [,3]\n## [1,]   NA                    NA   NA\n## [2,]   NA 0.8756725-0.05973301i   NA\n## [3,]   NA                    NA   NA\n## [4,]   NA                    NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA FALSE FALSE    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA TRUE   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                      \n##  [1,]                    NA  0.67269699+0.6399054i                    NA\n##  [2,]  2.0693939+0.9166421i         NaN+1.7844370i        NaN+      NaNi\n##  [3,]        NaN-      Infi         NaN+      Infi        Inf+      NaNi\n##  [4,]        NaN+      NaNi         NaN+      NaNi        NaN+      NaNi\n##  [5,] -1.8108126-0.4772167i                     NA                    NA\n##  [6,] -0.1578143-1.1221493i  0.05323992-1.4924222i -1.6831225+0.1757825i\n##  [7,]        NaN+      Infi         NaN+      NaNi        NaN+      NaNi\n##  [8,]                    NA                     NA                    NA\n##  [9,]  0.6413554+1.2742037i  0.55975210+0.9792212i -0.8887272+1.3412671i\n## [10,]                    NA                     NA        NaN+      NaNi\n## [11,]        NaN+      NaNi         NaN-      Infi        NaN+      NaNi\n## [12,]  1.0801646-0.9226688i -1.85648712-0.8029594i -2.7461772+0.8455945i\n## [13,]        NaN+      Infi         NaN-      Infi        Inf+      NaNi\n## [14,]        Inf-1.0689310i -1.15833249-0.1525049i       -Inf-      Infi\n## [15,]        Inf-1.2412179i -0.81015118+0.3861244i       -Inf+      Infi\n## [16,]  0.8460505+0.5703798i        -Inf-0.3671237i       -Inf-      Infi\n## [17,]       -Inf+0.4310939i                     NA        NaN-      Infi\n## [18,]                    NA         Inf-0.7422098i        NaN+      Infi\n##                         out\n##  [1,]                    NA\n##  [2,]                    NA\n##  [3,]                    NA\n##  [4,]                    NA\n##  [5,]                    NA\n##  [6,] -1.6831225+0.1757825i\n##  [7,]                    NA\n##  [8,]                    NA\n##  [9,] -0.8887272+1.3412671i\n## [10,]                    NA\n## [11,]                    NA\n## [12,] -2.7461772+0.8455945i\n## [13,]                    NA\n## [14,]       -Inf-      Infi\n## [15,]       -Inf+      Infi\n## [16,]       -Inf-      Infi\n## [17,]                    NA\n## [18,]                    NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}