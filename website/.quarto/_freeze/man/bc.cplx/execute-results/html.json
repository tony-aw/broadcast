{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2]  [,3]\n## [1,]   NA   NA    NA\n## [2,]   NA   NA FALSE\n## [3,]   NA   NA    NA\n## [4,]   NA   NA    NA\n## \n## , , 2\n## \n##       [,1]  [,2] [,3]\n## [1,]    NA    NA   NA\n## [2,]    NA FALSE   NA\n## [3,]    NA    NA   NA\n## [4,] FALSE    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA TRUE\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA   NA   NA\n## [4,] TRUE   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2]             [,3]\n## [1,]   NA   NA               NA\n## [2,]   NA   NA Inf-0.006788692i\n## [3,]   NA   NA               NA\n## [4,]   NA   NA               NA\n## \n## , , 2\n## \n##                     [,1]                [,2] [,3]\n## [1,]                  NA                  NA   NA\n## [2,]                  NA 0.3738669+2.152358i   NA\n## [3,]                  NA                  NA   NA\n## [4,] -1.001698-2.298841i                  NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE FALSE    NA    NA    NA    NA    NA FALSE    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA\n## [16] TRUE   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                     y                      \n##  [1,]       -Inf-0.8216874i  0.7866750+0.1418205i       -Inf-      Infi\n##  [2,]  1.1333952+1.1401447i -0.6968951-0.2345349i -0.5224539-1.0603820i\n##  [3,]  1.2516312-0.1632378i        NaN+0.6003019i        NaN+      NaNi\n##  [4,] -0.4502517+0.2215542i  0.1872031+2.1733019i -0.5657926-0.9370573i\n##  [5,]                    NA        NaN+      NaNi        NaN+      NaNi\n##  [6,]  0.4152372-1.1612493i  0.6207270+0.1032521i  0.3776504-0.6779447i\n##  [7,]        NaN-      Infi        NaN+      NaNi        NaN+      NaNi\n##  [8,]        Inf+1.5697612i -0.3997561-0.1366041i       -Inf-      Infi\n##  [9,]  0.1535911+0.5807212i        NaN+      Infi       -Inf+      Infi\n## [10,]        NaN+      Infi  0.2145205-0.4688668i        Inf+      Infi\n## [11,]        NaN-      Infi                    NA        NaN+      NaNi\n## [12,]        Inf-1.1060184i                    NA        NaN+      NaNi\n## [13,]        NaN+      Infi        NaN+      Infi       -Inf+      NaNi\n## [14,] -1.1982572+0.7780679i        NaN-      Infi        Inf+      Infi\n## [15,]        NaN+      NaNi  1.0384025-0.6904824i        NaN+      NaNi\n## [16,]        NaN+      NaNi -0.1807887-1.9386158i        NaN+      NaNi\n## [17,]                    NA        NaN-      Infi        NaN+      NaNi\n## [18,]                    NA                    NA                    NA\n##                         out\n##  [1,]       -Inf-      Infi\n##  [2,] -0.5224539-1.0603820i\n##  [3,]                    NA\n##  [4,] -0.5657926-0.9370573i\n##  [5,]                    NA\n##  [6,]  0.3776504-0.6779447i\n##  [7,]                    NA\n##  [8,]       -Inf-      Infi\n##  [9,]                    NA\n## [10,]                    NA\n## [11,]                    NA\n## [12,]                    NA\n## [13,]                    NA\n## [14,]                    NA\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,]                    NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}