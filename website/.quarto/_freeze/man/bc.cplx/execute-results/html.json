{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2] [,3]\n## [1,] FALSE FALSE   NA\n## [2,]    NA    NA   NA\n## [3,]    NA    NA   NA\n## [4,]    NA    NA   NA\n## \n## , , 2\n## \n##       [,1]  [,2] [,3]\n## [1,] FALSE FALSE   NA\n## [2,]    NA    NA   NA\n## [3,]    NA    NA   NA\n## [4,]    NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##               [,1]           [,2] [,3]\n## [1,] Inf+1.021488i Inf+0.6611746i   NA\n## [2,]            NA             NA   NA\n## [3,]            NA             NA   NA\n## [4,]            NA             NA   NA\n## \n## , , 2\n## \n##              [,1]          [,2] [,3]\n## [1,] Inf+2.38368i Inf+1.352462i   NA\n## [2,]           NA            NA   NA\n## [3,]           NA            NA   NA\n## [4,]           NA            NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA FALSE    NA    NA    NA    NA FALSE    NA    NA    NA FALSE    NA\n## [13]    NA    NA    NA FALSE    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA TRUE TRUE   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                     y                        \n##  [1,] -0.1782820+0.1663692i -0.7454844+0.8210911i -0.003697836-0.2704114i\n##  [2,]                    NA        NaN-      Infi          NaN+      NaNi\n##  [3,]  0.1299872-1.8427279i        NaN+0.8180564i          NaN+      NaNi\n##  [4,]                    NA        NaN-1.9408388i          NaN+      NaNi\n##  [5,]        Inf-0.4715162i                    NA          NaN+      NaNi\n##  [6,]  0.2594882+1.2780989i -0.5952561+0.2182995i -0.433470274-0.7041500i\n##  [7,]        NaN+      Infi  0.7043553-1.3076774i          Inf+      Infi\n##  [8,]        NaN+0.9034361i                    NA                      NA\n##  [9,]        NaN-      Infi        Inf+1.3007133i          NaN-      Infi\n## [10,]                    NA                    NA         -Inf+      NaNi\n## [11,] -0.4748805+1.0781138i                    NA         -Inf-      Infi\n## [12,]        NaN+      Infi       -Inf+1.2692426i          NaN-      Infi\n## [13,]        NaN+      NaNi        NaN+      NaNi          NaN+      NaNi\n## [14,]       -Inf+2.2915264i        Inf-1.8913423i         -Inf+      Infi\n## [15,]                    NA  0.4308557+0.2366957i                      NA\n## [16,]  0.9513164+1.0127961i        NaN+      NaNi          NaN+      NaNi\n## [17,]  0.8661803-0.7230540i        NaN-      Infi         -Inf-      Infi\n## [18,]        Inf-0.1470254i        NaN+      Infi          NaN+      Infi\n##                           out\n##  [1,] -0.003697836-0.2704114i\n##  [2,]                      NA\n##  [3,]                      NA\n##  [4,]                      NA\n##  [5,]                      NA\n##  [6,] -0.433470274-0.7041500i\n##  [7,]                      NA\n##  [8,]                      NA\n##  [9,]                      NA\n## [10,]                      NA\n## [11,]                      NA\n## [12,]                      NA\n## [13,]                      NA\n## [14,]         -Inf+      Infi\n## [15,]                      NA\n## [16,]                      NA\n## [17,]                      NA\n## [18,]                      NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}