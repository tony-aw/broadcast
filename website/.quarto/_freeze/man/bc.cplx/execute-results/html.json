{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA FALSE   NA\n## [3,]   NA FALSE   NA\n## [4,]   NA    NA   NA\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA    NA\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE    NA    NA\n## [4,]    NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]                  [,2] [,3]\n## [1,]   NA                    NA   NA\n## [2,]   NA     -Inf+0.480227704i   NA\n## [3,]   NA 1.750214-0.006389108i   NA\n## [4,]   NA                    NA   NA\n## \n## , , 2\n## \n##                     [,1]                 [,2]                [,3]\n## [1,]                  NA                   NA                  NA\n## [2,]     -Inf+2.1791318i -1.620678+0.5533516i 1.315053+0.6049575i\n## [3,] 1.191886-0.2879474i                   NA                  NA\n## [4,]                  NA                   NA                  NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA FALSE    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA TRUE   NA TRUE   NA   NA   NA TRUE   NA   NA   NA   NA TRUE   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                               x                     y                    \n##  [1,]                        NA        NaN+      NaNi       NaN+     NaNi\n##  [2,]  1.392337075+0.136998793i                    NA       NaN+     NaNi\n##  [3,]                        NA        NaN+      Infi       Inf+     NaNi\n##  [4,]          NaN+        Infi       -Inf-0.4369545i       NaN-     Infi\n##  [5,]  0.938649785-0.601036367i                    NA                  NA\n##  [6,]          NaN+1.136009937i        Inf+0.5343306i       NaN+     Infi\n##  [7,]  0.478228283-0.927301296i        Inf+0.4572077i       Inf-     Infi\n##  [8,]          NaN-        Infi -1.1174960+1.1071178i       Inf+     Infi\n##  [9,]          NaN+        Infi        NaN-0.6166196i       Inf+     NaNi\n## [10,] -2.014520212-1.160038148i        NaN-      Infi      -Inf+     Infi\n## [11,]          NaN+        NaNi -0.1159778+1.9707640i       NaN+     NaNi\n## [12,]          NaN+        NaNi        NaN+      NaNi       NaN+     NaNi\n## [13,]         -Inf-2.523203681i                    NA       NaN+     Infi\n## [14,]                        NA                    NA                  NA\n## [15,]          NaN-        Infi -0.2941061+2.0505950i       Inf+     Infi\n## [16,]  1.208335135+0.788129685i  0.9666006+0.3666911i 0.8789774+1.204892i\n## [17,]                        NA        NaN+      Infi      -Inf+     NaNi\n## [18,] -0.005281706-0.007962597i        NaN-      Infi      -Inf+     Infi\n##                       out\n##  [1,]                  NA\n##  [2,]                  NA\n##  [3,]                  NA\n##  [4,]                  NA\n##  [5,]                  NA\n##  [6,]                  NA\n##  [7,]       Inf-     Infi\n##  [8,]                  NA\n##  [9,]                  NA\n## [10,]                  NA\n## [11,]                  NA\n## [12,]                  NA\n## [13,]                  NA\n## [14,]                  NA\n## [15,]                  NA\n## [16,] 0.8789774+1.204892i\n## [17,]                  NA\n## [18,]                  NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}