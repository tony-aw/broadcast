{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1] [,2] [,3]\n## [1,]    NA   NA   NA\n## [2,] FALSE   NA   NA\n## [3,]    NA   NA   NA\n## [4,]    NA   NA   NA\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA    NA\n## [2,] FALSE FALSE    NA\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE   NA\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1] [,2] [,3]\n## [1,]             NA   NA   NA\n## [2,] Inf-0.2317589i   NA   NA\n## [3,]             NA   NA   NA\n## [4,]             NA   NA   NA\n## \n## , , 2\n## \n##                     [,1]            [,2]           [,3]\n## [1,]                  NA              NA             NA\n## [2,] 1.659776-1.7392730i -Inf-0.4508136i             NA\n## [3,]     -Inf-2.6377487i -Inf-0.4323069i -Inf-1.392377i\n## [4,] 1.689652+0.9199604i  Inf+1.2329388i             NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA FALSE    NA    NA FALSE    NA    NA FALSE\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA TRUE TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE TRUE   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                        y                    \n##  [1,]        NaN-      Infi  0.63071975-0.274441595i      -Inf-     Infi\n##  [2,] -0.8816592+0.9166694i -0.11993203+1.744617904i -1.493499-1.648096i\n##  [3,]  1.0174416-0.6305667i                       NA                  NA\n##  [4,]                    NA         NaN+0.009766481i       NaN+     NaNi\n##  [5,]        NaN+      Infi                       NA       NaN+     NaNi\n##  [6,]                    NA -0.03769367-1.330788414i                  NA\n##  [7,]                    NA         NaN+        NaNi       NaN+     NaNi\n##  [8,]        NaN+      NaNi                       NA                  NA\n##  [9,]        NaN+0.9267550i -1.12155489-0.676000652i       NaN+     NaNi\n## [10,]        NaN+      NaNi         NaN-        Infi       NaN+     NaNi\n## [11,]        Inf-0.2054629i  0.25634288+0.145245509i       Inf+     Infi\n## [12,]  0.3319416-0.1156751i         NaN+        Infi       Inf+     Infi\n## [13,]        NaN-      Infi -0.21187713-1.557949188i      -Inf+     Infi\n## [14,]        NaN+      Infi         Inf+0.393328517i       NaN+     Infi\n## [15,]        NaN+1.7600918i        -Inf+0.126470757i       NaN-     Infi\n## [16,] -0.0415326-0.3531402i                       NA                  NA\n## [17,]       -Inf-0.7012585i         NaN-        Infi       NaN+     Infi\n## [18,]  0.2480556+0.4658353i         NaN+        Infi      -Inf+     Infi\n##                       out\n##  [1,]                  NA\n##  [2,] -1.493499-1.648096i\n##  [3,]                  NA\n##  [4,]                  NA\n##  [5,]                  NA\n##  [6,]                  NA\n##  [7,]                  NA\n##  [8,]                  NA\n##  [9,]                  NA\n## [10,]                  NA\n## [11,]       Inf+     Infi\n## [12,]                  NA\n## [13,]                  NA\n## [14,]                  NA\n## [15,]                  NA\n## [16,]                  NA\n## [17,]                  NA\n## [18,]                  NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}