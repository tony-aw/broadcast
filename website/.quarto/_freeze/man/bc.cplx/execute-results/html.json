{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1] [,2]  [,3]\n## [1,] FALSE   NA    NA\n## [2,] FALSE   NA    NA\n## [3,]    NA   NA    NA\n## [4,] FALSE   NA FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,]    NA    NA FALSE\n## [3,]    NA    NA    NA\n## [4,]    NA FALSE    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE   NA   NA\n## [2,] TRUE   NA   NA\n## [3,]   NA   NA   NA\n## [4,] TRUE   NA TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,]   NA   NA TRUE\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                     [,1] [,2]           [,3]\n## [1,] 1.641211+0.2184726i   NA             NA\n## [2,] 0.769394+0.5650648i   NA             NA\n## [3,]                  NA   NA             NA\n## [4,]      NaN-2.8218137i   NA -Inf-2.870152i\n## \n## , , 2\n## \n##                    [,1]            [,2]                 [,3]\n## [1,] 2.900674-1.318376i  Inf-0.9697164i 2.227152-1.64544078i\n## [2,]                 NA              NA      Inf+0.05502337i\n## [3,]                 NA              NA                   NA\n## [4,]                 NA -Inf-2.3117723i                   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE    NA    NA    NA FALSE    NA FALSE    NA    NA    NA    NA    NA\n## [13]    NA FALSE    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA TRUE   NA\n## [16]   NA   NA TRUE\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                     y                     \n##  [1,]         NaN-       Infi        NaN+0.3756690i       Inf+      NaNi\n##  [2,]  1.52210957+1.37828516i        NaN+      NaNi       NaN+      NaNi\n##  [3,]                      NA                    NA                   NA\n##  [4,]                      NA        NaN+      Infi       NaN+      NaNi\n##  [5,] -0.87567398-1.91101932i  0.9269464+0.5649670i 0.2679600-2.2661394i\n##  [6,]                      NA        NaN+      NaNi       NaN+      NaNi\n##  [7,] -0.74597296+0.07015161i                    NA                   NA\n##  [8,]  0.55327451+0.62705283i        Inf+0.5492835i       Inf+      Infi\n##  [9,]        -Inf+0.52127254i       -Inf-0.6202412i       Inf+      NaNi\n## [10,]         NaN+       NaNi                    NA                   NA\n## [11,]         NaN+       NaNi        NaN-      Infi       NaN+      NaNi\n## [12,]         NaN+       Infi                    NA       NaN+      NaNi\n## [13,]  0.05637015+0.35619466i -0.1552350-1.0986467i 0.3825815-0.1172248i\n## [14,]  0.85723596+0.41923003i       -Inf-0.1972742i      -Inf-      Infi\n## [15,]                      NA -1.2919420+0.9197594i                   NA\n## [16,]         Inf+0.47373257i        Inf-1.1705673i       Inf+      NaNi\n## [17,]         Inf+0.59222741i        NaN-      Infi       NaN-      Infi\n## [18,]         NaN+       Infi        NaN+      Infi      -Inf+      NaNi\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,] 0.2679600-2.2661394i\n##  [6,]                   NA\n##  [7,]                   NA\n##  [8,]       Inf+      Infi\n##  [9,]       Inf+      NaNi\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,] 0.3825815-0.1172248i\n## [14,]      -Inf-      Infi\n## [15,]                   NA\n## [16,]       Inf+      NaNi\n## [17,]                   NA\n## [18,]                   NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}