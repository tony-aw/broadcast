{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,]    NA    NA    NA\n## [3,]    NA    NA    NA\n## [4,]    NA    NA    NA\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA    NA\n## [2,]    NA    NA    NA\n## [3,] FALSE FALSE FALSE\n## [4,]    NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,] TRUE TRUE TRUE\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]                [,2]                  [,3]\n## [1,] Inf-0.1884596i -0.409311-1.092981i -0.2417859-0.5873036i\n## [2,]             NA                  NA                    NA\n## [3,]             NA                  NA                    NA\n## [4,]             NA                  NA                    NA\n## \n## , , 2\n## \n##                [,1]          [,2]                [,3]\n## [1,]             NA            NA                  NA\n## [2,]             NA            NA                  NA\n## [3,] -Inf+1.048646i Inf+1.448038i 0.5667057+0.543517i\n## [4,]             NA            NA                  NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE    NA    NA    NA    NA FALSE    NA FALSE FALSE    NA    NA    NA\n## [13]    NA FALSE FALSE    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1] TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                     y                    \n##  [1,]                      NA        NaN+0.2570669i       NaN+     NaNi\n##  [2,]         NaN+       Infi  0.2367552-0.8033623i       Inf+     Infi\n##  [3,] -0.49859803+0.01839371i -0.6277163-0.2306649i 0.3172209+0.103463i\n##  [4,]                      NA -0.6500900-0.6374569i                  NA\n##  [5,] -1.17702126+0.42145010i        NaN-      Infi       Inf+     Infi\n##  [6,]  0.27915133-1.17000870i        NaN+      Infi       Inf+     Infi\n##  [7,]  1.46153568+0.75563878i                    NA                  NA\n##  [8,]         NaN+       NaNi                    NA                  NA\n##  [9,]         NaN+       Infi       -Inf+1.0222763i       NaN-     Infi\n## [10,]         NaN-       Infi        Inf-0.1876494i       NaN-     Infi\n## [11,] -0.93009930+0.37715704i        NaN+      Infi      -Inf-     Infi\n## [12,]  0.82019750-1.43690295i       -Inf+0.1120845i      -Inf+     Infi\n## [13,]  0.03684177-1.40313457i                    NA                  NA\n## [14,]         NaN+       NaNi        NaN+      NaNi       NaN+     NaNi\n## [15,]  0.54005778-2.09164385i        NaN+      NaNi       NaN+     NaNi\n## [16,]         Inf-0.33716733i        Inf+0.7902678i       Inf+     NaNi\n## [17,]                      NA  0.9436575+0.4573899i                  NA\n## [18,]         NaN-       Infi        NaN-      Infi      -Inf+     NaNi\n##                       out\n##  [1,]                  NA\n##  [2,]                  NA\n##  [3,] 0.3172209+0.103463i\n##  [4,]                  NA\n##  [5,]                  NA\n##  [6,]                  NA\n##  [7,]                  NA\n##  [8,]                  NA\n##  [9,]                  NA\n## [10,]                  NA\n## [11,]                  NA\n## [12,]      -Inf+     Infi\n## [13,]                  NA\n## [14,]                  NA\n## [15,]                  NA\n## [16,]       Inf+     NaNi\n## [17,]                  NA\n## [18,]                  NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}