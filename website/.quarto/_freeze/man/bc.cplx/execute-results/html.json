{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA    NA    NA\n## [2,]    NA    NA    NA\n## [3,]    NA FALSE FALSE\n## [4,] FALSE FALSE    NA\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,]    NA   NA    NA\n## [2,]    NA   NA    NA\n## [3,]    NA   NA FALSE\n## [4,] FALSE   NA FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA TRUE TRUE\n## [4,] TRUE TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA TRUE\n## [4,] TRUE   NA TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]                [,2]                 [,3]\n## [1,]             NA                  NA                   NA\n## [2,]             NA                  NA                   NA\n## [3,]             NA 1.291233-1.4450286i -0.9179578-1.463337i\n## [4,] Inf+0.3193301i      Inf+0.5299905i                   NA\n## \n## , , 2\n## \n##               [,1] [,2]            [,3]\n## [1,]            NA   NA              NA\n## [2,]            NA   NA              NA\n## [3,]            NA   NA -Inf+0.1804498i\n## [4,] Inf-1.864475i   NA  Inf+0.5510971i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA    NA    NA FALSE FALSE    NA FALSE    NA\n## [13]    NA FALSE    NA    NA FALSE FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE TRUE\n## [16]   NA TRUE   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                             x                      y                      \n##  [1,]                      NA -1.8353126-1.06344104i                    NA\n##  [2,] -1.247603502-1.2747762i        NaN-0.32255052i        NaN+      NaNi\n##  [3,]          NaN+      Infi  0.7873876-2.00403385i        Inf+      Infi\n##  [4,]          NaN+      Infi        NaN+       Infi       -Inf+      NaNi\n##  [5,]          NaN-      Infi  1.1551511+0.96593857i        Inf-      Infi\n##  [6,] -0.742594774+0.3264206i        NaN+       NaNi        NaN+      NaNi\n##  [7,]                      NA                     NA                    NA\n##  [8,]  0.399639908+1.3314030i        Inf-1.95450205i        Inf+      Infi\n##  [9,]                      NA        NaN-       Infi       -Inf+      NaNi\n## [10,]          NaN+0.4049073i        NaN+       Infi       -Inf+      NaNi\n## [11,]  0.158577844-0.8498843i                     NA                    NA\n## [12,]          NaN+      NaNi -0.3460000-0.15705769i        NaN+      NaNi\n## [13,]         -Inf+0.6308241i        NaN+       NaNi        NaN+      NaNi\n## [14,] -2.583873102+0.8649014i        NaN-0.59046500i        NaN+      NaNi\n## [15,]          NaN-      Infi        Inf+1.46601338i        NaN-      Infi\n## [16,]                      NA        NaN-       Infi        NaN+      NaNi\n## [17,]          Inf-1.0614289i                     NA        NaN+      NaNi\n## [18,] -0.002620376-0.7437984i -0.1723270+0.04854348i 0.03655812+0.1280494i\n##                         out\n##  [1,]                    NA\n##  [2,]                    NA\n##  [3,]                    NA\n##  [4,]                    NA\n##  [5,]                    NA\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]        Inf+      Infi\n##  [9,]                    NA\n## [10,]                    NA\n## [11,]                    NA\n## [12,]                    NA\n## [13,]                    NA\n## [14,]                    NA\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,] 0.03655812+0.1280494i\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}