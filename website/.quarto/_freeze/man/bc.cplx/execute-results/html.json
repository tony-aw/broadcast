{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2] [,3]\n## [1,]    NA FALSE   NA\n## [2,]    NA FALSE   NA\n## [3,]    NA    NA   NA\n## [4,] FALSE FALSE   NA\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA FALSE    NA\n## [2,] FALSE    NA FALSE\n## [3,]    NA    NA    NA\n## [4,] FALSE    NA FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA   NA   NA\n## [4,] TRUE TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA TRUE   NA\n## [2,] TRUE   NA TRUE\n## [3,]   NA   NA   NA\n## [4,] TRUE   NA TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                 [,1]                 [,2] [,3]\n## [1,]              NA -2.037999-2.3708860i   NA\n## [2,]              NA       Inf+0.6438819i   NA\n## [3,]              NA                   NA   NA\n## [4,] -Inf+0.1900999i      -Inf+1.8237870i   NA\n## \n## , , 2\n## \n##                  [,1]          [,2]                 [,3]\n## [1,]               NA Inf-4.045901i                   NA\n## [2,] 2.3016+1.043793i            NA -1.90981+0.90437455i\n## [3,]               NA            NA                   NA\n## [4,]   -Inf+1.869021i            NA      NaN-0.07039274i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA FALSE FALSE    NA    NA    NA FALSE FALSE FALSE    NA    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA   NA TRUE\n## [16]   NA TRUE   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                       y                      \n##  [1,]        NaN-0.19579328i                      NA                    NA\n##  [2,]                     NA                      NA                    NA\n##  [3,]  2.1385414+0.24078703i        NaN+        Infi       -Inf+      Infi\n##  [4,]        Inf-1.77387331i        NaN-        Infi        NaN-      Infi\n##  [5,]                     NA -0.9351338+0.519532626i                    NA\n##  [6,]        NaN-       Infi        Inf+0.001899883i        NaN-      Infi\n##  [7,]        NaN+       Infi                      NA       -Inf+      NaNi\n##  [8,]                     NA  0.7695312+1.597440633i                    NA\n##  [9,]        NaN+       NaNi  0.4034577+1.325367846i        NaN+      NaNi\n## [10,]       -Inf-1.13745955i        NaN+        NaNi        NaN+      NaNi\n## [11,]                     NA                      NA                    NA\n## [12,]        NaN-       Infi -0.3255849-0.197087652i       -Inf+      Infi\n## [13,]        NaN+       Infi -0.2725992-0.432728670i        Inf-      Infi\n## [14,]  0.0970102+0.03140814i        NaN+        NaNi        NaN+      NaNi\n## [15,]        Inf-1.36158240i        NaN+0.118329193i        NaN+      Infi\n## [16,] -1.2536820-0.95791775i        NaN-        Infi       -Inf+      Infi\n## [17,] -0.9734396+1.47491994i        NaN+        Infi       -Inf-      Infi\n## [18,] -0.6669194-0.02642582i  0.9641922-0.243186272i -0.6494649+0.1367061i\n##                         out\n##  [1,]                    NA\n##  [2,]                    NA\n##  [3,]                    NA\n##  [4,]                    NA\n##  [5,]                    NA\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]                    NA\n##  [9,]                    NA\n## [10,]                    NA\n## [11,]                    NA\n## [12,]                    NA\n## [13,]                    NA\n## [14,]                    NA\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,] -0.6494649+0.1367061i\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}