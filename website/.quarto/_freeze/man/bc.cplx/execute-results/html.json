{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA    NA   NA\n## [3,]   NA FALSE   NA\n## [4,]   NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1]          [,2] [,3]\n## [1,]   NA            NA   NA\n## [2,]   NA            NA   NA\n## [3,]   NA NaN-1.762267i   NA\n## [4,]   NA            NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE FALSE FALSE    NA FALSE    NA    NA    NA    NA    NA    NA FALSE\n## [13]    NA FALSE    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1] TRUE   NA   NA   NA   NA   NA TRUE   NA   NA   NA   NA   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                        y                       \n##  [1,]  2.35442396-0.1535535i -0.977647722+0.79113154i -2.1803162+2.01278025i\n##  [2,]         NaN+      NaNi          NaN+       Infi        NaN+       NaNi\n##  [3,]  1.09662644+1.5401780i                       NA                     NA\n##  [4,]                     NA -0.066099880+0.43033170i                     NA\n##  [5,]  0.95258802-0.4465158i          NaN+       NaNi        NaN+       NaNi\n##  [6,] -0.79195890+0.2510570i         -Inf-0.12106482i        Inf-       Infi\n##  [7,]  0.31292980+0.2456423i                       NA        Inf-       Infi\n##  [8,]         NaN+      Infi -1.027394105-0.07477888i        Inf-       Infi\n##  [9,]         NaN-0.3895997i -1.673713644+1.31928002i        NaN+       NaNi\n## [10,]         NaN-      Infi                       NA        NaN+       NaNi\n## [11,] -0.02508067+0.5629814i  0.001107989+1.51100858i -0.8506976-0.03727333i\n## [12,]                     NA                       NA        NaN+       NaNi\n## [13,]        -Inf-0.4540157i          NaN+       NaNi        NaN+       NaNi\n## [14,]                     NA          NaN-0.90836439i        NaN+       NaNi\n## [15,]         Inf-0.7736406i          NaN-       Infi        NaN-       Infi\n## [16,]                     NA          NaN+       Infi        NaN+       NaNi\n## [17,]         NaN+      NaNi  1.185935864-0.86487620i        NaN+       NaNi\n## [18,]         NaN+      Infi         -Inf-0.46804586i        NaN-       Infi\n##                          out\n##  [1,] -2.1803162+2.01278025i\n##  [2,]                     NA\n##  [3,]                     NA\n##  [4,]                     NA\n##  [5,]                     NA\n##  [6,]        Inf-       Infi\n##  [7,]                     NA\n##  [8,]                     NA\n##  [9,]                     NA\n## [10,]                     NA\n## [11,] -0.8506976-0.03727333i\n## [12,]                     NA\n## [13,]                     NA\n## [14,]                     NA\n## [15,]                     NA\n## [16,]                     NA\n## [17,]                     NA\n## [18,]                     NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}