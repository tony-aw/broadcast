{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA    NA\n## [2,]   NA FALSE FALSE\n## [3,]   NA FALSE    NA\n## [4,]   NA    NA    NA\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,]   NA    NA   NA\n## [2,]   NA FALSE   NA\n## [3,]   NA FALSE   NA\n## [4,]   NA    NA   NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE TRUE\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA TRUE   NA\n## [3,]   NA TRUE   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1]                  [,2]           [,3]\n## [1,]   NA                    NA             NA\n## [2,]   NA      Inf+0.007373387i Inf+0.4249672i\n## [3,]   NA 1.564923-0.251359529i             NA\n## [4,]   NA                    NA             NA\n## \n## , , 2\n## \n##      [,1]               [,2] [,3]\n## [1,]   NA                 NA   NA\n## [2,]   NA     Inf-0.5744413i   NA\n## [3,]   NA 1.16207-0.8215166i   NA\n## [4,]   NA                 NA   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE FALSE    NA    NA    NA    NA    NA    NA    NA    NA    NA FALSE\n## [13]    NA    NA    NA    NA    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA TRUE   NA TRUE   NA   NA TRUE   NA   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                     y                   \n##  [1,]                     NA                    NA      Inf+     NaNi\n##  [2,] -1.1448661-0.03816411i        NaN+      Infi      Inf-     Infi\n##  [3,]                     NA                    NA                 NA\n##  [4,] -1.9295805-2.07091067i        NaN+      NaNi      NaN+     NaNi\n##  [5,]  1.1381428-1.03928864i  0.2058078+1.0731470i 1.349548+1.007501i\n##  [6,]        NaN+       NaNi                    NA                 NA\n##  [7,]        NaN-       Infi        Inf+0.3545972i      NaN-     Infi\n##  [8,]        NaN+       Infi  0.4653738-1.9133021i      Inf+     Infi\n##  [9,]                     NA       -Inf+0.6176362i      NaN+     NaNi\n## [10,]                     NA -1.6192071+0.5972983i                 NA\n## [11,]  0.9775049-1.15843946i       -Inf-1.4073206i     -Inf+     Infi\n## [12,]        NaN+1.16581621i        NaN+      NaNi      NaN+     NaNi\n## [13,] -0.5439668+0.35559218i        NaN+      Infi     -Inf-     Infi\n## [14,]        Inf-1.35500478i -0.1413169-0.7104387i     -Inf-     Infi\n## [15,]        NaN-0.65434495i        NaN-      Infi     -Inf+     NaNi\n## [16,]        NaN+       Infi -0.6575146-0.3601054i      Inf-     Infi\n## [17,] -0.9861309+0.49701696i        NaN-      Infi      Inf+     Infi\n## [18,]  0.0704352-2.04669735i  1.2746168+1.0778253i 2.295760-2.532838i\n##                      out\n##  [1,]                 NA\n##  [2,]                 NA\n##  [3,]                 NA\n##  [4,]                 NA\n##  [5,] 1.349548+1.007501i\n##  [6,]                 NA\n##  [7,]                 NA\n##  [8,]                 NA\n##  [9,]                 NA\n## [10,]                 NA\n## [11,]     -Inf+     Infi\n## [12,]                 NA\n## [13,]                 NA\n## [14,]     -Inf-     Infi\n## [15,]                 NA\n## [16,]                 NA\n## [17,]                 NA\n## [18,] 2.295760-2.532838i\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}