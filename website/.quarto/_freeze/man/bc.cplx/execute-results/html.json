{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,] FALSE   NA FALSE\n## [2,]    NA   NA    NA\n## [3,]    NA   NA    NA\n## [4,]    NA   NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE   NA TRUE\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##                     [,1] [,2]                [,3]\n## [1,] -0.8636973-2.11916i   NA 1.660913+0.5158465i\n## [2,]                  NA   NA                  NA\n## [3,]                  NA   NA                  NA\n## [4,]                  NA   NA                  NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA    NA    NA FALSE    NA    NA    NA    NA FALSE    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA TRUE TRUE   NA   NA   NA   NA   NA   NA   NA TRUE   NA\n## [16]   NA   NA TRUE\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                         y                     \n##  [1,]                    NA         NaN+0.1952736652i       NaN+      NaNi\n##  [2,]        Inf-0.6074739i         Inf-0.2222198093i       Inf-      Infi\n##  [3,]        NaN+      NaNi -1.23819378+0.0622706375i       NaN+      NaNi\n##  [4,]  0.7785054+0.4059759i         NaN-         Infi       Inf-      Infi\n##  [5,]                    NA                        NA                   NA\n##  [6,]                    NA                        NA                   NA\n##  [7,]  1.3540313+0.5782084i         NaN+         Infi      -Inf+      Infi\n##  [8,]        NaN-      Infi  1.15695277-0.1720981706i      -Inf-      Infi\n##  [9,]        NaN+1.1050284i  0.14191619-0.6187660938i       NaN+      NaNi\n## [10,]        NaN-      Infi         NaN-         Infi      -Inf+      NaNi\n## [11,]        NaN+      Infi         NaN+         Infi      -Inf+      NaNi\n## [12,]  0.4402481-0.9982119i                        NA                   NA\n## [13,]       -Inf+1.1131423i        -Inf-0.0991983738i       Inf+      NaNi\n## [14,]        NaN+      NaNi  0.69735908-1.6740279225i       NaN+      NaNi\n## [15,]       -Inf-1.2804103i         NaN+         NaNi       NaN+      NaNi\n## [16,] -0.8449599-0.8452996i         NaN+0.0005269685i       NaN+      NaNi\n## [17,]                    NA                        NA       NaN+      NaNi\n## [18,] -0.6196595+0.4486545i -0.05489978+0.8830428914i -0.362162-0.5718169i\n##                        out\n##  [1,]                   NA\n##  [2,]       Inf-      Infi\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,]                   NA\n##  [8,]                   NA\n##  [9,]                   NA\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]       Inf+      NaNi\n## [14,]                   NA\n## [15,]                   NA\n## [16,]                   NA\n## [17,]                   NA\n## [18,] -0.362162-0.5718169i\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}