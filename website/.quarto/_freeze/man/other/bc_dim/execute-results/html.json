{
  "hash": "a9917773cefa35bc485ffff926c80563",
  "result": {
    "markdown": "---\ntitle: bc_dim\n---\n\n## Predict Broadcasted dimensions {.unnumbered}\n\n\n### Description\n\n<code>bc_dim(x, y)</code> gives the dimensions an array would have,\nas the result of an broadcasted binary element-wise operation between 2 arrays\n<code>x</code> and <code>y</code>.\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc_dim(x, y)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nan atomic or recursive array.\n</td></tr>\n</table>\n\n\n### Value\n\nReturns the recycled array.\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(10:8)\nx.len <- prod(x.dim)\nx.data <- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(10,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}