{
  "hash": "89186864f6a24f19fbf5f65c13442819",
  "result": {
    "markdown": "---\ntitle: bc.str\n---\n\n## Broadcasted String Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.str()</code> function\nperforms broadcasted string operations on pairs of arrays. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.str(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>character</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported concatenation operators: +. <br />\nSupported relational operators: ==, !=. <br />\nSupported distance operators: levenshtein. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor concatenation operation: <br />\nA character array as a result of the broadcasted concatenation operation. <br />\n<br />\nFor relational operation: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\nFor distance operation: <br />\nAn integer array as a result of the broadcasted distance measurement. <br />\n<br />\n\n\n\n### References\n\nThe 'C++' code for the Levenshtein edit string distance is based on the code found in\n<a href=\"https://rosettacode.org/wiki/Levenshtein_distance#C++\">https://rosettacode.org/wiki/Levenshtein_distance#C++</a>\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx <- array(letters, c(10, 2, 1))\ny <- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2]\n##  [1,] \"aa\" \"ka\"\n##  [2,] \"bb\" \"lb\"\n##  [3,] \"cc\" \"mc\"\n##  [4,] \"dd\" \"nd\"\n##  [5,] \"ee\" \"oe\"\n##  [6,] \"ff\" \"pf\"\n##  [7,] \"gg\" \"qg\"\n##  [8,] \"hh\" \"rh\"\n##  [9,] \"ii\" \"si\"\n## [10,] \"jj\" \"tj\"\n\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.str(array(letters), array(letters), \"!=\")\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE\n\n\n# string distance (Levenshtein):\nx <- array(month.name, c(12, 1))\ny <- array(month.abb, c(1, 12))\nout <- bc.str(x, y, \"levenshtein\")\ndimnames(out) <- list(month.name, month.abb)\nprint(out)\n##           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## January     4   7   5   6   5   5   5   6   7   7   7   7\n## February    7   5   6   7   6   7   7   7   7   8   8   7\n## March       4   5   2   4   3   5   5   5   5   4   5   4\n## April       5   5   4   2   5   5   4   4   5   5   5   5\n## May         2   3   1   3   0   3   3   3   3   3   3   3\n## June        2   4   4   4   4   1   2   3   4   4   4   4\n## July        3   4   4   4   3   2   1   3   4   4   4   4\n## August      6   6   6   5   6   5   5   3   6   5   6   6\n## September   9   7   8   7   9   9   9   9   6   8   9   8\n## October     7   6   6   6   7   7   7   7   6   4   6   6\n## November    8   6   7   7   8   8   8   8   7   8   5   7\n## December    8   6   7   7   8   8   8   8   7   7   8   5\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}