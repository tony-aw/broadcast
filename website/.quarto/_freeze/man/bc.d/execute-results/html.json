{
  "hash": "9c5be5adb6e5bbfa409233bb57ae063a",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 919.1 547.1 202.1\n## [2,] 978.1 599.1 585.1\n## [3,] 828.1 510.1 982.1\n## [4,]  31.1 564.1  84.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 471.1 546.1 557.1\n## [2,] 877.1 842.1 388.1\n## [3,] 141.1 886.1 978.1\n## [4,] 965.1 968.1  85.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 917.1 545.1 200.1\n## [2,] 974.1 595.1 581.1\n## [3,] 822.1 504.1 976.1\n## [4,]  23.1 556.1  76.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 469.1 544.1 555.1\n## [2,] 873.1 838.1 384.1\n## [3,] 135.1 880.1 972.1\n## [4,] 957.1 960.1  77.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  918.1  546.1  201.1\n## [2,] 1952.2 1194.2 1166.2\n## [3,] 2475.3 1521.3 2937.3\n## [4,]  108.4 2240.4  320.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  470.1  545.1  556.1\n## [2,] 1750.2 1680.2  772.2\n## [3,]  414.3 2649.3 2925.3\n## [4,] 3844.4 3856.4  324.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]     [,2]     [,3]\n## [1,] 918.1000 546.1000 201.1000\n## [2,] 488.0500 298.5500 291.5500\n## [3,] 275.0333 169.0333 326.3667\n## [4,]   6.7750 140.0250  20.0250\n## \n## , , 2\n## \n##           [,1]     [,2]     [,3]\n## [1,] 470.10000 545.1000 556.1000\n## [2,] 437.55000 420.0500 193.0500\n## [3,]  46.03333 294.3667 325.0333\n## [4,] 240.27500 241.0250  20.2750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##             [,1]         [,2]        [,3]\n## [1,]       918.1 5.461000e+02       201.1\n## [2,]    952771.2 3.565284e+05    340005.6\n## [3,] 561719837.3 1.304010e+08 938601300.7\n## [4,]    539358.0 9.841523e+10  41165184.3\n## \n## , , 2\n## \n##              [,1]         [,2]        [,3]\n## [1,] 4.701000e+02 5.451000e+02       556.1\n## [2,] 7.658000e+05 7.057680e+05    149073.2\n## [3,] 2.633789e+06 6.886993e+08 927144591.8\n## [4,] 8.532461e+11 8.639494e+11  43259691.4\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}