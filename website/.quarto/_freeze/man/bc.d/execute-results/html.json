{
  "hash": "0834e90b66e7d17f683965fe501c9c2b",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, tol = sqrt(.Machine$double.eps))\n\nbc.num(x, y, op, tol = sqrt(.Machine$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"tol\">tol</code></td>\n<td>\na single number between 0 and 0.1, giving the machine tolerance to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  66.1 417.1 186.1\n## [2,] 852.1 419.1 797.1\n## [3,]  43.1 186.1 996.1\n## [4,] 492.1 204.1 627.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 458.1 342.1 301.1\n## [2,] 773.1  95.1 504.1\n## [3,] 803.1 647.1 537.1\n## [4,]  22.1  96.1 454.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  64.1 415.1 184.1\n## [2,] 848.1 415.1 793.1\n## [3,]  37.1 180.1 990.1\n## [4,] 484.1 196.1 619.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 456.1 340.1 299.1\n## [2,] 769.1  91.1 500.1\n## [3,] 797.1 641.1 531.1\n## [4,]  14.1  88.1 446.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]  [,2]   [,3]\n## [1,]   65.1 416.1  185.1\n## [2,] 1700.2 834.2 1590.2\n## [3,]  120.3 549.3 2979.3\n## [4,] 1952.4 800.4 2492.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  457.1  341.1  300.1\n## [2,] 1542.2  186.2 1004.2\n## [3,] 2400.3 1932.3 1602.3\n## [4,]   72.4  368.4 1800.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##           [,1]      [,2]     [,3]\n## [1,]  65.10000 416.10000 185.1000\n## [2,] 425.05000 208.55000 397.5500\n## [3,]  13.36667  61.03333 331.0333\n## [4,] 122.02500  50.02500 155.7750\n## \n## , , 2\n## \n##         [,1]    [,2]     [,3]\n## [1,] 457.100 341.100 300.1000\n## [2,] 385.550  46.550 251.0500\n## [3,] 266.700 214.700 178.0333\n## [4,]   4.525  23.025 112.5250\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 6.510000e+01        416.1 1.851000e+02\n## [2,] 7.226700e+05     173972.4 6.321840e+05\n## [3,] 6.448120e+04    6138539.2 9.794425e+08\n## [4,] 5.675906e+10 1603202400.8 1.507409e+11\n## \n## , , 2\n## \n##             [,1]         [,2]         [,3]\n## [1,]       457.1       341.10 3.001000e+02\n## [2,]    594595.2      8667.61 2.521044e+05\n## [3,] 512192024.0 267214424.12 1.523589e+08\n## [4,]    107328.3  71951279.41 4.104271e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}