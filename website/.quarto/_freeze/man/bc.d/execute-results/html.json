{
  "hash": "39afb242919547fbd064b79344d70c0e",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 188.1 883.1 590.1\n## [2,] 796.1 351.1 757.1\n## [3,] 538.1 134.1 430.1\n## [4,] 208.1 269.1 889.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 242.1 315.1 133.1\n## [2,] 854.1 247.1  16.1\n## [3,] 496.1   4.1 748.1\n## [4,] 451.1 174.1 553.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 186.1 881.1 588.1\n## [2,] 792.1 347.1 753.1\n## [3,] 532.1 128.1 424.1\n## [4,] 200.1 261.1 881.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 240.1 313.1 131.1\n## [2,] 850.1 243.1  12.1\n## [3,] 490.1  -1.9 742.1\n## [4,] 443.1 166.1 545.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  187.1  882.1  589.1\n## [2,] 1588.2  698.2 1510.2\n## [3,] 1605.3  393.3 1281.3\n## [4,]  816.4 1060.4 3540.4\n## \n## , , 2\n## \n##        [,1]  [,2]   [,3]\n## [1,]  241.1 314.1  132.1\n## [2,] 1704.2 490.2   28.2\n## [3,] 1479.3   3.3 2235.3\n## [4,] 1788.4 680.4 2196.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]    [,2]     [,3]\n## [1,] 187.1000 882.100 589.1000\n## [2,] 397.0500 174.550 377.5500\n## [3,] 178.3667  43.700 142.3667\n## [4,]  51.0250  66.275 221.2750\n## \n## , , 2\n## \n##          [,1]        [,2]     [,3]\n## [1,] 241.1000 314.1000000 132.1000\n## [2,] 426.0500 122.5500000   7.0500\n## [3,] 164.3667   0.3666667 248.3667\n## [4,] 111.7750  42.5250000 137.2750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,]        187.1        882.1 5.891000e+02\n## [2,]     630594.8     121870.8 5.701760e+05\n## [3,]  153216258.6    2253243.2 7.790919e+07\n## [4,] 1735289819.4 4938998689.6 6.137187e+11\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,] 2.411000e+02 3.141000e+02 1.321000e+02\n## [2,] 7.260744e+05 6.007401e+04 1.988100e+02\n## [3,] 1.198961e+08 1.331000e+00 4.136602e+08\n## [4,] 3.995937e+10 8.371769e+08 9.090877e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE  TRUE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,] TRUE  TRUE TRUE\n## [2,] TRUE  TRUE TRUE\n## [3,] TRUE FALSE TRUE\n## [4,] TRUE  TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE  TRUE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1]  [,2] [,3]\n## [1,] TRUE  TRUE TRUE\n## [2,] TRUE  TRUE TRUE\n## [3,] TRUE FALSE TRUE\n## [4,] TRUE  TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}