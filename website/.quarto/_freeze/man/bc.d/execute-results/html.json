{
  "hash": "39afb242919547fbd064b79344d70c0e",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 632.1 653.1 462.1\n## [2,] 733.1 627.1 349.1\n## [3,] 437.1 373.1 280.1\n## [4,] 477.1 811.1 426.1\n## \n## , , 2\n## \n##       [,1]  [,2]   [,3]\n## [1,]  11.1 208.1  111.1\n## [2,] 944.1 188.1  560.1\n## [3,] 465.1 703.1 1003.1\n## [4,]  77.1 659.1  347.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 630.1 651.1 460.1\n## [2,] 729.1 623.1 345.1\n## [3,] 431.1 367.1 274.1\n## [4,] 469.1 803.1 418.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]   9.1 206.1 109.1\n## [2,] 940.1 184.1 556.1\n## [3,] 459.1 697.1 997.1\n## [4,]  69.1 651.1 339.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  631.1  652.1  461.1\n## [2,] 1462.2 1250.2  694.2\n## [3,] 1302.3 1110.3  831.3\n## [4,] 1892.4 3228.4 1688.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]   10.1  207.1  110.1\n## [2,] 1884.2  372.2 1116.2\n## [3,] 1386.3 2100.3 3000.3\n## [4,]  292.4 2620.4 1372.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##         [,1]     [,2]      [,3]\n## [1,] 631.100 652.1000 461.10000\n## [2,] 365.550 312.5500 173.55000\n## [3,] 144.700 123.3667  92.36667\n## [4,] 118.275 201.7750 105.52500\n## \n## , , 2\n## \n##          [,1]     [,2]     [,3]\n## [1,]  10.1000 207.1000 110.1000\n## [2,] 471.0500  93.0500 279.0500\n## [3,] 154.0333 233.3667 333.3667\n## [4,]  18.2750 163.7750  85.7750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 6.311000e+02 6.521000e+02 4.611000e+02\n## [2,] 5.345072e+05 3.907500e+05 1.204784e+05\n## [3,] 8.180302e+07 5.069408e+07 2.127696e+07\n## [4,] 5.009701e+10 4.243355e+11 3.174398e+10\n## \n## , , 2\n## \n##            [,1]         [,2]         [,3]\n## [1,]       10.1 2.071000e+02 1.101000e+02\n## [2,]   887552.4 3.463321e+04 3.114756e+05\n## [3,] 98675175.1 3.431470e+08 1.000300e+09\n## [4,] 28554167.8 1.841749e+11 1.385744e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}