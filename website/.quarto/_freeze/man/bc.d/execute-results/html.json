{
  "hash": "39afb242919547fbd064b79344d70c0e",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]\n## [1,]  373.1 919.1 895.1\n## [2,] 1002.1 980.1 756.1\n## [3,]  446.1 229.1 998.1\n## [4,]  696.1 789.1 839.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 842.1 582.1 818.1\n## [2,] 434.1 361.1 952.1\n## [3,] 973.1 401.1 178.1\n## [4,] 595.1 618.1 590.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 371.1 917.1 893.1\n## [2,] 998.1 976.1 752.1\n## [3,] 440.1 223.1 992.1\n## [4,] 688.1 781.1 831.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 840.1 580.1 816.1\n## [2,] 430.1 357.1 948.1\n## [3,] 967.1 395.1 172.1\n## [4,] 587.1 610.1 582.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  372.1  918.1  894.1\n## [2,] 2000.2 1956.2 1508.2\n## [3,] 1329.3  678.3 2985.3\n## [4,] 2768.4 3140.4 3340.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  841.1  581.1  817.1\n## [2,]  864.2  718.2 1900.2\n## [3,] 2910.3 1194.3  525.3\n## [4,] 2364.4 2456.4 2344.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##         [,1]      [,2]    [,3]\n## [1,] 372.100 918.10000 894.100\n## [2,] 500.050 489.05000 377.050\n## [3,] 147.700  75.36667 331.700\n## [4,] 173.025 196.27500 208.775\n## \n## , , 2\n## \n##          [,1]    [,2]      [,3]\n## [1,] 841.1000 581.100 817.10000\n## [2,] 216.0500 179.550 475.05000\n## [3,] 323.3667 132.700  58.36667\n## [4,] 147.7750 153.525 146.52500\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 3.721000e+02 9.181000e+02 8.941000e+02\n## [2,] 1.000200e+06 9.566796e+05 5.686668e+05\n## [3,] 8.699719e+07 1.155851e+07 9.853719e+08\n## [4,] 2.294433e+11 3.799268e+11 4.863556e+11\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,] 8.411000e+02 5.811000e+02 8.171000e+02\n## [2,] 1.867104e+05 1.289528e+05 9.026900e+05\n## [3,] 9.129553e+08 6.309233e+07 5.368568e+06\n## [4,] 1.220798e+11 1.422186e+11 1.180013e+11\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}