{
  "hash": "39afb242919547fbd064b79344d70c0e",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 182.1 202.1 143.1\n## [2,] 817.1 446.1 827.1\n## [3,] 183.1 105.1  81.1\n## [4,] 190.1 367.1 937.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 278.1 916.1 381.1\n## [2,] 470.1 870.1 358.1\n## [3,] 912.1 729.1 492.1\n## [4,] 818.1 402.1 519.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 180.1 200.1 141.1\n## [2,] 813.1 442.1 823.1\n## [3,] 177.1  99.1  75.1\n## [4,] 182.1 359.1 929.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 276.1 914.1 379.1\n## [2,] 466.1 866.1 354.1\n## [3,] 906.1 723.1 486.1\n## [4,] 810.1 394.1 511.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  181.1  201.1  142.1\n## [2,] 1630.2  888.2 1650.2\n## [3,]  540.3  306.3  234.3\n## [4,]  744.4 1452.4 3732.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  277.1  915.1  380.1\n## [2,]  936.2 1736.2  712.2\n## [3,] 2727.3 2178.3 1467.3\n## [4,] 3256.4 1592.4 2060.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##           [,1]      [,2]      [,3]\n## [1,] 181.10000 201.10000 142.10000\n## [2,] 407.55000 222.05000 412.55000\n## [3,]  60.03333  34.03333  26.03333\n## [4,]  46.52500  90.77500 233.27500\n## \n## , , 2\n## \n##          [,1]     [,2]     [,3]\n## [1,] 277.1000 915.1000 380.1000\n## [2,] 234.0500 434.0500 178.0500\n## [3,] 303.0333 242.0333 163.0333\n## [4,] 203.5250  99.5250 128.7750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,]        181.1 2.011000e+02 1.421000e+02\n## [2,]     664388.0 1.972248e+05 6.807900e+05\n## [3,]    5841725.4 1.064332e+06 4.763795e+05\n## [4,] 1199459234.9 1.738221e+10 7.580760e+11\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,] 2.771000e+02 9.151000e+02 3.801000e+02\n## [2,] 2.191176e+05 7.535976e+05 1.268072e+05\n## [3,] 7.513373e+08 3.828153e+08 1.170019e+08\n## [4,] 4.392492e+11 2.511705e+10 7.039895e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}