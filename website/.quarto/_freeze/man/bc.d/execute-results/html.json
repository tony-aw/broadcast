{
  "hash": "9c5be5adb6e5bbfa409233bb57ae063a",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 558.1 368.1 979.1\n## [2,] 558.1 189.1 252.1\n## [3,] 186.1   6.1 406.1\n## [4,] 409.1 658.1 781.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 149.1 637.1 647.1\n## [2,] 776.1 505.1 597.1\n## [3,] 263.1 677.1 541.1\n## [4,] 531.1 516.1 223.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 556.1 366.1 977.1\n## [2,] 554.1 185.1 248.1\n## [3,] 180.1   0.1 400.1\n## [4,] 401.1 650.1 773.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 147.1 635.1 645.1\n## [2,] 772.1 501.1 593.1\n## [3,] 257.1 671.1 535.1\n## [4,] 523.1 508.1 215.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  557.1  367.1  978.1\n## [2,] 1112.2  374.2  500.2\n## [3,]  549.3    9.3 1209.3\n## [4,] 1620.4 2616.4 3108.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  148.1  636.1  646.1\n## [2,] 1548.2 1006.2 1190.2\n## [3,]  780.3 2022.3 1614.3\n## [4,] 2108.4 2048.4  876.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##           [,1]       [,2]     [,3]\n## [1,] 557.10000 367.100000 978.1000\n## [2,] 278.05000  93.550000 125.0500\n## [3,]  61.03333   1.033333 134.3667\n## [4,] 101.27500 163.525000 194.2750\n## \n## , , 2\n## \n##         [,1]    [,2]     [,3]\n## [1,] 148.100 636.100 646.1000\n## [2,] 387.050 251.550 297.5500\n## [3,]  86.700 224.700 179.3667\n## [4,] 131.775 128.025  54.7750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 5.571000e+02 3.671000e+02 9.781000e+02\n## [2,] 3.092472e+05 3.500641e+04 6.255001e+04\n## [3,] 6.138539e+06 2.979100e+01 6.549956e+07\n## [4,] 2.693078e+10 1.830529e+11 3.646764e+11\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,] 1.481000e+02 6.361000e+02        646.1\n## [2,] 5.992308e+05 2.531096e+05     354144.0\n## [3,] 1.759629e+07 3.063183e+08  155807721.3\n## [4,] 7.719196e+10 6.877318e+10 2304461783.1\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}