{
  "hash": "982b9e6b953a6d202ac59f8b9d39edb2",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, tol = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, tol = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"tol\">tol</code></td>\n<td>\na single number between 0 and 0.1, giving the machine tolerance to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 624.1 259.1 801.1\n## [2,] 140.1 121.1 550.1\n## [3,] 762.1  73.1 803.1\n## [4,] 162.1 832.1 814.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 725.1 946.1  21.1\n## [2,] 511.1 818.1 477.1\n## [3,] 135.1  65.1 884.1\n## [4,] 613.1 174.1 453.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 622.1 257.1 799.1\n## [2,] 136.1 117.1 546.1\n## [3,] 756.1  67.1 797.1\n## [4,] 154.1 824.1 806.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 723.1 944.1  19.1\n## [2,] 507.1 814.1 473.1\n## [3,] 129.1  59.1 878.1\n## [4,] 605.1 166.1 445.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  623.1  258.1  800.1\n## [2,]  276.2  238.2 1096.2\n## [3,] 2277.3  210.3 2400.3\n## [4,]  632.4 3312.4 3240.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  724.1  945.1   20.1\n## [2,] 1018.2 1632.2  950.2\n## [3,]  396.3  186.3 2643.3\n## [4,] 2436.4  680.4 1796.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]      [,2]    [,3]\n## [1,] 623.1000 258.10000 800.100\n## [2,]  69.0500  59.55000 274.050\n## [3,] 253.0333  23.36667 266.700\n## [4,]  39.5250 207.02500 202.525\n## \n## , , 2\n## \n##           [,1]    [,2]    [,3]\n## [1,] 724.10000 945.100  20.100\n## [2,] 254.55000 408.050 237.550\n## [3,]  44.03333  20.700 293.700\n## [4,] 152.27500  42.525 112.275\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,]       623.10 2.581000e+02 8.001000e+02\n## [2,]     19071.61 1.418481e+04 3.004136e+05\n## [3,] 437418326.07 3.444721e+05 5.121920e+08\n## [4,] 624780519.27 4.702525e+11 4.306798e+11\n## \n## , , 2\n## \n##              [,1]        [,2]         [,3]\n## [1,] 7.241000e+02       945.1 2.010000e+01\n## [2,] 2.591828e+05    666019.2 2.257200e+05\n## [3,] 2.305199e+06    239483.1 6.840307e+08\n## [4,] 1.376431e+11 837176934.7 4.067918e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}