{
  "hash": "0834e90b66e7d17f683965fe501c9c2b",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, tol = sqrt(.Machine$double.eps))\n\nbc.num(x, y, op, tol = sqrt(.Machine$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"tol\">tol</code></td>\n<td>\na single number between 0 and 0.1, giving the machine tolerance to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\n%d==%, %d!=%, %d&lt;%, %d&gt;%, %d&lt;=%, %d&gt;=% operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 120.1  21.1 385.1\n## [2,] 107.1 265.1 133.1\n## [3,]  79.1  77.1 831.1\n## [4,] 348.1 440.1 784.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 681.1 978.1 960.1\n## [2,] 714.1  24.1 124.1\n## [3,] 400.1 520.1 621.1\n## [4,] 467.1 996.1 547.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 118.1  19.1 383.1\n## [2,] 103.1 261.1 129.1\n## [3,]  73.1  71.1 825.1\n## [4,] 340.1 432.1 776.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 679.1 976.1 958.1\n## [2,] 710.1  20.1 120.1\n## [3,] 394.1 514.1 615.1\n## [4,] 459.1 988.1 539.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  119.1   20.1  384.1\n## [2,]  210.2  526.2  262.2\n## [3,]  228.3  222.3 2484.3\n## [4,] 1376.4 1744.4 3120.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  680.1  977.1  959.1\n## [2,] 1424.2   44.2  244.2\n## [3,] 1191.3 1551.3 1854.3\n## [4,] 1852.4 3968.4 2172.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##           [,1]    [,2]     [,3]\n## [1,] 119.10000  20.100 384.1000\n## [2,]  52.55000 131.550  65.5500\n## [3,]  25.36667  24.700 276.0333\n## [4,]  86.02500 109.025 195.0250\n## \n## , , 2\n## \n##          [,1]     [,2]     [,3]\n## [1,] 680.1000 977.1000 959.1000\n## [2,] 356.0500  11.0500  61.0500\n## [3,] 132.3667 172.3667 206.0333\n## [4,] 115.7750 248.0250 135.7750\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 1.191000e+02 2.010000e+01 3.841000e+02\n## [2,] 1.104601e+04 6.922161e+04 1.718721e+04\n## [3,] 4.407111e+05 4.068690e+05 5.678693e+08\n## [4,] 1.401970e+10 3.616965e+10 3.703404e+11\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,] 6.801000e+02 9.771000e+02 9.591000e+02\n## [2,] 5.070864e+05 4.884100e+02 1.490841e+04\n## [3,] 6.261807e+07 1.382686e+08 2.361436e+08\n## [4,] 4.599378e+10 9.687725e+11 8.699999e+10\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}