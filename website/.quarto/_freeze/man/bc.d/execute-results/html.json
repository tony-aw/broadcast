{
  "hash": "9c5be5adb6e5bbfa409233bb57ae063a",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 985.1 789.1 392.1\n## [2,] 760.1 739.1 308.1\n## [3,] 233.1 550.1 356.1\n## [4,] 674.1 202.1  28.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 565.1 911.1 559.1\n## [2,] 721.1 791.1 351.1\n## [3,] 467.1 547.1 435.1\n## [4,] 278.1 735.1 652.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 983.1 787.1 390.1\n## [2,] 756.1 735.1 304.1\n## [3,] 227.1 544.1 350.1\n## [4,] 666.1 194.1  20.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 563.1 909.1 557.1\n## [2,] 717.1 787.1 347.1\n## [3,] 461.1 541.1 429.1\n## [4,] 270.1 727.1 644.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  984.1  788.1  391.1\n## [2,] 1516.2 1474.2  612.2\n## [3,]  690.3 1641.3 1059.3\n## [4,] 2680.4  792.4   96.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  564.1  910.1  558.1\n## [2,] 1438.2 1578.2  698.2\n## [3,] 1392.3 1632.3 1296.3\n## [4,] 1096.4 2924.4 2592.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##         [,1]     [,2]    [,3]\n## [1,] 984.100 788.1000 391.100\n## [2,] 379.050 368.5500 153.050\n## [3,]  76.700 182.3667 117.700\n## [4,] 167.525  49.5250   6.025\n## \n## , , 2\n## \n##         [,1]     [,2]     [,3]\n## [1,] 564.100 910.1000 558.1000\n## [2,] 359.550 394.5500 174.5500\n## [3,] 154.700 181.3667 144.0333\n## [4,]  68.525 182.7750 162.0250\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]        [,3]\n## [1,] 9.841000e+02        788.1      391.10\n## [2,] 5.747156e+05     543316.4    93697.21\n## [3,] 1.218288e+07  163757102.1 44024370.29\n## [4,] 2.016315e+11 1540060925.8   337340.26\n## \n## , , 2\n## \n##              [,1]         [,2]         [,3]\n## [1,]        564.1 9.101000e+02 5.581000e+02\n## [2,]     517104.8 6.226788e+05 1.218708e+05\n## [3,]   99961946.7 1.610780e+08 8.067757e+07\n## [4,] 5644638611.3 2.856980e+11 1.764282e+11\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}