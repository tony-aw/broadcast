{
  "hash": "5ff990758f63bcd1d97406133e75d170",
  "result": {
    "markdown": "---\ntitle: bind_array\n---\n\n## Dimensional Binding of Arrays with Broadcasting {.unnumbered}\n\n\n### Description\n\n<code>bind_array()</code> binds (atomic/recursive) arrays and (atomic/recursive) matrices. <br />\nReturns an array. <br />\nAllows for broadcasting.\n\n\n\n### Usage\n\n<pre><code class='language-R'>bind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"input\">input</code></td>\n<td>\na list of arrays; both atomic and recursive arrays are supported, and can be mixed. <br />\nIf <code>input</code> is named,\nits names will be used for the names of dimension <code>along</code> of the output, when necessary. <br />\nIf argument <code>input</code> has length <code>0</code>,\nor it contains exclusively objects where one or more dimensions are <code>0</code>,\nan error is returned. <br />\nIf <code>input</code> has length <code>1</code>, this function simply return <code>input[[1L]]</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"along\">along</code></td>\n<td>\na single integer,\nindicating the dimension along which to bind the dimensions. <br />\nI.e. use <code>along = 1</code> for row-binding, <code>along = 2</code> for column-binding, etc. <br />\nSpecifying <code>along = 0</code> will bind the arrays on a new dimension before the first,\nmaking <code>along</code> the new first dimension. <br />\nSpecifying <code>along = N + 1</code>, with <code style=\"white-space: pre;\">N = max(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>,\nwill create an additional dimension (<code>N + 1</code>) and bind the arrays along that new dimension.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"rev\">rev</code></td>\n<td>\nBoolean, indicating if <code>along</code> should be reversed, counting backwards. <br />\nIf <code>FALSE</code> (default), <code>along</code> works like normally; if <code>TRUE</code>, <code>along</code> is reversed. <br />\nI.e. <code style=\"white-space: pre;\">along = 0, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = N+1, rev = FALSE</code>; <br />\nand <code style=\"white-space: pre;\">along = N+1, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = 0, rev = FALSE</code>; <br />\nwith <code style=\"white-space: pre;\">N = max(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"ndim2bc\">ndim2bc</code></td>\n<td>\na single non-negative integer; <br />\nspecify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays. <br />\nIf <code>ndim2bc = 0L</code>, <b>no</b> broadcasting will be allowed at all.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_along\">name_along</code></td>\n<td>\nBoolean, ndicating if dimension <code>along</code> should be named. <br />\nThe examples section illustrates the naming behaviour.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"comnames_from\">comnames_from</code></td>\n<td>\neither integer scalar or <code>NULL</code>. <br />\nIndicates which object in <code>input</code> should be used for naming the shared dimension. <br />\nIf <code>NULL</code>, no communal names will be given. <br />\nFor example: <br />\nWhen binding columns of matrices, the matrices will share the same rownames. <br />\nUsing <code>comnames_from = 10</code> will then result in <code>bind_array()</code> using\n<code>rownames(input[[10]])</code> for the rownames of the output. <br /> <br />\n</td></tr>\n</table>\n\n\n### Details\n\nThe API of <code>bind_array()</code> is inspired by the fantastic\n<code>abind::abind</code> function\nby Tony Plare &amp; Richard Heiberger (2016). <br />\nBut <code>bind_array()</code> differs considerably from <code>abind::abind</code>\nin the following ways:\n\n\n<ul>\n<li> <code>bind_array()</code> differs from <code>abind::abind</code>\nin that it can handle recursive arrays properly <br />\n(the <code>abind::abind</code> function would unlist everything to atomic arrays,\nruining the structure).\n\n</li>\n<li> <code>bind_array()</code> allows for broadcasting,\nwhile <code>abind::abind</code> does not support broadcasting.\n\n</li>\n<li> <code>bind_array()</code> is generally faster than <code>abind::abind</code>,\nas <code>bind_array()</code> relies heavily on 'C' and 'C++' code.\n\n</li>\n<li> unlike <code>abind::abind</code>,\n<code>bind_array()</code> only binds (atomic/recursive) arrays and matrices. <br />\n<code>bind_array()</code>does not attempt to convert things to arrays when they are not arrays,\nbut will give an error instead. <br />\nThis saves computation time and prevents unexpected results.\n\n</li>\n<li> <code>bind_array()</code> has more streamlined naming options,\ncompared to <code>abind::abind</code>. <br /> <br />\n\n</li></ul>\n\n\n\n### Value\n\nAn array.\n\n\n\n### References\n\nPlate T, Heiberger R (2016). <em>abind: Combine Multidimensional Arrays</em>. R package version 1.4-5, <a href=\"https://CRAN.R-project.org/package=abind\">https://CRAN.R-project.org/package=abind</a>.\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\n\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput <- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 2L, TRUE)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray <- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) <- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput <- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n# Illustrating `name_along`\n\nx <- array(1:20, c(5, 3), list(NULL, LETTERS[1:3]))\ny <- array(-1:-20, c(5, 3))\nz <- array(-1:-20, c(5, 3))\n\nbind_array(list(a = x, b = y, z), 2L)\n##      A  B  C b.1 b.2 b.3           \n## [1,] 1  6 11  -1  -6 -11 -1  -6 -11\n## [2,] 2  7 12  -2  -7 -12 -2  -7 -12\n## [3,] 3  8 13  -3  -8 -13 -3  -8 -13\n## [4,] 4  9 14  -4  -9 -14 -4  -9 -14\n## [5,] 5 10 15  -5 -10 -15 -5 -10 -15\nbind_array(list(x, y, z), 2L)\n##      A  B  C                      \n## [1,] 1  6 11 -1  -6 -11 -1  -6 -11\n## [2,] 2  7 12 -2  -7 -12 -2  -7 -12\n## [3,] 3  8 13 -3  -8 -13 -3  -8 -13\n## [4,] 4  9 14 -4  -9 -14 -4  -9 -14\n## [5,] 5 10 15 -5 -10 -15 -5 -10 -15\nbind_array(list(a = unname(x), b = y, c = z), 2L)\n##      a.1 a.2 a.3 b.1 b.2 b.3 c.1 c.2 c.3\n## [1,]   1   6  11  -1  -6 -11  -1  -6 -11\n## [2,]   2   7  12  -2  -7 -12  -2  -7 -12\n## [3,]   3   8  13  -3  -8 -13  -3  -8 -13\n## [4,]   4   9  14  -4  -9 -14  -4  -9 -14\n## [5,]   5  10  15  -5 -10 -15  -5 -10 -15\nbind_array(list(x, a = y, b = z), 2L)\n##      A  B  C a.1 a.2 a.3 b.1 b.2 b.3\n## [1,] 1  6 11  -1  -6 -11  -1  -6 -11\n## [2,] 2  7 12  -2  -7 -12  -2  -7 -12\n## [3,] 3  8 13  -3  -8 -13  -3  -8 -13\n## [4,] 4  9 14  -4  -9 -14  -4  -9 -14\n## [5,] 5 10 15  -5 -10 -15  -5 -10 -15\ninput <- list(x, y, z)\nnames(input) <- c(\"\", NA, \"\")\nbind_array(input, 2L)\n##      A  B  C                      \n## [1,] 1  6 11 -1  -6 -11 -1  -6 -11\n## [2,] 2  7 12 -2  -7 -12 -2  -7 -12\n## [3,] 3  8 13 -3  -8 -13 -3  -8 -13\n## [4,] 4  9 14 -4  -9 -14 -4  -9 -14\n## [5,] 5 10 15 -5 -10 -15 -5 -10 -15\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}