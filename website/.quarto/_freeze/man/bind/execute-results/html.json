{
  "hash": "7d1066aeb7180c512c6d3199101925b2",
  "result": {
    "markdown": "---\ntitle: bind\n---\n\n## Dimensional Binding of Objects {.unnumbered}\n\n\n### Description\n\nThe <code>bind_</code>implementations provide dimensional binding functionalities. <br />\n<br />\nThe following implementations are available:\n\n\n<ul>\n<li> <code>bind_mat()</code> binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise. <br />\nAllows for recycling.\n\n</li>\n<li> <code>bind_array()</code> binds (atomic/recursive) arrays and (atomic/recursive) matrices. <br />\nAllows for broadcasting.\n\n</li>\n<li> <code>bind_dt()</code> binds data.tables and other data.frame-like objects. <br />\nThis function is only available if the 'data.table' package is installed. <br />\nReturns a <code>data.table</code>. <br />\nFaster than <code>do.call(cbind, ...)</code> or <code>do.call(rbind, ...)</code> for regular <code>data.frame</code> objects. <br />\n\n</li></ul>\n\nNote that the naming convention of the binding implementations here is\n&quot;bind_&quot; followed by the <b>resulting class</b> (abbreviated). <br />\nI.e. <code>bind_mat</code> <b>returns</b> a matrix, but can bind both matrices and vectors. <br />\nAnd <code>bind_array</code> <b>returns</b> an array, but can bind both arrays and matrices. <br />\nAnd <code>bind_dt</code> <b>returns</b> a data.table, but can bind not only data.tables,\nbut also most other data.frame-like objects. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"input\">input</code></td>\n<td>\na list of only the appropriate objects. <br />\nIf <code>input</code> is named,\nits names will be used for the names of dimension <code>along</code> of the output,\nas far as possible.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"along\">along</code></td>\n<td>\na single integer,\nindicating the dimension along which to bind the dimensions. <br />\nI.e. use <code>along = 1</code> for row-binding, <code>along = 2</code> for column-binding, etc. <br />\nFor arrays, additional flexibility is available:\n\n\n<ul>\n<li> Specifying <code>along = 0</code> will bind the arrays on a new dimension before the first,\nmaking <code>along</code> the new first dimension.\n\n</li>\n<li> Specifying <code>along = N + 1</code>, with <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>,\nwill create an additional dimension (<code>N + 1</code>) and bind the arrays along that new dimension.\n\n</li></ul>\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_deparse\">name_deparse</code></td>\n<td>\nBoolean, for <code>bind_mat()</code>. <br />\nIndicates if dimension <code>along</code> should be named. <br />\nUses the naming method from rbind/cbind itself.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"comnames_from\">comnames_from</code></td>\n<td>\neither integer scalar or <code>NULL</code>,\nfor <code>bind_mat()</code> and  <code>bind_array()</code>. <br />\nIndicates which object in <code>input</code> should be used for naming the shared dimension. <br />\nIf <code>NULL</code>, no communal names will be given. <br />\nFor example: <br />\nWhen binding columns of matrices, the matrices will share the same rownames. <br />\nUsing <code>comnames_from = 10</code> will then result in <code>bind_array()</code> using\n<code>rownames(input[[10]])</code> for the rownames of the output.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"rev\">rev</code></td>\n<td>\nBoolean, for <code>bind_array()</code> only. <br />\nIndicates if <code>along</code> should be reversed, counting backwards. <br />\nIf <code>FALSE</code> (default), <code>along</code> works like normally; if <code>TRUE</code>, <code>along</code> is reversed. <br />\nI.e. <code style=\"white-space: pre;\">along = 0, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = N+1, rev = FALSE</code>; <br />\nand <code style=\"white-space: pre;\">along = N+1, rev = TRUE</code> is equivalent to <code style=\"white-space: pre;\">along = 0, rev = FALSE</code>; <br />\nwith <code style=\"white-space: pre;\">N = </code>max<code>(</code>[lst.ndim](properties.qmd)<code style=\"white-space: pre;\">(input))</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"ndim2bc\">ndim2bc</code></td>\n<td>\nnon-negative integer, for <code>bind_array</code> only. <br />\nSpecify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays. <br />\nIf <code>ndim2bc = 0L</code>, <b>no</b> broadcasting will be allowed at all.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"name_along\">name_along</code></td>\n<td>\nBoolean, for <code>bind_array()</code>. <br />\nIndicates if dimension <code>along</code> should be named.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"...\">...</code></td>\n<td>\narguments to be passed to rbindlist. <br /> <br />\n</td></tr>\n</table>\n\n\n### Details\n\nFor in-depth information about the binding implentations in the 'broadcast' package,\nplease refer to broadcast_bind. <br />\n<br />\n\n\n\n### Value\n\nThe bound object.\n\n\n\n### References\n\nPlate T, Heiberger R (2016). <em>abind: Combine Multidimensional Arrays</em>. R package version 1.4-5, <a href=\"https://CRAN.R-project.org/package=abind\">https://CRAN.R-project.org/package=abind</a>.\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput <- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 2L, TRUE)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray <- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) <- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput <- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx <- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx <- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) <- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny <- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\nif(require(data.table)) {\n  x <- data.frame(a = 1:12, b = month.abb) # data.frame\n  y <- data.table::data.table(a = 1:12, b = month.abb) # data.table\n  \n  bind_dt(list(x = x, y = y), 2L) # column bind\n  \n  bind_dt(list(x = x, y = y), 1L) # row bind\n  \n}\n##         a      b\n##     <int> <char>\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b\n```\n:::\n",
    "supporting": [
      "bind_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}