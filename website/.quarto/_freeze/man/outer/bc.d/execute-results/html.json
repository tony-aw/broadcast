{
  "hash": "9c5be5adb6e5bbfa409233bb57ae063a",
  "result": {
    "markdown": "---\ntitle: bc.d\n---\n\n## Broadcasted Decimal Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.d()</code> function\nperforms broadcasted decimal numeric operations on 2 numeric or logical arrays. <br />\n<code>bc.num()</code> is an alias for <code>bc.d()</code>. <br /> <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. <br />\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"prec\">prec</code></td>\n<td>\na single number between 0 and 0.1, giving the machine precision to use. <br />\nOnly relevant for the following operators: <br />\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= <br />\nSee the\nd==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators\nfrom the 'tinycodet' package for details. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array as a result of the broadcasted decimal arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted decimal relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 476.1  50.1  23.1\n## [2,] 642.1 558.1 955.1\n## [3,] 894.1 518.1 183.1\n## [4,] 184.1 960.1 662.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 484.1 112.1 407.1\n## [2,] 660.1 179.1 420.1\n## [3,]  49.1  51.1 454.1\n## [4,] 316.1 959.1  74.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 474.1  48.1  21.1\n## [2,] 638.1 554.1 951.1\n## [3,] 888.1 512.1 177.1\n## [4,] 176.1 952.1 654.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 482.1 110.1 405.1\n## [2,] 656.1 175.1 416.1\n## [3,]  43.1  45.1 448.1\n## [4,] 308.1 951.1  66.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  475.1   49.1   22.1\n## [2,] 1280.2 1112.2 1906.2\n## [3,] 2673.3 1545.3  540.3\n## [4,]  720.4 3824.4 2632.4\n## \n## , , 2\n## \n##        [,1]   [,2]   [,3]\n## [1,]  483.1  111.1  406.1\n## [2,] 1316.2  354.2  836.2\n## [3,]  138.3  144.3 1353.3\n## [4,] 1248.4 3820.4  280.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]    [,2]      [,3]\n## [1,] 475.1000  49.100  22.10000\n## [2,] 320.0500 278.050 476.55000\n## [3,] 297.0333 171.700  60.03333\n## [4,]  45.0250 239.025 164.52500\n## \n## , , 2\n## \n##           [,1]      [,2]     [,3]\n## [1,] 483.10000 111.10000 406.1000\n## [2,] 329.05000  88.55000 209.0500\n## [3,]  15.36667  16.03333 150.3667\n## [4,]  78.02500 238.77500  17.5250\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,]        475.1 4.910000e+01 2.210000e+01\n## [2,]     409728.0 3.092472e+05 9.083996e+05\n## [3,]  707586162.0 1.366705e+08 5.841725e+06\n## [4,] 1052094744.7 8.356286e+11 1.875718e+11\n## \n## , , 2\n## \n##              [,1]         [,2]       [,3]\n## [1,] 4.831000e+02 1.111000e+02      406.1\n## [2,] 4.330956e+05 3.136441e+04   174807.6\n## [3,] 9.797218e+04 1.112846e+05 91794884.8\n## [4,] 9.488009e+09 8.321380e+11 24147494.3\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}