{
  "hash": "290c5faf97e3506c49f37da26522ddc7",
  "result": {
    "markdown": "---\ntitle: bc.cplx\n---\n\n## Broadcasted Complex Numeric Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.cplx()</code> function performs broadcasted complex numeric operations pairs of arrays. <br />\n<br />\nNote that <code>bc.cplx()</code> uses more strict <code>NA</code> checks than base 'R': <br />\nIf for an element of either <code>x</code> or <code>y</code>, either the real or imaginary part is <code>NA</code> or <code>NaN</code>,\nthan the result of the operation for that element is necessarily <code>NA</code>. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.cplx(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable atomic arrays of type <code>complex</code>.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, /. <br />\nSupported relational operators: ==, !=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA complex array as a result of the broadcasted arithmetic operation. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\ngen <- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx <- array(gen() + gen() * -1i, x.dim)\ny <- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##      [,1] [,2]  [,3]\n## [1,]   NA   NA    NA\n## [2,]   NA   NA    NA\n## [3,]   NA   NA FALSE\n## [4,]   NA   NA    NA\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,]    NA   NA    NA\n## [2,]    NA   NA    NA\n## [3,]    NA   NA FALSE\n## [4,] FALSE   NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA TRUE\n## [4,]   NA   NA   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA TRUE\n## [4,] TRUE   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2]           [,3]\n## [1,]   NA   NA             NA\n## [2,]   NA   NA             NA\n## [3,]   NA   NA Inf+0.5940901i\n## [4,]   NA   NA             NA\n## \n## , , 2\n## \n##                [,1] [,2]          [,3]\n## [1,]             NA   NA            NA\n## [2,]             NA   NA            NA\n## [3,]             NA   NA Inf-1.693212i\n## [4,] Inf-0.6129941i   NA            NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1] FALSE    NA    NA    NA    NA    NA    NA    NA    NA    NA FALSE    NA\n## [13]    NA    NA    NA    NA    NA FALSE\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1] TRUE   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA   NA\n## [16]   NA   NA   NA\n\nx <- gen() + gen() * -1i\ny <- gen() + gen() * -1i\nout <- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                            x                      y                      \n##  [1,] -0.1294576-0.84727221i         Inf-0.1062302i       -Inf-      Infi\n##  [2,] -0.7886461+0.08014697i        -Inf-0.2251453i        Inf-      Infi\n##  [3,]        NaN-       Infi                     NA        NaN+      NaNi\n##  [4,]        NaN+       NaNi -1.44261607+0.1460869i        NaN+      NaNi\n##  [5,]        NaN+       Infi                     NA       -Inf+      NaNi\n##  [6,]                     NA -1.72932387+0.5092078i                    NA\n##  [7,]                     NA         NaN+      NaNi        NaN+      NaNi\n##  [8,] -0.8189645-2.04972287i -0.03873216+0.7757503i  1.6217933-0.5559217i\n##  [9,] -1.7499107+0.93070614i  0.06149299+0.5800832i -0.6474942-0.9578619i\n## [10,]                     NA         NaN+      NaNi        NaN+      NaNi\n## [11,]        NaN+       NaNi         NaN-      Infi        NaN+      NaNi\n## [12,] -0.1576713-1.37145162i -0.86194207-0.9401507i -1.1534676+1.3303466i\n## [13,]        NaN+       Infi  0.90078139-2.2776820i        Inf+      Infi\n## [14,]        Inf-0.12523293i         Inf-0.9552081i        Inf-      Infi\n## [15,]        NaN-       Infi  0.45234673+1.0380339i        Inf-      Infi\n## [16,]  1.0489524+0.25578194i         NaN+      Infi       -Inf+      Infi\n## [17,]       -Inf-1.50732359i                     NA        NaN+      Infi\n## [18,]        Inf+1.14259628i                     NA        NaN+      NaNi\n##                         out\n##  [1,]       -Inf-      Infi\n##  [2,]        Inf-      Infi\n##  [3,]                    NA\n##  [4,]                    NA\n##  [5,]                    NA\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]  1.6217933-0.5559217i\n##  [9,] -0.6474942-0.9578619i\n## [10,]                    NA\n## [11,]                    NA\n## [12,] -1.1534676+1.3303466i\n## [13,]                    NA\n## [14,]        Inf-      Infi\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,]                    NA\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}