{
  "hash": "410313f5530bc6e4f958c957667a3a75",
  "result": {
    "markdown": "---\ntitle: bc.list\n---\n\n## Broadcasted Operations for Recursive Arrays {.unnumbered}\n\n\n### Description\n\nThe <code>bc.list()</code> function performs broadcasted operations on 2 Recursive arrays. <br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.list(x, y, f)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable Recursive arrays (i.e. arrays of type <code>list</code>).\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"f\">f</code></td>\n<td>\na function that takes in exactly <b>2</b> arguments,\nand <b>returns</b> a result that can be stored in a single element of a list. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nA recursive array. <br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(c(10, 2,2))\nx.len <- prod(x.dim)\n\ngen <- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx <- array(gen(10), x.dim)\ny <- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n## , , 1\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n## \n## , , 2\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}