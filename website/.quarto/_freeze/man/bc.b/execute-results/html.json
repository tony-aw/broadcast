{
  "hash": "d58b1e5b1114208873a6f9c2434baec8",
  "result": {
    "markdown": "---\ntitle: bc.b\n---\n\n## Broadcasted Boolean Operations {.unnumbered}\n\n\n### Description\n\nThe <code>bc.b()</code> function\nperforms broadcasted Boolean operations on 2 logical (or 32bit integer) arrays. <br />\n<br />\nPlease note that these operations will treat the input as Boolean. <br />\nTherefore, something like <code>bc.b(1, 2, \"==\")</code> returns <code>TRUE</code>,\nbecause both <code>1</code> and <code>2</code> are <code>TRUE</code> when cast as Boolean. <br />\n<br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.b(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical (or 32bit integer) arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported Boolean  operators: &amp;, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nA logical array as a result of the broadcasted Boolean operation. <br /> <br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.b(x, y, \"&\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA FALSE FALSE\n## [2,] FALSE    NA  TRUE\n## [3,]    NA  TRUE    NA\n## [4,]    NA  TRUE  TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,] FALSE   NA    NA\n## [2,] FALSE   NA FALSE\n## [3,] FALSE   NA    NA\n## [4,]  TRUE TRUE  TRUE\nbc.b(x, y, \"|\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.b(x, y, \"xor\")\n## , , 1\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA  TRUE  TRUE\n## [2,] TRUE    NA FALSE\n## [3,]   NA FALSE    NA\n## [4,]   NA FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA    NA\n## [2,]  TRUE    NA  TRUE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE FALSE\nbc.b(x, y, \"nand\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.b(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]    NA FALSE FALSE\n## [2,] FALSE    NA  TRUE\n## [3,]    NA  TRUE    NA\n## [4,]    NA  TRUE  TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]\n## [1,] FALSE   NA    NA\n## [2,] FALSE   NA FALSE\n## [3,] FALSE   NA    NA\n## [4,]  TRUE TRUE  TRUE\nbc.b(x, y, \"!=\")\n## , , 1\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA  TRUE  TRUE\n## [2,] TRUE    NA FALSE\n## [3,]   NA FALSE    NA\n## [4,]   NA FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA    NA\n## [2,]  TRUE    NA  TRUE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE FALSE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}