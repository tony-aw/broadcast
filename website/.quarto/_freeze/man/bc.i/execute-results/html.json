{
  "hash": "152026fdc3aeeb957c8b4e461276261d",
  "result": {
    "markdown": "---\ntitle: bc.i\n---\n\n## Broadcasted Integer Numeric Operations with Extra Overflow Protection {.unnumbered}\n\n\n### Description\n\nThe <code>bc.i()</code> function\nperforms broadcasted integer numeric operations on 2 numeric or logical arrays. <br />\n<br />\nPlease note that these operations will treat the input as 53bit integers,\nand will efficiently truncate when necessary. <br />\nTherefore, something like <code>bc.i(1, 1.5, \"==\")</code> returns <code>TRUE</code>,\nbecause <code>trunc(1.5)</code> equals <code>1</code>. <br />\n<br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.i(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, gcd, %%, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. <br />\nThe &quot;gcd&quot; operator performs the Greatest Common Divisor&quot; operation,\nusing the Euclidean algorithm.. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array of whole numbers,\nas a result of the broadcasted arithmetic operation. <br />\nBase 'R' supports 53 bit integers,\nwhich thus range from approximately <code>-9</code> quadrillion to <code>+9</code> quadrillion. <br />\nValues outside of this range will be returned as <code>-Inf</code> or <code>Inf</code>,\nas an extra protection against integer overflow. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted integer relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  542  494  203\n## [2,]  429  160   35\n## [3,]  853  938  147\n## [4,]  643  552  674\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  712  937  320\n## [2,]   25    7  488\n## [3,]  702  720  574\n## [4,]  384  574  912\nbc.i(x, y, \"-\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  540  492  201\n## [2,]  425  156   31\n## [3,]  847  932  141\n## [4,]  635  544  666\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  710  935  318\n## [2,]   21    3  484\n## [3,]  696  714  568\n## [4,]  376  566  904\nbc.i(x, y, \"*\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  541  493  202\n## [2,]  854  316   66\n## [3,] 2550 2805  432\n## [4,] 2556 2192 2680\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  711  936  319\n## [2,]   46   10  972\n## [3,] 2097 2151 1713\n## [4,] 1520 2280 3632\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    2    1\n## [3,]    1    1    3\n## [4,]    1    4    2\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    1    2\n## [3,]    3    3    1\n## [4,]    4    2    4\nbc.i(x, y, \"^\")\n## , , 1\n## \n##             [,1]        [,2]         [,3]\n## [1,] 5.41000e+02         493          202\n## [2,] 1.82329e+05       24964         1089\n## [3,] 6.14125e+08   817400375      2985984\n## [4,] 1.66726e+11 90182492416 201511210000\n## \n## , , 2\n## \n##             [,1]         [,2]         [,3]\n## [1,]         711          936          319\n## [2,]         529           25       236196\n## [3,]   341532099    368601813    186169411\n## [4,] 20851360000 105560010000 679740887296\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}