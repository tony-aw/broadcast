{
  "hash": "152026fdc3aeeb957c8b4e461276261d",
  "result": {
    "markdown": "---\ntitle: bc.i\n---\n\n## Broadcasted Integer Numeric Operations with Extra Overflow Protection {.unnumbered}\n\n\n### Description\n\nThe <code>bc.i()</code> function\nperforms broadcasted integer numeric operations on 2 numeric or logical arrays. <br />\n<br />\nPlease note that these operations will treat the input as 53bit integers,\nand will efficiently truncate when necessary. <br />\nTherefore, something like <code>bc.i(1, 1.5, \"==\")</code> returns <code>TRUE</code>,\nbecause <code>trunc(1.5)</code> equals <code>1</code>. <br />\n<br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.i(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, gcd, %%, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. <br />\nThe &quot;gcd&quot; operator performs the Greatest Common Divisor&quot; operation,\nusing the Euclidean algorithm.. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array of whole numbers,\nas a result of the broadcasted arithmetic operation. <br />\nBase 'R' supports 53 bit integers,\nwhich thus range from approximately <code>-9</code> quadrillion to <code>+9</code> quadrillion. <br />\nValues outside of this range will be returned as <code>-Inf</code> or <code>Inf</code>,\nas an extra protection against integer overflow. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted integer relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  519  847  937\n## [2,]  997  484  431\n## [3,]    7  770  138\n## [4,]  339  449  199\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  204  215  812\n## [2,]  152  513  631\n## [3,]  305   62  766\n## [4,]  251  515  976\nbc.i(x, y, \"-\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  517  845  935\n## [2,]  993  480  427\n## [3,]    1  764  132\n## [4,]  331  441  191\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  202  213  810\n## [2,]  148  509  627\n## [3,]  299   56  760\n## [4,]  243  507  968\nbc.i(x, y, \"*\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  518  846  936\n## [2,] 1990  964  858\n## [3,]   12 2301  405\n## [4,] 1340 1780  780\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  203  214  811\n## [2,]  300 1022 1258\n## [3,]  906  177 2289\n## [4,]  988 2044 3888\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    2    1\n## [3,]    1    1    3\n## [4,]    1    1    1\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    2    1    1\n## [3,]    1    1    1\n## [4,]    1    1    4\nbc.i(x, y, \"^\")\n## , , 1\n## \n##             [,1]        [,2]       [,3]\n## [1,]         518         846        936\n## [2,]      990025      232324     184041\n## [3,]          64   451217663    2460375\n## [4,] 12594450625 39213900625 1445900625\n## \n## , , 2\n## \n##            [,1]        [,2]         [,3]\n## [1,]        203         214          811\n## [2,]      22500      261121       395641\n## [3,]   27543608      205379    444194947\n## [4,] 3722098081 68184176641 892616806656\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}