{
  "hash": "7472f88f056923749a4131e7136a9e1d",
  "result": {
    "markdown": "---\ntitle: bc.i\n---\n\n## Broadcasted Integer Numeric Operations with Extra Overflow Protection {.unnumbered}\n\n\n### Description\n\nThe <code>bc.i()</code> function\nperforms broadcasted integer numeric operations on 2 numeric or logical arrays. <br />\n<br />\nPlease note that these operations will treat the input as 53bit integers,\nand will efficiently truncate when necessary. <br />\nTherefore, something like <code>bc.i(1, 1.5, \"==\")</code> returns <code>TRUE</code>,\nbecause <code>trunc(1.5)</code> equals <code>1</code>. <br />\n<br />\n\n\n\n### Usage\n\n<pre><code class='language-R'>bc.i(x, y, op)\n</code></pre>\n\n\n### Arguments\n\n<table>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"x\">x</code>, <code id=\"y\">y</code></td>\n<td>\nconformable logical or numeric arrays.\n</td></tr>\n<tr><td style = \"white-space: collapse; font-family: monospace; vertical-align: top\"><code id=\"op\">op</code></td>\n<td>\na single string, giving the operator. <br />\nSupported arithmetic operators: +, -, *, gcd, ^, pmin, pmax. <br />\nSupported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. <br />\n</td></tr>\n</table>\n\n\n### Value\n\nFor arithmetic operators: <br />\nA numeric array of whole numbers,\nas a result of the broadcasted arithmetic operation. <br />\nBase 'R' supports 53 bit integers,\nwhich thus range from approximately <code>-9</code> quadrillion to <code>+9</code> quadrillion. <br />\nValues outside of this range will be returned as <code>-Inf</code> or <code>Inf</code>,\nas an extra protection against integer overflow. <br />\n<br />\nFor relational operators: <br />\nA logical array as a result of the broadcasted integer relational comparison. <br />\n<br />\n\n\n\n### Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"broadcast\")\n\nx.dim <- c(4:2)\nx.len <- prod(x.dim)\nx.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx <- array(x.data, x.dim)\ny <- array(1:50, c(4,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  178  433  361\n## [2,]  173  535  221\n## [3,]  588  775  719\n## [4,]  741  429  405\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  985  163  471\n## [2,]  984  532  813\n## [3,]  251   21  574\n## [4,]  787  805  288\nbc.i(x, y, \"-\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  176  431  359\n## [2,]  169  531  217\n## [3,]  582  769  713\n## [4,]  733  421  397\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  983  161  469\n## [2,]  980  528  809\n## [3,]  245   15  568\n## [4,]  779  797  280\nbc.i(x, y, \"*\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  177  432  360\n## [2,]  342 1066  438\n## [3,] 1755 2316 2148\n## [4,] 2948 1700 1604\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  984  162  470\n## [2,] 1964 1060 1622\n## [3,]  744   54 1713\n## [4,] 3132 3204 1136\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    1    1\n## [3,]    3    1    1\n## [4,]    1    1    1\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    2    2    1\n## [3,]    1    3    1\n## [4,]    1    1    4\nbc.i(x, y, \"^\")\n## , , 1\n## \n##              [,1]        [,2]        [,3]\n## [1,]          177         432         360\n## [2,]        29241      284089       47961\n## [3,]    200201625   460099648   367061696\n## [4,] 295032562561 32625390625 25856961601\n## \n## , , 2\n## \n##              [,1]         [,2]       [,3]\n## [1,]          984          162        470\n## [2,]       964324       280900     657721\n## [3,]     15252992         5832  186169411\n## [4,] 375878121921 411651843201 6505390336\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"<=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \">=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}