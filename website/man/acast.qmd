---
title: acast
---
## Simple and Fast Casting/Pivoting of an Array {.unnumbered}


### Description

The <code>acast()</code> function spreads subsets of an array margin over a new dimension. <br />
<br />
<code>acast()</code> is somewhat analogous to <code>data.table::</code>dcast,
but it has 2 important differences:


<ul>
<li> <code>acast()</code> works on arrays instead of data.tables.

</li>
<li> <code>acast()</code> casts into a completely new dimension
(namely [ndim](properties.qmd)<code>(x) + 1L</code>),
instead of casting into more columns.

</li></ul>



### Usage

<pre><code class='language-R'>acast(x, margin, grp, fill = FALSE)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="x">x</code></td>
<td>
an atomic or recursive array.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="margin">margin</code></td>
<td>
a scalar integer, specifying the margin to cast from.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="grp">grp</code></td>
<td>
a factor, specifying the indices on the <code>margin</code>.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="fill">fill</code></td>
<td>
Boolean, indicating if missing values should be filled. <br />
This is used in case the levels of <code>grp</code> do not have equal frequencies,
and thus additional values must be filled. <br />
If <code>x</code> is atomic but not <code>raw</code>, missing values are filled with <code>NA</code>. <br />
If <code>x</code> is recursive, missing values are filled with <code>list(NULL)</code>. <br />
If <code>x</code> is of type <code>raw</code>, uneven groupings are not supported.
</td></tr>
</table>


### Details

A more detailed explanation of the <code>acast()</code> function can be found on the website. <br />



### Value

An array with the following properties:


<ul>
<li> <code style="white-space: pre;">ndim(out) = ndim(x) + 1l</code>;

</li>
<li> dimensions equal to <code style="white-space: pre;">c(dim(x), max(tabulate(grp))</code>;

</li>
<li> dimnames equal to <code>c(dimnames(x), list(levels(grp)))</code>;

</li></ul>



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}
library("broadcast")


x <- cbind(id = c(rep(1:3, each = 2), 1), grp = c(rep(1:2, 3), 2), val = rnorm(7))
grp <- as.factor(x[, 2])
levels(grp) <- c("a", "b")
margin <- 1L
out <- acast(x, margin, grp, TRUE)


```
