---
title: bc.i
---
## Broadcasted Integer Numeric Operations with Extra Overflow Protection {.unnumbered}


### Description

The <code>bc.i()</code> function
performs broadcasted integer numeric operations on 2 numeric or logical arrays. <br />
<br />
Please note that these operations will treat the input as 53bit integers,
and will efficiently truncate when necessary. <br />
Therefore, something like <code>bc.i(1, 1.5, "==")</code> returns <code>TRUE</code>,
because <code>trunc(1.5)</code> equals <code>1</code>. <br />
<br />



### Usage

<pre><code class='language-R'>bc.i(x, y, op)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="x">x</code>, <code id="y">y</code></td>
<td>
conformable logical or numeric arrays.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="op">op</code></td>
<td>
a single string, giving the operator. <br />
Supported arithmetic operators: +, -, *, gcd, %%, ^, pmin, pmax. <br />
Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. <br />
</td></tr>
</table>


### Value

For arithmetic operators: <br />
A numeric array of whole numbers,
as a result of the broadcasted arithmetic operation. <br />
Base 'R' supports 53 bit integers,
which thus range from approximately <code>-9</code> quadrillion to <code>+9</code> quadrillion. <br />
Values outside of this range will be returned as <code>-Inf</code> or <code>Inf</code>,
as an extra protection against integer overflow. <br />
<br />
For relational operators: <br />
A logical array as a result of the broadcasted integer relational comparison. <br />
<br />



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}
library("broadcast")

x.dim <- c(4:2)
x.len <- prod(x.dim)
x.data <- sample(c(NA, 1.1:1000.1), x.len, TRUE)
x <- array(x.data, x.dim)
y <- array(1:50, c(4,1,1))

bc.i(x, y, "+")
bc.i(x, y, "-")
bc.i(x, y, "*")
bc.i(x, y, "gcd") # greatest common divisor
bc.i(x, y, "^")

bc.i(x, y, "==")
bc.i(x, y, "!=")
bc.i(x, y, "<")
bc.i(x, y, ">")
bc.i(x, y, "<=")
bc.i(x, y, ">=")


```
