---
title: bc_ifelse
---
## Broadcasted Ifelse {.unnumbered}


### Description

The <code>bc_ifelse()</code> function
performs a broadcasted form of ifelse. <br />



### Usage

<pre><code class='language-R'>bc_ifelse(cond, yes, no)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="cond">cond</code></td>
<td>
<code>logical</code> vector or array with the length equal to <code>prod(bc_dim(yes, no))</code>.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="yes">yes</code>, <code id="no">no</code></td>
<td>
conformable arrays of the same type. <br />
All atomic types (see atomic) are supported. <br />
Recursive arrays of type <code>list</code> are also supported. <br /> <br />
</td></tr>
</table>


### Value

The ouput, here referred to as <code>out</code>,
will be an array of the same type as <code>yes</code> and <code>no</code>. <br />
After broadcasting <code>yes</code> against <code>no</code>,
given any element index <code>i</code>,
the following will hold for the output:


<ul>
<li> when <code>cond[i] == TRUE</code>, <code>out[i]</code> is <code>yes[i]</code>;

</li>
<li> when <code>cond[i] == FALSE</code>, <code>out[i]</code> is <code>no[i]</code>;

</li>
<li> when <code>cond[i]</code> is <code>NA</code>,
<code>out[i]</code> is <code>NA</code> when <code>yes</code> and <code>no</code> are atomic,
and <code>out[i]</code> is <code>list(NULL)</code> when <code>yes</code> and <code>no</code> are recursive. <br /> <br />

</li></ul>



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE}
library("broadcast")

x.dim <- c(c(10, 2,2))
x.len <- prod(x.dim)

gen <- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)

x <- array(gen(10), x.dim)
y <- array(gen(10), c(10,1,1))

cond <- bc.list(
  x, y,
  \(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))
) |> as_bool()

bc_ifelse(cond, yes = x, no = y)


```
