---
title: bind
---
## Dimensional Binding of Objects {.unnumbered}


### Description

The <code>bind_</code>implementations provide dimensional binding functionalities. <br />
<br />
The following implementations are available:


<ul>
<li> <code>bind_mat()</code> binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise. <br />
Allows for recycling.

</li>
<li> <code>bind_array()</code> binds (atomic/recursive) arrays and (atomic/recursive) matrices. <br />
Allows for broadcasting.

</li>
<li> <code>bind_dt()</code> binds data.tables and other data.frame-like objects. <br />
This function is only available if the 'data.table' package is installed. <br />
Returns a <code>data.table</code>. <br />
Faster than <code>do.call(cbind, ...)</code> or <code>do.call(rbind, ...)</code> for regular <code>data.frame</code> objects. <br />

</li></ul>

Note that the naming convention of the binding implementations here is
&quot;bind_&quot; followed by the <b>resulting class</b> (abbreviated). <br />
I.e. <code>bind_mat</code> <b>returns</b> a matrix, but can bind both matrices and vectors. <br />
And <code>bind_array</code> <b>returns</b> an array, but can bind both arrays and matrices. <br />
And <code>bind_dt</code> <b>returns</b> a data.table, but can bind not only data.tables,
but also most other data.frame-like objects. <br /> <br />



### Usage

<pre><code class='language-R'>bind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)

bind_array(
  input,
  along,
  revalong,
  max_bc = 1L,
  name_along = TRUE,
  comnames_from = 1L
)

bind_dt(input, along, ...)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="input">input</code></td>
<td>
a list of only the appropriate objects. <br />
If <code>input</code> is named,
its names will be used for the names of dimension <code>along</code> of the output,
as far as possible.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="along">along</code></td>
<td>
a single integer,
indicating the dimension along which to bind the dimensions. <br />
I.e. use <code>along = 1</code> for row-binding, <code>along = 2</code> for column-binding, etc. <br />
For arrays, additional flexibility is available:


<ul>
<li> Specifying <code>along = 0</code> will bind the arrays on a new dimension before the first,
making <code>along</code> the new first dimension.

</li>
<li> Specifying <code>along = N + 1</code>, with <code style="white-space: pre;">N = </code>max<code>(</code>lst.ndim<code style="white-space: pre;">(input))</code>,
will create an additional dimension (<code>N + 1</code>) and bind the arrays along that new dimension.

</li></ul>
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="name_deparse">name_deparse</code></td>
<td>
Boolean, for <code>bind_mat()</code>. <br />
Indicates if dimension <code>along</code> should be named. <br />
Uses the naming method from rbind/cbind itself.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="comnames_from">comnames_from</code></td>
<td>
either integer scalar or <code>NULL</code>,
for <code>bind_mat()</code> and  <code>bind_array()</code>. <br />
Indicates which object in <code>input</code> should be used for naming the shared dimension. <br />
If <code>NULL</code>, no communal names will be given. <br />
For example: <br />
When binding columns of matrices, the matrices will share the same rownames. <br />
Using <code>comnames_from = 10</code> will then result in <code>bind_array()</code> using
<code>rownames(input[[10]])</code> for the rownames of the output.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="revalong">revalong</code></td>
<td>
for <code>bind_array()</code> only. <br />
Same as <code>along</code>, but counting backwards. <br />
I.e. <code>revalong = 0</code> is equivalent to <code>along = N+1</code>, and <code>revalong = N+1</code> is equivalent to <code>along = 0</code>; <br />
with <code style="white-space: pre;">N = </code>max<code>(</code>lst.ndim<code style="white-space: pre;">(input))</code>.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="max_bc">max_bc</code></td>
<td>
integer, for <code>bind_array</code> only. <br />
Specify here the number of dimensions that are allowed to be broadcasted when binding arrays. <br />
If <code>max_bc = 0L</code>, <b>no</b> broadcasting will be allowed at all.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="name_along">name_along</code></td>
<td>
Boolean, for <code>bind_array()</code>. <br />
Indicates if dimension <code>along</code> should be named.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="...">...</code></td>
<td>
arguments to be passed to rbindlist. <br /> <br />
</td></tr>
</table>


### Details

For in-depth information about the binding implentations in the 'broadcast' package,
please refer to broadcast_bind. <br />
<br />



### Value

The bound object.



### References

Plate T, Heiberger R (2016). <em>abind: Combine Multidimensional Arrays</em>. R package version 1.4-5, <a href="https://CRAN.R-project.org/package=abind">https://CRAN.R-project.org/package=abind</a>.



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE}
library("broadcast")


# bind_array ====

# here, atomic and recursive arrays are mixed,
# resulting in recursive arrays

# creating the arrays
x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

# binding the arrays
input <- list(x = x, y = y)
bind_array(input, along = 0L) # binds on new dimension before first
bind_array(input, along = 1L) # binds on first dimension (i.e. rows)
bind_array(input, along = 2L)
bind_array(input, along = 3L) # bind on new dimension after last

bind_array(input, revalong = 0L) # binds on new dimension after last
bind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)
bind_array(input, revalong = 2L)
bind_array(input, revalong = 3L) # bind on new dimension before first


# binding, with empty arrays
emptyarray <- array(numeric(0L), c(0L, 3L))
dimnames(emptyarray) <- list(NULL, paste("empty", 1:3))
print(emptyarray)
input <- list(x = x, y = emptyarray)
bind_array(input, along = 1L, comnames_from = 2L) # row-bind



################################################################################

# bind_mat ====

# here, atomic and recursive matrices are mixed,
# resulting in a recursive matrix

x <- c(
  lapply(1:3, \(x)sample(c(TRUE, FALSE, NA))),
  lapply(1:3, \(x)sample(1:10)),
  lapply(1:3, \(x)rnorm(10)),
  lapply(1:3, \(x)sample(letters))
)
x <- matrix(x, 4, 3, byrow = TRUE)
dimnames(x) <- list(letters[1:4], LETTERS[1:3])
print(x)

y <- matrix(1:12, 4, 3)
print(y)

bind_mat(list(x = x, y = y), 2L)



################################################################################

# bind_dt ====


x <- data.frame(a = 1:12, b = month.abb) # data.frame
y <- data.table::data.table(a = 1:12, b = month.abb) # data.table

bind_dt(list(x = x, y = y), 2L) # column bind

bind_dt(list(x = x, y = y), 1L) # row bind



```
