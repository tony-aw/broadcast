---
title: bcapply
---
## Apply a Function to 2 Broadcasted Arrays {.unnumbered}


### Description

The <code>bcapply()</code> function
applies a function to 2 arrays element-wise with broadcasting,
similar to the outer function. <br />



### Usage

<pre><code class='language-R'>bcapply(x, y, f, v = NULL)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="x">x</code>, <code id="y">y</code></td>
<td>
conformable atomic or recursive arrays.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="f">f</code></td>
<td>
a function that takes in exactly <b>2</b> arguments,
and <b>returns</b> a result
that can be stored in a single element of a recursive or atomic array.
</td></tr>
<tr><td style = "white-space: collapse; font-family: monospace; vertical-align: top"><code id="v">v</code></td>
<td>
either <code>NULL</code>, or single string, giving the scalar type for a single iteration. <br />
If <code>NULL</code> (default) or <code>"list"</code>, the result will be a recursive array. <br />
If it is certain that, for every iteration,
<code>f()</code> always results in a <b>single atomic scalar</b>,
the user can specify the type in <code>v</code> to pre-allocate the result. <br />
Pre-allocating the results leads to slightly faster and more memory efficient code. <br />
NOTE: Incorrectly specifying <code>v</code> leads to undefined behaviour; <br />
when unsure, leave <code>v</code> at its default value. <br />
</td></tr>
</table>


### Value

An atomic or recursive array with dimensions <code>bc_dim(x, y)</code>. <br />



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE, collapse = TRUE, comment = NA}
library("broadcast")

x.dim <- c(c(10, 2,2))
x.len <- prod(x.dim)

gen <- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)

x <- array(gen(10), x.dim)
y <- array(gen(10), c(10,1,1))

f <- function(x, y) list(x, y)
bcapply(x, y, f)


```
