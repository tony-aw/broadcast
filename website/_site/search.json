[
  {
    "objectID": "vignettes/e_benchmarks.html",
    "href": "vignettes/e_benchmarks.html",
    "title": "Benchmarks with Numpy+reticulate",
    "section": "",
    "text": "Introduction\nIn this article, the speed of ‘broadcast’ is compared to the speed of ‘Numpy’ via {reticulate}.\n \n\n\nKeeping comparisons fair\nTo keep the comparisons between ‘broadcast’ and ‘Numpy’+‘reticulate’ fair, a number of measures have been taken:\n\nconversion from Numpy to ‘R’ is DISABLED; this allows for comparing the speed more fairly. When conversion would be enabled, precious time would be wasted to convert from Numpy structures to comparable ‘R’ structures.\ngarbage collection is disabled in reticulate’s Python. In ‘R’, only benchmarks with no garbage collection, or level 0 garbage collection, is used. I feel this keeps the comparisons relatively fair (but it’s not perfect).\n‘R’ has more support for missing values than ‘Numpy’, which also leads to a difference in speed. But both ‘R’ and ‘Numpy’ handle missing values equally in decimal numbers ( 64bit floats in Numpy and 64bit doubles in ‘R’ ), through the NaN construct. Therefore, only operations on decimal numbers are compared.\n\n \n\n\nMany Orthogonal Arrays\n8 pairs of decimal number arrays are created in both ‘R’ and ‘Numpy’. They all have a length of (approximately) 9*10^6 elements. Each pair will have a different number of dimensions, from 2 to 9 (hence 8 pairs of arrays). I.e. a pair of 2d arrays, a pair of 3d arrays, etc.\nThese pairs of arrays are fully orthogonal, thus the maximum amount of broadcasting will be employed.\nFor each pair of array the outer sum is computed using ‘broadcast’ and ‘Numpy’. This computation is repeated 100 times, and the median result is taken.\nThus we get the following code:\n\n# set-up ====\nlibrary(broadcast)\nlibrary(tinycodet)\nimport_as(~rt, \"reticulate\")\nnp &lt;- rt$import(\"numpy\", convert = FALSE)\ngc &lt;- rt$import(\"gc\", convert = FALSE)\nget_times &lt;- function(obj, j) {\n  nms &lt;- names(res$expression)\n  j &lt;- which(nms == j)\n  idx &lt;- rowSums(obj$gc[[j]][, 2:3]) == 0\n  times &lt;- obj$time[[j]][idx]\n  return(times)\n}\ngc$disable()\n\n# loop\nmedian_bc &lt;- median_np &lt;- q1_bc &lt;- q1_np &lt;- q3_bc &lt;- q3_np &lt;- vector(\"numeric\", 8)\ncounter &lt;- 1L\ntarget_len &lt;- 9e6\n\nfor(i in 2:9) {\n  print(i)\n  n &lt;- round(target_len^(1/i)) |&gt; as.integer()\n  len &lt;- n^i\n  cat(\"i = \", i, \"\\n\")\n  cat(\"n = \", n, \"\\n\")\n  cat(\"len = \", len, \"\\n\")\n  x.dims &lt;- rep(c(n, 1L), i - 1)[1:i]\n  y.dims &lt;- rep(c(1L, n), i - 1)[1:i]\n  a.dims &lt;- rt$r_to_py(as.list(x.dims))\n  b.dims &lt;- rt$r_to_py(as.list(y.dims))\n  \n  npa &lt;- np$random$random_sample(a.dims)\n  npb &lt;- np$random$random_sample(b.dims)\n  a &lt;- array(runif(100), x.dims)\n  b &lt;- array(runif(100), y.dims)\n  \n  res &lt;- bench::mark(\n    broadcast = bc.num(a, b, \"+\"),\n    `numpy (NO conversion to R)` = npa + npb,\n    check = FALSE,\n    min_iterations = 100\n  )\n  bc_all &lt;- get_times(res, \"broadcast\")\n  np_all &lt;- get_times(res, \"numpy (NO conversion to R)\")\n  median_bc[counter] &lt;- median(bc_all)\n  median_np[counter] &lt;- median(np_all)\n  q1_bc[counter] &lt;- quantile(bc_all, 0.25)\n  q3_bc[counter] &lt;- quantile(bc_all, 0.75)\n  q1_np[counter] &lt;- quantile(np_all, 0.25)\n  q3_np[counter] &lt;- quantile(np_all, 0.75)\n  \n  counter &lt;- counter + 1L\n}\n\nUsing {tinyplot}, the median, first quartile, and third quartile of the bench-marked computation times are presented in the following graph:\n\n\n\n\n\n \n\n\nLarge non-orthogonal arrays comparisons\nHow about arrays that are not fully orthogonal, but still require a lot of broadcasting in pari-wise computations?\nHere is the benchmark:\n\n\nlibrary(broadcast)\nlibrary(tinycodet)\nimport_as(~rt, \"reticulate\")\nnp &lt;- rt$import(\"numpy\", convert = FALSE)\ngc &lt;- rt$import(\"gc\", convert = FALSE)\ngc$disable()\n\nn &lt;- 26L\nnpa &lt;- np$random$rand(n, 1L, n, 1L, n)\nnpb &lt;- np$random$rand(n, n, 1L, n, 1L)\n\na.dim &lt;- c(n, rep(c(1L, n), 2))\nb.dim &lt;- c(n, rep(c(n, 1L), 2))\na &lt;- array(rnorm(100), a.dim)\nb &lt;- array(rnorm(100), b.dim)\n\nbm_numpy_large &lt;- bench::mark(\n  broadcast = bc.num(a, b, \"+\"),\n  `numpy (no conversion to R)` = npa + npb,\n  check = FALSE,\n  min_iterations = 200,\n)\nsummary(bm_numpy_large)\nggplot2::autoplot(bm_numpy_large)\n\n\n#&gt; # A tibble: 2 × 6\n#&gt;   expression                      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;                 &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 broadcast                    16.6ms   17.6ms      55.4    90.6MB     27.3\n#&gt; 2 numpy (no conversion to R)   25.4ms   30.9ms      32.4        0B      0"
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#example-case",
    "href": "vignettes/c_broadcasting_explained.html#example-case",
    "title": "Broadcasting Explained",
    "section": "2.1 Example case",
    "text": "2.1 Example case\nLet’s start with a simple example.\nConsider 2 orthogonal 1d arrays, namely the column vector x and the row vector y:\n\nx &lt;- array(1:5, c(5, 1))\ny &lt;- array(1:5*10, c(1, 5))\nprint(x)\n#&gt;      [,1]\n#&gt; [1,]    1\n#&gt; [2,]    2\n#&gt; [3,]    3\n#&gt; [4,]    4\n#&gt; [5,]    5\nprint(y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   10   20   30   40   50\n\nSuppose one wishes to compute the outer sum of these 2 vectors.\nThis won’t work in base ‘R’:\n\nx + y\nError in x + y : non-conformable arrays\n\nWhen computing the outer sum of these orthogonal vectors, both vectors need to be recycled to equal size in order to compute the outer computation.\nI.e. x needs its single column to be recycled (in this case) 5 times, and y needs its single row to be recycled 5 times, creating 2 conformable matrices.\n‘R’ provides linear vector recycling, but not recycling of array dimensions. Instead, in base ‘R’ we need to replicate (and thus copy) the array dimensions. This can be done manually, or using outer() |&gt; drop():\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55"
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#what-is-the-problem",
    "href": "vignettes/c_broadcasting_explained.html#what-is-the-problem",
    "title": "Broadcasting Explained",
    "section": "2.2 What is the problem?",
    "text": "2.2 What is the problem?\nWhen x and y are small arrays, like in the above example, there is hardly a problem; but when x and y become larger, the 3 matrices (x is replicated to a matrix, y is replicated to a matrix, and the result is also matrix) also become larger.\nIf the 3 matrices become too large, you may require more memory than is available in your current system, resulting in a message like the following:\n\n&gt; Error: cannot allocate vector of size\n\nThe problem isn’t limited to available memory. As the object sizes increase, the speed decreases. And let’s not forget that computational inefficiency in general is also bad for the environment."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#introducing-broadcasting",
    "href": "vignettes/c_broadcasting_explained.html#introducing-broadcasting",
    "title": "Broadcasting Explained",
    "section": "2.3 Introducing Broadcasting",
    "text": "2.3 Introducing Broadcasting\nIn an operation like outer(x, y, \"+\"), x and y are replicated to become the same size. The thing is, physical replication - and thus copying - of the dimensions of x and y should not be necessary; they only need to be recycled virtually.\nVirtual recycling does not actually physically replicate x and y. Instead, nested loops in ‘C’ and ‘C++’ are used to simulate a recycled array.\nThis is similar to how ‘R’ recycles regular vectors.\nVirtual recycling requires no additional memory (apart from allocating the final end result); it is much faster and much more memory efficient than using the outer() function or something similar.\nAnd that is what broadcasting does: broadcasting provides fast virtual recycling of array dimensions in the context of operations involving 2 (or more) arrays without allocating additional memory.\nIn the earlier example, we used:\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nTo compute the outer sum using broadcasting through the ‘broadcast’ package, we can do the following:\n\nlibrary(broadcast)\n\nbc.num(x, y, \"+\")\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nThe result is the same (as it should). But as the size of the resulting array increases, the broadcasted functions become more and more efficient in terms of both speed and memory, in comparison with base ‘R’ approaches.\nBenchmarks can be found on the website."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#conformability",
    "href": "vignettes/c_broadcasting_explained.html#conformability",
    "title": "Broadcasting Explained",
    "section": "4.1 Conformability",
    "text": "4.1 Conformability\nBroadcasted operations only work when 2 arrays are conformable for broadcasting.\nConsider again 2 arrays x and y, and their dimensions given by dim(x) and dim(y), respectively.\n‘broadcast’ goes through dim(x) and dim(y), from left (i.e. first dimension / rows) to right (i.e. the last dimension), and checks for each axis i if at least one of the following conditions is TRUE:\n\ndim(x)[i] and dim(y)[i] are equal;\neither dim(x)[i] or dim(y)[i] is 1;\neither dim(x)[i] or dim(y)[i] is non-existing.\n\nif at least one of the above conditions is true for each and every one of the dimensions of x and y, the 2 arrays are compatible for broadcasted operations. If not, they are not compatible, and attempting to perform a broadcasted operations results in an error.\nTo illustrate, let’s check 2 arrays to see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 1))\n\n\n\n\n\n\ndim(x)\ndim(y)\ncompatible\nreason\n\n\n\n\n10\n10\nTRUE\nequal\n\n\n1\n5\nTRUE\neither is 1\n\n\n9\n1\nTRUE\neither is 1\n\n\n6\nNA\nTRUE\neither is missing\n\n\n\n\n\n\n\nAs shown in the data.frame above, all dimensions of x and y are compatible.\nTherefore, broadcasted binary operations involving x and y can be performed.\n \nNow let’s look at another 2 arrays, and see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 2))\n\n\n\n\n\n\ndim(x)\ndim(y)\ncompatible\nreason\n\n\n\n\n10\n10\nTRUE\nequal\n\n\n1\n5\nTRUE\neither is 1\n\n\n9\n2\nFALSE\nnot equal & neither is 1/missing\n\n\n6\nNA\nTRUE\neither is missing\n\n\n\n\n\n\n\nOne of the dimensions, namely the third dimension, is not compatible. Therefore, these 2 arrays are not conformable for broadcasted operations."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "href": "vignettes/c_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "title": "Broadcasting Explained",
    "section": "4.2 Which dimensions are broadcasted",
    "text": "4.2 Which dimensions are broadcasted\nIn the context of an operation involving exactly 2 arrays, this sub-section explains which dimensions of which array is broadcasted, and which dimension of which array is left as-is.\nThere are 3 scenarios relevant for this explanation.\n \nScenario 1:\nFor some dimension i, dim(x)[i] and dim(y)[i] are equal.\nIn this scenario, no broadcasting needs to occur on that dimension for either array.\n \nScenario 2:\nFor some dimension i, suppose dim(x)[i] == 1 and dim(y)[i] &gt; 1.\nThen dimension dim(x)[i] is broadcasted to size dim(y)[i].\nSimilarly, if dim(x)[i] &gt; 1 and dim(y)[i] == 1, dimension dim(y)[i] is broadcasted to size dim(x)[i].\n \nScenario 3:\nFinally, suppose for some dimension i, dim(x)[i] &gt; 1, and dim(y)[i] is non-existing.\nI.e., x has more dimensions than y.\nIn this case, the missing dimension in y is replaced with a dimensions of size 1, and scenario 2 is used.\nSimilarly, if dim(y)[i] &gt; 1 and dim(x)[i] is non-existing, the missing dimension in x is replaced with a dimension of size 1 and we get back to scenario 2.\nIt does not matter how much difference there is between the number of dimensions of x and the number of dimensions of y: any number of missing dimensions will be replaced with 1, as long as the total number of dimensions for each array does not exceed 16.\n \nIllustration\nTo illustrate, let’s check 2 conformable arrays, and see which dimension of which array is broadcasted by how much\n\nx &lt;- array(rnorm(10), c(10, 1, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 1, 5, 1))\n\n\n\n\n\n\ni\ndim(x)\ndim(y)\nbroadcasted\nreason\nnote\n\n\n\n\n1\n10\n10\nneither\ndims equal\n\n\n\n2\n1\n1\nneither\ndims equal\n\n\n\n3\n1\n5\nx\ndim(x)[i] == 1\ndim(x)[i] recycled to size 5\n\n\n4\n9\n1\ny\ndim(y)[i] == 1\ndim(y)[i] recycled to size 9\n\n\n5\n6\nNA\ny\ndim(y)[i] is missing\ndim(y) extended by 1"
  },
  {
    "objectID": "vignettes/a_readme.html#overview",
    "href": "vignettes/a_readme.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "vignettes/a_readme.html#why-use-broadcast",
    "href": "vignettes/a_readme.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "vignettes/a_readme.html#documentation",
    "href": "vignettes/a_readme.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/outer/bc.str.html",
    "href": "man/outer/bc.str.html",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of typee character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2]\n##  [1,] \"aa\" \"ka\"\n##  [2,] \"bb\" \"lb\"\n##  [3,] \"cc\" \"mc\"\n##  [4,] \"dd\" \"nd\"\n##  [5,] \"ee\" \"oe\"\n##  [6,] \"ff\" \"pf\"\n##  [7,] \"gg\" \"qg\"\n##  [8,] \"hh\" \"rh\"\n##  [9,] \"ii\" \"si\"\n## [10,] \"jj\" \"tj\"\n\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.str(array(letters), array(letters), \"!=\")\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE\n\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n##           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## January     4   7   5   6   5   5   5   6   7   7   7   7\n## February    7   5   6   7   6   7   7   7   7   8   8   7\n## March       4   5   2   4   3   5   5   5   5   4   5   4\n## April       5   5   4   2   5   5   4   4   5   5   5   5\n## May         2   3   1   3   0   3   3   3   3   3   3   3\n## June        2   4   4   4   4   1   2   3   4   4   4   4\n## July        3   4   4   4   3   2   1   3   4   4   4   4\n## August      6   6   6   5   6   5   5   3   6   5   6   6\n## September   9   7   8   7   9   9   9   9   6   8   9   8\n## October     7   6   6   6   7   7   7   7   6   4   6   6\n## November    8   6   7   7   8   8   8   8   7   8   5   7\n## December    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/outer/bc.str.html#broadcasted-string-operations",
    "href": "man/outer/bc.str.html#broadcasted-string-operations",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of typee character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2]\n##  [1,] \"aa\" \"ka\"\n##  [2,] \"bb\" \"lb\"\n##  [3,] \"cc\" \"mc\"\n##  [4,] \"dd\" \"nd\"\n##  [5,] \"ee\" \"oe\"\n##  [6,] \"ff\" \"pf\"\n##  [7,] \"gg\" \"qg\"\n##  [8,] \"hh\" \"rh\"\n##  [9,] \"ii\" \"si\"\n## [10,] \"jj\" \"tj\"\n\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.str(array(letters), array(letters), \"!=\")\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE\n\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n##           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## January     4   7   5   6   5   5   5   6   7   7   7   7\n## February    7   5   6   7   6   7   7   7   7   8   8   7\n## March       4   5   2   4   3   5   5   5   5   4   5   4\n## April       5   5   4   2   5   5   4   4   5   5   5   5\n## May         2   3   1   3   0   3   3   3   3   3   3   3\n## June        2   4   4   4   4   1   2   3   4   4   4   4\n## July        3   4   4   4   3   2   1   3   4   4   4   4\n## August      6   6   6   5   6   5   5   3   6   5   6   6\n## September   9   7   8   7   9   9   9   9   6   8   9   8\n## October     7   6   6   6   7   7   7   7   6   4   6   6\n## November    8   6   7   7   8   8   8   8   7   8   5   7\n## December    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/outer/bc.i.html",
    "href": "man/outer/bc.i.html",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  138  847  905  266  201  465  558  841  163\n##  [2,]   89  276  505   18  848  253  348  179  979\n##  [3,]   28   29   79  361  758  824  678  300  529\n##  [4,]  373  507  479  813  735  930  492  957  316\n##  [5,]  990  875  430  920  100  332  100  709  405\n##  [6,]  350  185  267   81  575  506   97  273  773\n##  [7,]  779  676  776  534  951  380  573  532  575\n##  [8,]  356  690  702  942  761  222  543  527  485\n##  [9,]  232  753  423  882  188  139  309  230  991\n## [10,]  643  700  950  371  553  983  144  431  498\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  277  196  200  758  442  534  448  131  345\n##  [2,]  137  826   17  265  558  778  445  371  417\n##  [3,]  997  770  239  362  882  644  729  687  353\n##  [4,]  693  331  989  377  702  637  645  436  417\n##  [5,]  527  313  242    8  401  444  338  664  755\n##  [6,]  397   19  380  519  588  457  286   70  573\n##  [7,]  175  277   12  879  949  855  760  283   71\n##  [8,]  204  698   37  402  674  778  200  854  889\n##  [9,]  247  351  884  853  371  220  469  952  700\n## [10,]  929 1008  791  932  395  799  898  389  176\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  455   85  424  273  712  468  135  570  165\n##  [2,]  552  668  356  508  611  384  424  797  129\n##  [3,]   50  177  288   67  186  712    9  648  866\n##  [4,]  535  605  865  939  459  371  908  561  599\n##  [5,]  772  827  229  966  478  445  361  771  427\n##  [6,]  111  306  912  837  293  751  385  759  671\n##  [7,]  502  762  330  185  105  295  412  425  756\n##  [8,]  692  275  481  103  601  897  940  410  882\n##  [9,]  826  523  965  116  408  795  832  112  507\n## [10,]  567  550 1007  876  441  410   62  940  748\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  745  722  792  187   40  797  856  195  911\n##  [2,]  424  612  683  967  295  108  682  250  797\n##  [3,]  208  125  123   60  602  475  890  328  517\n##  [4,]  147  796  714  572  803   66   90  388  217\n##  [5,]  357  967  252  504  688  175  418  277  708\n##  [6,]  207   96  601  776  586  885  881  265  732\n##  [7,]    8  466  367   91  348  835  104  633  900\n##  [8,]  564  540  979  162   68  140  912  784  460\n##  [9,]  124  828  934  613  558  602  186  230  939\n## [10,]  650  117  617   36  424   36  206  292  104\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  664   73  815  275  591   13  598  464  821\n##  [2,]  358  406  158  430  714  162  129  314  334\n##  [3,]  406  775  757  196  543  184  213  784  154\n##  [4,]  549  757  788  208  200  131  803  361  138\n##  [5,]  951  495  139  745  587  260  466  446  652\n##  [6,]  917  789  456  124  506   71  699  679  766\n##  [7,]  435  732  407  128  638  683  692  643  212\n##  [8,]  407  336  686  842  886  523  787  597  842\n##  [9,]  824   23  928  221  855  147  224  904   75\n## [10,]  954  679  800  387  881  286  101  958  259\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  913  171  654    9  111  970  169  128  849\n##  [2,]  781  744  349  903  740  278  706  372  933\n##  [3,]  932  161   14  370  998  450  970  343  942\n##  [4,]  136  666  386  409  683  143  910  279  615\n##  [5,]  144  618   84  908  482  384  527  979  595\n##  [6,]  985   66  418  975  300  206  109  933   79\n##  [7,]  970  336  244  200  739  882   63  713  440\n##  [8,]  841  371  802   25  424  105  340  314  542\n##  [9,]  161  282  276   66  502  869  351  788  316\n## [10,]  734  597  725  792  420  667  657  890  974\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  763  711  932   19  843  526  163  971  460\n##  [2,]  791  637  706  779  168  353  581  453  975\n##  [3,]  611  246   14  490  709  801  318  517  735\n##  [4,]  421  164  750  745    5  322  262  106  117\n##  [5,]  983  365  341  844  676  627  241  749  122\n##  [6,]  865  358  781  192  859  846  409   94  500\n##  [7,]  374  307  998  180  860  313   46  670  836\n##  [8,]  546  433  600  628   14  151   69  125  156\n##  [9,]  693  183  684   48  495  319  244  540  838\n## [10,]  352  612  661  432  939  580  405  159  686\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  832  434  383  602  472   52  648  861   66\n##  [2,]  321  262  331  138  275  548  122  669   52\n##  [3,]  422   59   90  397  453  395  390  385  282\n##  [4,]  756  120  339  548  430  515 1002  935  877\n##  [5,]  613  683  265  343  213  110  450  450  763\n##  [6,]  510  729  864  508   57  979  135   74  556\n##  [7,]  180  806  186  167  560  686  361   73  959\n##  [8,]  427  240  602  144  906  345  919  820  716\n##  [9,]  767  308  527  306 1000  648  137  828  394\n## [10,]  111  209  818  598  660  557  180  530  246\nbc.i(x, y, \"-\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  136  845  903  264  199  463  556  839  161\n##  [2,]   85  272  501   14  844  249  344  175  975\n##  [3,]   22   23   73  355  752  818  672  294  523\n##  [4,]  365  499  471  805  727  922  484  949  308\n##  [5,]  980  865  420  910   90  322   90  699  395\n##  [6,]  338  173  255   69  563  494   85  261  761\n##  [7,]  765  662  762  520  937  366  559  518  561\n##  [8,]  340  674  686  926  745  206  527  511  469\n##  [9,]  214  735  405  864  170  121  291  212  973\n## [10,]  623  680  930  351  533  963  124  411  478\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  275  194  198  756  440  532  446  129  343\n##  [2,]  133  822   13  261  554  774  441  367  413\n##  [3,]  991  764  233  356  876  638  723  681  347\n##  [4,]  685  323  981  369  694  629  637  428  409\n##  [5,]  517  303  232   -2  391  434  328  654  745\n##  [6,]  385    7  368  507  576  445  274   58  561\n##  [7,]  161  263   -2  865  935  841  746  269   57\n##  [8,]  188  682   21  386  658  762  184  838  873\n##  [9,]  229  333  866  835  353  202  451  934  682\n## [10,]  909  988  771  912  375  779  878  369  156\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  453   83  422  271  710  466  133  568  163\n##  [2,]  548  664  352  504  607  380  420  793  125\n##  [3,]   44  171  282   61  180  706    3  642  860\n##  [4,]  527  597  857  931  451  363  900  553  591\n##  [5,]  762  817  219  956  468  435  351  761  417\n##  [6,]   99  294  900  825  281  739  373  747  659\n##  [7,]  488  748  316  171   91  281  398  411  742\n##  [8,]  676  259  465   87  585  881  924  394  866\n##  [9,]  808  505  947   98  390  777  814   94  489\n## [10,]  547  530  987  856  421  390   42  920  728\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  743  720  790  185   38  795  854  193  909\n##  [2,]  420  608  679  963  291  104  678  246  793\n##  [3,]  202  119  117   54  596  469  884  322  511\n##  [4,]  139  788  706  564  795   58   82  380  209\n##  [5,]  347  957  242  494  678  165  408  267  698\n##  [6,]  195   84  589  764  574  873  869  253  720\n##  [7,]   -6  452  353   77  334  821   90  619  886\n##  [8,]  548  524  963  146   52  124  896  768  444\n##  [9,]  106  810  916  595  540  584  168  212  921\n## [10,]  630   97  597   16  404   16  186  272   84\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  662   71  813  273  589   11  596  462  819\n##  [2,]  354  402  154  426  710  158  125  310  330\n##  [3,]  400  769  751  190  537  178  207  778  148\n##  [4,]  541  749  780  200  192  123  795  353  130\n##  [5,]  941  485  129  735  577  250  456  436  642\n##  [6,]  905  777  444  112  494   59  687  667  754\n##  [7,]  421  718  393  114  624  669  678  629  198\n##  [8,]  391  320  670  826  870  507  771  581  826\n##  [9,]  806    5  910  203  837  129  206  886   57\n## [10,]  934  659  780  367  861  266   81  938  239\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  911  169  652    7  109  968  167  126  847\n##  [2,]  777  740  345  899  736  274  702  368  929\n##  [3,]  926  155    8  364  992  444  964  337  936\n##  [4,]  128  658  378  401  675  135  902  271  607\n##  [5,]  134  608   74  898  472  374  517  969  585\n##  [6,]  973   54  406  963  288  194   97  921   67\n##  [7,]  956  322  230  186  725  868   49  699  426\n##  [8,]  825  355  786    9  408   89  324  298  526\n##  [9,]  143  264  258   48  484  851  333  770  298\n## [10,]  714  577  705  772  400  647  637  870  954\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  761  709  930   17  841  524  161  969  458\n##  [2,]  787  633  702  775  164  349  577  449  971\n##  [3,]  605  240    8  484  703  795  312  511  729\n##  [4,]  413  156  742  737   -3  314  254   98  109\n##  [5,]  973  355  331  834  666  617  231  739  112\n##  [6,]  853  346  769  180  847  834  397   82  488\n##  [7,]  360  293  984  166  846  299   32  656  822\n##  [8,]  530  417  584  612   -2  135   53  109  140\n##  [9,]  675  165  666   30  477  301  226  522  820\n## [10,]  332  592  641  412  919  560  385  139  666\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  830  432  381  600  470   50  646  859   64\n##  [2,]  317  258  327  134  271  544  118  665   48\n##  [3,]  416   53   84  391  447  389  384  379  276\n##  [4,]  748  112  331  540  422  507  994  927  869\n##  [5,]  603  673  255  333  203  100  440  440  753\n##  [6,]  498  717  852  496   45  967  123   62  544\n##  [7,]  166  792  172  153  546  672  347   59  945\n##  [8,]  411  224  586  128  890  329  903  804  700\n##  [9,]  749  290  509  288  982  630  119  810  376\n## [10,]   91  189  798  578  640  537  160  510  226\nbc.i(x, y, \"*\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  137  846  904  265  200  464  557  840  162\n##  [2,]  174  548 1006   32 1692  502  692  354 1954\n##  [3,]   75   78  228 1074 2265 2463 2025  891 1578\n##  [4,] 1476 2012 1900 3236 2924 3704 1952 3812 1248\n##  [5,] 4925 4350 2125 4575  475 1635  475 3520 2000\n##  [6,] 2064 1074 1566  450 3414 3000  546 1602 4602\n##  [7,] 5404 4683 5383 3689 6608 2611 3962 3675 3976\n##  [8,] 2784 5456 5552 7472 6024 1712 4280 4152 3816\n##  [9,] 2007 6696 3726 7857 1611 1170 2700 1989 8838\n## [10,] 6330 6900 9400 3610 5430 9730 1340 4210 4880\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  276  195  199  757  441  533  447  130  344\n##  [2,]  270 1648   30  526 1112 1552  886  738  830\n##  [3,] 2982 2301  708 1077 2637 1923 2178 2052 1050\n##  [4,] 2756 1308 3940 1492 2792 2532 2564 1728 1652\n##  [5,] 2610 1540 1185   15 1980 2195 1665 3295 3750\n##  [6,] 2346   78 2244 3078 3492 2706 1680  384 3402\n##  [7,] 1176 1890   35 6104 6594 5936 5271 1932  448\n##  [8,] 1568 5520  232 3152 5328 6160 1536 6768 7048\n##  [9,] 2142 3078 7875 7596 3258 1899 4140 8487 6219\n## [10,] 9190 9980 7810 9220 3850 7890 8880 3790 1660\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  454   84  423  272  711  467  134  569  164\n##  [2,] 1100 1332  708 1012 1218  764  844 1590  254\n##  [3,]  141  522  855  192  549 2127   18 1935 2589\n##  [4,] 2124 2404 3444 3740 1820 1468 3616 2228 2380\n##  [5,] 3835 4110 1120 4805 2365 2200 1780 3830 2110\n##  [6,]  630 1800 5436 4986 1722 4470 2274 4518 3990\n##  [7,] 3465 5285 2261 1246  686 2016 2835 2926 5243\n##  [8,] 5472 2136 3784  760 4744 7112 7456 3216 6992\n##  [9,] 7353 4626 8604  963 3591 7074 7407  927 4482\n## [10,] 5570 5400 9970 8660 4310 4000  520 9300 7380\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  744  721  791  186   39  796  855  194  910\n##  [2,]  844 1220 1362 1930  586  212 1360  496 1590\n##  [3,]  615  366  360  171 1797 1416 2661  975 1542\n##  [4,]  572 3168 2840 2272 3196  248  344 1536  852\n##  [5,] 1760 4810 1235 2495 3415  850 2065 1360 3515\n##  [6,] 1206  540 3570 4620 3480 5274 5250 1554 4356\n##  [7,]    7 3213 2520  588 2387 5796  679 4382 6251\n##  [8,] 4448 4256 7768 1232  480 1056 7232 6208 3616\n##  [9,] 1035 7371 8325 5436 4941 5337 1593 1989 8370\n## [10,] 6400 1070 6070  260 4140  260 1960 2820  940\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  663   72  814  274  590   12  597  463  820\n##  [2,]  712  808  312  856 1424  320  254  624  664\n##  [3,] 1209 2316 2262  579 1620  543  630 2343  453\n##  [4,] 2180 3012 3136  816  784  508 3196 1428  536\n##  [5,] 4730 2450  670 3700 2910 1275 2305 2205 3235\n##  [6,] 5466 4698 2700  708 3000  390 4158 4038 4560\n##  [7,] 2996 5075 2800  847 4417 4732 4795 4452 1435\n##  [8,] 3192 2624 5424 6672 7024 4120 6232 4712 6672\n##  [9,] 7335  126 8271 1908 7614 1242 1935 8055  594\n## [10,] 9440 6690 7900 3770 8710 2760  910 9480 2490\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  912  170  653    8  110  969  168  127  848\n##  [2,] 1558 1484  694 1802 1476  552 1408  740 1862\n##  [3,] 2787  474   33 1101 2985 1341 2901 1020 2817\n##  [4,]  528 2648 1528 1620 2716  556 3624 1100 2444\n##  [5,]  695 3065  395 4515 2385 1895 2610 4870 2950\n##  [6,] 5874  360 2472 5814 1764 1200  618 5562  438\n##  [7,] 6741 2303 1659 1351 5124 6125  392 4942 3031\n##  [8,] 6664 2904 6352  136 3328  776 2656 2448 4272\n##  [9,] 1368 2457 2403  513 4437 7740 3078 7011 2763\n## [10,] 7240 5870 7150 7820 4100 6570 6470 8800 9640\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  762  710  931   18  842  525  162  970  459\n##  [2,] 1578 1270 1408 1554  332  702 1158  902 1946\n##  [3,] 1824  729   33 1461 2118 2394  945 1542 2196\n##  [4,] 1668  640 2984 2964    4 1272 1032  408  452\n##  [5,] 4890 1800 1680 4195 3355 3110 1180 3720  585\n##  [6,] 5154 2112 4650 1116 5118 5040 2418  528 2964\n##  [7,] 2569 2100 6937 1211 5971 2142  273 4641 5803\n##  [8,] 4304 3400 4736 4960   48 1144  488  936 1184\n##  [9,] 6156 1566 6075  351 4374 2790 2115 4779 7461\n## [10,] 3420 6020 6510 4220 9290 5700 3950 1490 6760\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  831  433  382  601  471   51  647  860   65\n##  [2,]  638  520  658  272  546 1092  240 1334  100\n##  [3,] 1257  168  261 1182 1350 1176 1161 1146  837\n##  [4,] 3008  464 1340 2176 1704 2044 3992 3724 3492\n##  [5,] 3040 3390 1300 1690 1040  525 2225 2225 3790\n##  [6,] 3024 4338 5148 3012  306 5838  774  408 3300\n##  [7,] 1211 5593 1253 1120 3871 4753 2478  462 6664\n##  [8,] 3352 1856 4752 1088 7184 2696 7288 6496 5664\n##  [9,] 6822 2691 4662 2673 8919 5751 1152 7371 3465\n## [10,] 1010 1990 8080 5880 6500 5470 1700 5200 2360\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    2    2    1    2    1    1\n##  [3,]    1    1    1    1    1    1    3    3    1\n##  [4,]    1    1    1    1    1    2    4    1    4\n##  [5,]    5    5    5    5    5    1    5    1    5\n##  [6,]    2    1    3    3    1    2    1    3    1\n##  [7,]    1    1    1    1    1    1    1    7    1\n##  [8,]    4    2    2    2    1    2    1    1    1\n##  [9,]    1    3    9    9    1    1    3    1    1\n## [10,]    1   10   10    1    1    1    2    1    2\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    1    2    2    1    1    1\n##  [3,]    1    1    1    1    3    1    3    3    1\n##  [4,]    1    1    1    1    2    1    1    4    1\n##  [5,]    1    1    1    1    1    1    1    1    5\n##  [6,]    1    1    2    3    6    1    2    2    3\n##  [7,]    7    1    1    1    1    1    1    1    1\n##  [8,]    4    2    1    2    2    2    8    2    1\n##  [9,]    1    9    1    1    1    1    1    1    1\n## [10,]    1    2    1    2    5    1    2    1    2\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    2    2    1    2    2    1    1\n##  [3,]    1    3    3    1    3    1    3    3    1\n##  [4,]    1    1    1    1    1    1    4    1    1\n##  [5,]    1    1    1    1    1    5    1    1    1\n##  [6,]    3    6    6    3    1    1    1    3    1\n##  [7,]    1    1    1    1    7    1    1    1    7\n##  [8,]    4    1    1    1    1    1    4    2    2\n##  [9,]    1    1    1    1    3    3    1    1    3\n## [10,]    1   10    1    2    1   10    2   10    2\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    1    1    1    2    2    2    1\n##  [3,]    1    1    3    3    1    1    1    1    1\n##  [4,]    1    4    2    4    1    2    2    4    1\n##  [5,]    1    1    1    1    1    5    1    1    1\n##  [6,]    3    6    1    2    2    3    1    1    6\n##  [7,]    1    1    1    7    1    1    1    1    1\n##  [8,]    4    4    1    2    4    4    8    8    4\n##  [9,]    1    9    1    1    9    1    3    1    3\n## [10,]   10    1    1    2    2    2    2    2    2\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    2    2    2    2    1    2    2\n##  [3,]    1    1    1    1    3    1    3    1    1\n##  [4,]    1    1    4    4    4    1    1    1    2\n##  [5,]    1    5    1    5    1    5    1    1    1\n##  [6,]    1    3    6    2    2    1    3    1    2\n##  [7,]    1    1    1    1    1    1    1    1    1\n##  [8,]    1    8    2    2    2    1    1    1    2\n##  [9,]    1    1    1    1    9    3    1    1    3\n## [10,]    2    1   10    1    1    2    1    2    1\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    1    2    2    2    2    1\n##  [3,]    1    1    1    1    1    3    1    1    3\n##  [4,]    4    2    2    1    1    1    2    1    1\n##  [5,]    1    1    1    1    1    1    1    1    5\n##  [6,]    1    6    2    3    6    2    1    3    1\n##  [7,]    1    7    1    1    1    7    7    1    1\n##  [8,]    1    1    2    1    8    1    4    2    2\n##  [9,]    1    3    3    3    1    1    9    1    1\n## [10,]    2    1    5    2   10    1    1   10    2\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    1    2    1    2    1    1    1    1\n##  [3,]    1    3    1    1    1    3    3    1    3\n##  [4,]    1    4    2    1    1    2    2    2    1\n##  [5,]    1    5    1    1    1    1    1    1    1\n##  [6,]    1    2    1    6    1    6    1    2    2\n##  [7,]    1    1    1    1    1    1    1    1    1\n##  [8,]    2    1    8    4    2    1    1    1    4\n##  [9,]    9    3    9    3    9    1    1    9    1\n## [10,]    2    2    1    2    1   10    5    1    2\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    2    1    2    2    1    2\n##  [3,]    1    1    3    1    3    1    3    1    3\n##  [4,]    4    4    1    4    2    1    2    1    1\n##  [5,]    1    1    5    1    1    5    5    5    1\n##  [6,]    6    3    6    2    3    1    3    2    2\n##  [7,]    1    1    1    1    7    7    1    1    7\n##  [8,]    1    8    2    8    2    1    1    4    4\n##  [9,]    1    1    1    9    1    9    1    9    1\n## [10,]    1    1    2    2   10    1   10   10    2\nbc.i(x, y, \"^\")\n## , , 1\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.370000e+02 8.460000e+02 9.040000e+02 2.650000e+02          200\n##  [2,] 7.569000e+03 7.507600e+04 2.530090e+05 2.560000e+02       715716\n##  [3,] 1.562500e+04 1.757600e+04 4.389760e+05 4.588271e+07    430368875\n##  [4,] 1.853982e+10 6.401355e+10 5.090664e+10 4.283454e+11 285541678321\n##  [5,] 9.272165e+14 4.984209e+14 1.386579e+13 6.413653e+14   7737809375\n##  [6,] 1.657107e+15 3.289411e+13 3.161135e+14 1.779785e+11          Inf\n##  [7,]          Inf          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.640000e+02          557 8.400000e+02 1.620000e+02\n##  [2,] 6.300100e+04       119716 3.132900e+04 9.545290e+05\n##  [3,] 5.533877e+08    307546875 2.619807e+07 1.455316e+08\n##  [4,] 7.352651e+11  56712564736 8.248436e+11 9.475854e+09\n##  [5,] 3.738856e+12   7737809375 1.729272e+14 1.024000e+13\n##  [6,]          Inf 567869252041 3.622994e+14          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 2\n## \n##               [,1]         [,2]         [,3]        [,4]         [,5]\n##  [1,] 2.760000e+02 1.950000e+02 1.990000e+02         757 4.410000e+02\n##  [2,] 1.822500e+04 6.789760e+05 2.250000e+02       69169 3.091360e+05\n##  [3,] 9.821078e+08 4.512177e+08 1.314426e+07    46268279 6.791514e+08\n##  [4,] 2.253600e+11 1.143381e+10 9.413366e+11 19356878641 2.373677e+11\n##  [5,] 3.875721e+13 2.771747e+12 7.477247e+11         243 9.738138e+12\n##  [6,] 3.573226e+15 4.826809e+06 2.736715e+15         Inf          Inf\n##  [7,] 3.777156e+15          Inf 7.812500e+04         Inf          Inf\n##  [8,]          Inf          Inf 5.002464e+11         Inf          Inf\n##  [9,]          Inf          Inf          Inf         Inf          Inf\n## [10,]          Inf          Inf          Inf         Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 5.330000e+02 4.470000e+02 1.300000e+02 3.440000e+02\n##  [2,] 6.021760e+05 1.962490e+05 1.361610e+05 1.722250e+05\n##  [3,] 2.633747e+08 3.826572e+08 3.200135e+08 4.287500e+07\n##  [4,] 1.605517e+11 1.688232e+11 3.482852e+10 2.909378e+10\n##  [5,] 1.630507e+13 4.094691e+12 1.242874e+14 2.373047e+14\n##  [6,] 8.415099e+15 4.818903e+14 6.871948e+10          Inf\n##  [7,]          Inf          Inf          Inf 4.398047e+12\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 3\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 4.540000e+02 8.400000e+01          423 2.720000e+02 7.110000e+02\n##  [2,] 3.025000e+05 4.435560e+05       125316 2.560360e+05 3.708810e+05\n##  [3,] 1.038230e+05 5.268024e+06     23149125 2.621440e+05 6.128487e+06\n##  [4,] 7.950201e+10 1.304662e+11 549556825041 7.642694e+11 4.285935e+10\n##  [5,] 2.654464e+14 3.752832e+14 563949338624 8.196283e+14 2.367586e+13\n##  [6,] 1.340096e+12 7.290000e+14          Inf          Inf 5.588450e+14\n##  [7,]          Inf          Inf          Inf 5.661611e+15 8.681255e+13\n##  [8,]          Inf          Inf          Inf 6.634204e+15          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.670000e+02 1.340000e+02 5.690000e+02 1.640000e+02\n##  [2,] 1.459240e+05 1.780840e+05 6.320250e+05 1.612900e+04\n##  [3,] 3.564008e+08 2.160000e+02 2.683361e+08 6.427356e+08\n##  [4,] 1.814113e+10 6.678420e+11 9.625444e+10 1.253337e+11\n##  [5,] 1.649162e+13 5.718077e+12 2.637205e+14 1.338327e+13\n##  [6,]          Inf 2.963707e+15          Inf          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 4\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.440000e+02 7.210000e+02          791 1.860000e+02 3.900000e+01\n##  [2,] 1.780840e+05 3.721000e+05       463761 9.312250e+05 8.584900e+04\n##  [3,] 8.615125e+06 1.815848e+06      1728000 1.851930e+05 2.149218e+08\n##  [4,] 4.181616e+08 3.934601e+11 254116810000 1.040862e+11 4.075558e+11\n##  [5,] 5.403975e+12 8.239016e+14 919358226007 3.093875e+13 1.486290e+14\n##  [6,] 6.594416e+13 5.314410e+11          Inf          Inf          Inf\n##  [7,] 1.000000e+00          Inf          Inf 2.950903e+13          Inf\n##  [8,]          Inf          Inf          Inf          Inf 1.679616e+14\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf 1.411671e+14          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 7.960000e+02 8.550000e+02 1.940000e+02 9.100000e+02\n##  [2,] 1.123600e+04 4.624000e+05 6.150400e+04 6.320250e+05\n##  [3,] 1.051540e+08 6.978641e+08 3.432812e+07 1.357967e+08\n##  [4,] 1.477634e+07 5.470082e+07 2.174327e+10 2.058346e+09\n##  [5,] 1.419857e+11 1.201573e+13 1.488828e+12 1.717025e+14\n##  [6,]          Inf          Inf 3.018551e+14          Inf\n##  [7,]          Inf 8.079828e+13          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,] 1.411671e+14          Inf          Inf          Inf\n## \n## , , 5\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 6.630000e+02 7.200000e+01 8.140000e+02 2.740000e+02 5.900000e+02\n##  [2,] 1.267360e+05 1.632160e+05 2.433600e+04 1.831840e+05 5.069440e+05\n##  [3,] 6.545083e+07 4.600996e+08 4.286611e+08 7.189057e+06 1.574640e+08\n##  [4,] 8.822385e+10 3.214992e+11 3.778020e+11 1.731891e+09 1.475789e+09\n##  [5,] 7.576274e+14 2.824752e+13 4.320400e+10 2.219007e+14 6.677516e+13\n##  [6,]          Inf          Inf 8.303766e+15 2.699554e+12          Inf\n##  [7,]          Inf          Inf          Inf 3.797498e+14          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf 2.066105e+10          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.200000e+01 5.970000e+02 4.630000e+02 8.200000e+02\n##  [2,] 2.560000e+04 1.612900e+04 9.734400e+04 1.102240e+05\n##  [3,] 5.929741e+06 9.261000e+06 4.763795e+08 3.442951e+06\n##  [4,] 2.601446e+08 4.075558e+11 1.624325e+10 3.224179e+08\n##  [5,] 1.078204e+12 2.082115e+13 1.667988e+13 1.133761e+14\n##  [6,] 7.541889e+10          Inf          Inf          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 6\n## \n##              [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,]         912 1.700000e+02 6.530000e+02 8.000000e+00 1.100000e+02\n##  [2,]      606841 5.505640e+05 1.204090e+05 8.118010e+05 5.446440e+05\n##  [3,]   801765089 3.944312e+06 1.331000e+03 4.943086e+07 9.850749e+08\n##  [4,]   303595776 1.920578e+11 2.129381e+10 2.690420e+10 2.125588e+11\n##  [5,] 51888844699 8.655704e+13 3.077056e+09 6.003973e+14 2.469403e+13\n##  [6,]         Inf 4.665600e+10 4.890838e+15          Inf 6.457791e+14\n##  [7,]         Inf          Inf          Inf          Inf          Inf\n##  [8,]         Inf          Inf          Inf 6.975757e+09          Inf\n##  [9,]         Inf          Inf          Inf 6.351462e+15          Inf\n## [10,]         Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 9.690000e+02 1.680000e+02 1.270000e+02 8.480000e+02\n##  [2,] 7.617600e+04 4.956160e+05 1.369000e+05 8.667610e+05\n##  [3,] 8.931462e+07 9.042311e+08 3.930400e+07 8.279360e+08\n##  [4,] 3.733010e+08 6.737717e+11 5.719141e+09 1.393686e+11\n##  [5,] 7.819807e+12 3.875721e+13 8.765865e+14 7.149243e+13\n##  [6,] 6.400000e+13 1.194052e+12          Inf 1.513342e+11\n##  [7,]          Inf 1.727095e+12          Inf          Inf\n##  [8,] 7.837434e+15          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 7\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.620000e+02 7.100000e+02 9.310000e+02 1.800000e+01 8.420000e+02\n##  [2,] 6.225210e+05 4.032250e+05 4.956160e+05 6.037290e+05 2.755600e+04\n##  [3,] 2.247557e+08 1.434891e+07 1.331000e+03 1.155013e+08 3.518958e+08\n##  [4,] 3.023738e+10 6.553600e+08 3.097101e+11 3.014899e+11 1.000000e+00\n##  [5,] 8.947347e+14 6.046618e+12 4.282490e+12 4.157285e+14 1.360231e+14\n##  [6,]          Inf 1.902199e+15          Inf 4.140737e+13          Inf\n##  [7,]          Inf          Inf          Inf 4.637914e+15          Inf\n##  [8,]          Inf          Inf          Inf          Inf 1.679616e+06\n##  [9,]          Inf          Inf          Inf 2.087284e+14          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]        [,9]\n##  [1,] 5.250000e+02 1.620000e+02 9.700000e+02         459\n##  [2,] 1.232010e+05 3.352410e+05 2.034010e+05      946729\n##  [3,] 5.081696e+08 3.125587e+07 1.357967e+08   392223168\n##  [4,] 1.022606e+10 4.430766e+09 1.082432e+08   163047361\n##  [5,] 9.310048e+13 7.320825e+11 2.279632e+14 21924480357\n##  [6,]          Inf 4.283811e+15 4.644041e+11         Inf\n##  [7,]          Inf 1.372310e+11          Inf         Inf\n##  [8,]          Inf 1.917073e+14          Inf         Inf\n##  [9,]          Inf          Inf          Inf         Inf\n## [10,]          Inf          Inf          Inf         Inf\n## \n## , , 8\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 8.310000e+02 4.330000e+02 3.820000e+02 6.010000e+02          471\n##  [2,] 1.017610e+05 6.760000e+04 1.082410e+05 1.849600e+04        74529\n##  [3,] 7.356006e+07 1.756160e+05 6.585030e+05 6.116298e+07     91125000\n##  [4,] 3.197948e+11 1.810639e+08 1.259445e+10 8.757812e+10  32933538576\n##  [5,] 8.308410e+13 1.432678e+14 1.188138e+12 4.411472e+12 389328928768\n##  [6,]          Inf          Inf          Inf          Inf  17596287801\n##  [7,] 4.637914e+15          Inf 5.888046e+15 2.684355e+15          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##              [,6]         [,7]         [,8]         [,9]\n##  [1,]          51 6.470000e+02 8.600000e+02 6.500000e+01\n##  [2,]      298116 1.440000e+04 4.448890e+05 2.500000e+03\n##  [3,]    60236288 5.796060e+07 5.574297e+07 2.171764e+07\n##  [4,] 68184176641 9.920240e+11 7.512746e+11 5.808406e+11\n##  [5,] 12762815625 1.745019e+13 1.745019e+13 2.502338e+14\n##  [6,]         Inf 4.608274e+12 9.886748e+10          Inf\n##  [7,]         Inf          Inf 5.455161e+12          Inf\n##  [8,]         Inf          Inf          Inf          Inf\n##  [9,]         Inf          Inf          Inf          Inf\n## [10,]         Inf          Inf          Inf          Inf\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.i(x, y, \"&lt;\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"&gt;\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE  TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE FALSE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.i(x, y, \"&lt;=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"&gt;=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE  TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE FALSE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "href": "man/outer/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  138  847  905  266  201  465  558  841  163\n##  [2,]   89  276  505   18  848  253  348  179  979\n##  [3,]   28   29   79  361  758  824  678  300  529\n##  [4,]  373  507  479  813  735  930  492  957  316\n##  [5,]  990  875  430  920  100  332  100  709  405\n##  [6,]  350  185  267   81  575  506   97  273  773\n##  [7,]  779  676  776  534  951  380  573  532  575\n##  [8,]  356  690  702  942  761  222  543  527  485\n##  [9,]  232  753  423  882  188  139  309  230  991\n## [10,]  643  700  950  371  553  983  144  431  498\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  277  196  200  758  442  534  448  131  345\n##  [2,]  137  826   17  265  558  778  445  371  417\n##  [3,]  997  770  239  362  882  644  729  687  353\n##  [4,]  693  331  989  377  702  637  645  436  417\n##  [5,]  527  313  242    8  401  444  338  664  755\n##  [6,]  397   19  380  519  588  457  286   70  573\n##  [7,]  175  277   12  879  949  855  760  283   71\n##  [8,]  204  698   37  402  674  778  200  854  889\n##  [9,]  247  351  884  853  371  220  469  952  700\n## [10,]  929 1008  791  932  395  799  898  389  176\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  455   85  424  273  712  468  135  570  165\n##  [2,]  552  668  356  508  611  384  424  797  129\n##  [3,]   50  177  288   67  186  712    9  648  866\n##  [4,]  535  605  865  939  459  371  908  561  599\n##  [5,]  772  827  229  966  478  445  361  771  427\n##  [6,]  111  306  912  837  293  751  385  759  671\n##  [7,]  502  762  330  185  105  295  412  425  756\n##  [8,]  692  275  481  103  601  897  940  410  882\n##  [9,]  826  523  965  116  408  795  832  112  507\n## [10,]  567  550 1007  876  441  410   62  940  748\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  745  722  792  187   40  797  856  195  911\n##  [2,]  424  612  683  967  295  108  682  250  797\n##  [3,]  208  125  123   60  602  475  890  328  517\n##  [4,]  147  796  714  572  803   66   90  388  217\n##  [5,]  357  967  252  504  688  175  418  277  708\n##  [6,]  207   96  601  776  586  885  881  265  732\n##  [7,]    8  466  367   91  348  835  104  633  900\n##  [8,]  564  540  979  162   68  140  912  784  460\n##  [9,]  124  828  934  613  558  602  186  230  939\n## [10,]  650  117  617   36  424   36  206  292  104\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  664   73  815  275  591   13  598  464  821\n##  [2,]  358  406  158  430  714  162  129  314  334\n##  [3,]  406  775  757  196  543  184  213  784  154\n##  [4,]  549  757  788  208  200  131  803  361  138\n##  [5,]  951  495  139  745  587  260  466  446  652\n##  [6,]  917  789  456  124  506   71  699  679  766\n##  [7,]  435  732  407  128  638  683  692  643  212\n##  [8,]  407  336  686  842  886  523  787  597  842\n##  [9,]  824   23  928  221  855  147  224  904   75\n## [10,]  954  679  800  387  881  286  101  958  259\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  913  171  654    9  111  970  169  128  849\n##  [2,]  781  744  349  903  740  278  706  372  933\n##  [3,]  932  161   14  370  998  450  970  343  942\n##  [4,]  136  666  386  409  683  143  910  279  615\n##  [5,]  144  618   84  908  482  384  527  979  595\n##  [6,]  985   66  418  975  300  206  109  933   79\n##  [7,]  970  336  244  200  739  882   63  713  440\n##  [8,]  841  371  802   25  424  105  340  314  542\n##  [9,]  161  282  276   66  502  869  351  788  316\n## [10,]  734  597  725  792  420  667  657  890  974\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  763  711  932   19  843  526  163  971  460\n##  [2,]  791  637  706  779  168  353  581  453  975\n##  [3,]  611  246   14  490  709  801  318  517  735\n##  [4,]  421  164  750  745    5  322  262  106  117\n##  [5,]  983  365  341  844  676  627  241  749  122\n##  [6,]  865  358  781  192  859  846  409   94  500\n##  [7,]  374  307  998  180  860  313   46  670  836\n##  [8,]  546  433  600  628   14  151   69  125  156\n##  [9,]  693  183  684   48  495  319  244  540  838\n## [10,]  352  612  661  432  939  580  405  159  686\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  832  434  383  602  472   52  648  861   66\n##  [2,]  321  262  331  138  275  548  122  669   52\n##  [3,]  422   59   90  397  453  395  390  385  282\n##  [4,]  756  120  339  548  430  515 1002  935  877\n##  [5,]  613  683  265  343  213  110  450  450  763\n##  [6,]  510  729  864  508   57  979  135   74  556\n##  [7,]  180  806  186  167  560  686  361   73  959\n##  [8,]  427  240  602  144  906  345  919  820  716\n##  [9,]  767  308  527  306 1000  648  137  828  394\n## [10,]  111  209  818  598  660  557  180  530  246\nbc.i(x, y, \"-\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  136  845  903  264  199  463  556  839  161\n##  [2,]   85  272  501   14  844  249  344  175  975\n##  [3,]   22   23   73  355  752  818  672  294  523\n##  [4,]  365  499  471  805  727  922  484  949  308\n##  [5,]  980  865  420  910   90  322   90  699  395\n##  [6,]  338  173  255   69  563  494   85  261  761\n##  [7,]  765  662  762  520  937  366  559  518  561\n##  [8,]  340  674  686  926  745  206  527  511  469\n##  [9,]  214  735  405  864  170  121  291  212  973\n## [10,]  623  680  930  351  533  963  124  411  478\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  275  194  198  756  440  532  446  129  343\n##  [2,]  133  822   13  261  554  774  441  367  413\n##  [3,]  991  764  233  356  876  638  723  681  347\n##  [4,]  685  323  981  369  694  629  637  428  409\n##  [5,]  517  303  232   -2  391  434  328  654  745\n##  [6,]  385    7  368  507  576  445  274   58  561\n##  [7,]  161  263   -2  865  935  841  746  269   57\n##  [8,]  188  682   21  386  658  762  184  838  873\n##  [9,]  229  333  866  835  353  202  451  934  682\n## [10,]  909  988  771  912  375  779  878  369  156\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  453   83  422  271  710  466  133  568  163\n##  [2,]  548  664  352  504  607  380  420  793  125\n##  [3,]   44  171  282   61  180  706    3  642  860\n##  [4,]  527  597  857  931  451  363  900  553  591\n##  [5,]  762  817  219  956  468  435  351  761  417\n##  [6,]   99  294  900  825  281  739  373  747  659\n##  [7,]  488  748  316  171   91  281  398  411  742\n##  [8,]  676  259  465   87  585  881  924  394  866\n##  [9,]  808  505  947   98  390  777  814   94  489\n## [10,]  547  530  987  856  421  390   42  920  728\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  743  720  790  185   38  795  854  193  909\n##  [2,]  420  608  679  963  291  104  678  246  793\n##  [3,]  202  119  117   54  596  469  884  322  511\n##  [4,]  139  788  706  564  795   58   82  380  209\n##  [5,]  347  957  242  494  678  165  408  267  698\n##  [6,]  195   84  589  764  574  873  869  253  720\n##  [7,]   -6  452  353   77  334  821   90  619  886\n##  [8,]  548  524  963  146   52  124  896  768  444\n##  [9,]  106  810  916  595  540  584  168  212  921\n## [10,]  630   97  597   16  404   16  186  272   84\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  662   71  813  273  589   11  596  462  819\n##  [2,]  354  402  154  426  710  158  125  310  330\n##  [3,]  400  769  751  190  537  178  207  778  148\n##  [4,]  541  749  780  200  192  123  795  353  130\n##  [5,]  941  485  129  735  577  250  456  436  642\n##  [6,]  905  777  444  112  494   59  687  667  754\n##  [7,]  421  718  393  114  624  669  678  629  198\n##  [8,]  391  320  670  826  870  507  771  581  826\n##  [9,]  806    5  910  203  837  129  206  886   57\n## [10,]  934  659  780  367  861  266   81  938  239\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  911  169  652    7  109  968  167  126  847\n##  [2,]  777  740  345  899  736  274  702  368  929\n##  [3,]  926  155    8  364  992  444  964  337  936\n##  [4,]  128  658  378  401  675  135  902  271  607\n##  [5,]  134  608   74  898  472  374  517  969  585\n##  [6,]  973   54  406  963  288  194   97  921   67\n##  [7,]  956  322  230  186  725  868   49  699  426\n##  [8,]  825  355  786    9  408   89  324  298  526\n##  [9,]  143  264  258   48  484  851  333  770  298\n## [10,]  714  577  705  772  400  647  637  870  954\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  761  709  930   17  841  524  161  969  458\n##  [2,]  787  633  702  775  164  349  577  449  971\n##  [3,]  605  240    8  484  703  795  312  511  729\n##  [4,]  413  156  742  737   -3  314  254   98  109\n##  [5,]  973  355  331  834  666  617  231  739  112\n##  [6,]  853  346  769  180  847  834  397   82  488\n##  [7,]  360  293  984  166  846  299   32  656  822\n##  [8,]  530  417  584  612   -2  135   53  109  140\n##  [9,]  675  165  666   30  477  301  226  522  820\n## [10,]  332  592  641  412  919  560  385  139  666\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  830  432  381  600  470   50  646  859   64\n##  [2,]  317  258  327  134  271  544  118  665   48\n##  [3,]  416   53   84  391  447  389  384  379  276\n##  [4,]  748  112  331  540  422  507  994  927  869\n##  [5,]  603  673  255  333  203  100  440  440  753\n##  [6,]  498  717  852  496   45  967  123   62  544\n##  [7,]  166  792  172  153  546  672  347   59  945\n##  [8,]  411  224  586  128  890  329  903  804  700\n##  [9,]  749  290  509  288  982  630  119  810  376\n## [10,]   91  189  798  578  640  537  160  510  226\nbc.i(x, y, \"*\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  137  846  904  265  200  464  557  840  162\n##  [2,]  174  548 1006   32 1692  502  692  354 1954\n##  [3,]   75   78  228 1074 2265 2463 2025  891 1578\n##  [4,] 1476 2012 1900 3236 2924 3704 1952 3812 1248\n##  [5,] 4925 4350 2125 4575  475 1635  475 3520 2000\n##  [6,] 2064 1074 1566  450 3414 3000  546 1602 4602\n##  [7,] 5404 4683 5383 3689 6608 2611 3962 3675 3976\n##  [8,] 2784 5456 5552 7472 6024 1712 4280 4152 3816\n##  [9,] 2007 6696 3726 7857 1611 1170 2700 1989 8838\n## [10,] 6330 6900 9400 3610 5430 9730 1340 4210 4880\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  276  195  199  757  441  533  447  130  344\n##  [2,]  270 1648   30  526 1112 1552  886  738  830\n##  [3,] 2982 2301  708 1077 2637 1923 2178 2052 1050\n##  [4,] 2756 1308 3940 1492 2792 2532 2564 1728 1652\n##  [5,] 2610 1540 1185   15 1980 2195 1665 3295 3750\n##  [6,] 2346   78 2244 3078 3492 2706 1680  384 3402\n##  [7,] 1176 1890   35 6104 6594 5936 5271 1932  448\n##  [8,] 1568 5520  232 3152 5328 6160 1536 6768 7048\n##  [9,] 2142 3078 7875 7596 3258 1899 4140 8487 6219\n## [10,] 9190 9980 7810 9220 3850 7890 8880 3790 1660\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  454   84  423  272  711  467  134  569  164\n##  [2,] 1100 1332  708 1012 1218  764  844 1590  254\n##  [3,]  141  522  855  192  549 2127   18 1935 2589\n##  [4,] 2124 2404 3444 3740 1820 1468 3616 2228 2380\n##  [5,] 3835 4110 1120 4805 2365 2200 1780 3830 2110\n##  [6,]  630 1800 5436 4986 1722 4470 2274 4518 3990\n##  [7,] 3465 5285 2261 1246  686 2016 2835 2926 5243\n##  [8,] 5472 2136 3784  760 4744 7112 7456 3216 6992\n##  [9,] 7353 4626 8604  963 3591 7074 7407  927 4482\n## [10,] 5570 5400 9970 8660 4310 4000  520 9300 7380\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  744  721  791  186   39  796  855  194  910\n##  [2,]  844 1220 1362 1930  586  212 1360  496 1590\n##  [3,]  615  366  360  171 1797 1416 2661  975 1542\n##  [4,]  572 3168 2840 2272 3196  248  344 1536  852\n##  [5,] 1760 4810 1235 2495 3415  850 2065 1360 3515\n##  [6,] 1206  540 3570 4620 3480 5274 5250 1554 4356\n##  [7,]    7 3213 2520  588 2387 5796  679 4382 6251\n##  [8,] 4448 4256 7768 1232  480 1056 7232 6208 3616\n##  [9,] 1035 7371 8325 5436 4941 5337 1593 1989 8370\n## [10,] 6400 1070 6070  260 4140  260 1960 2820  940\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  663   72  814  274  590   12  597  463  820\n##  [2,]  712  808  312  856 1424  320  254  624  664\n##  [3,] 1209 2316 2262  579 1620  543  630 2343  453\n##  [4,] 2180 3012 3136  816  784  508 3196 1428  536\n##  [5,] 4730 2450  670 3700 2910 1275 2305 2205 3235\n##  [6,] 5466 4698 2700  708 3000  390 4158 4038 4560\n##  [7,] 2996 5075 2800  847 4417 4732 4795 4452 1435\n##  [8,] 3192 2624 5424 6672 7024 4120 6232 4712 6672\n##  [9,] 7335  126 8271 1908 7614 1242 1935 8055  594\n## [10,] 9440 6690 7900 3770 8710 2760  910 9480 2490\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  912  170  653    8  110  969  168  127  848\n##  [2,] 1558 1484  694 1802 1476  552 1408  740 1862\n##  [3,] 2787  474   33 1101 2985 1341 2901 1020 2817\n##  [4,]  528 2648 1528 1620 2716  556 3624 1100 2444\n##  [5,]  695 3065  395 4515 2385 1895 2610 4870 2950\n##  [6,] 5874  360 2472 5814 1764 1200  618 5562  438\n##  [7,] 6741 2303 1659 1351 5124 6125  392 4942 3031\n##  [8,] 6664 2904 6352  136 3328  776 2656 2448 4272\n##  [9,] 1368 2457 2403  513 4437 7740 3078 7011 2763\n## [10,] 7240 5870 7150 7820 4100 6570 6470 8800 9640\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  762  710  931   18  842  525  162  970  459\n##  [2,] 1578 1270 1408 1554  332  702 1158  902 1946\n##  [3,] 1824  729   33 1461 2118 2394  945 1542 2196\n##  [4,] 1668  640 2984 2964    4 1272 1032  408  452\n##  [5,] 4890 1800 1680 4195 3355 3110 1180 3720  585\n##  [6,] 5154 2112 4650 1116 5118 5040 2418  528 2964\n##  [7,] 2569 2100 6937 1211 5971 2142  273 4641 5803\n##  [8,] 4304 3400 4736 4960   48 1144  488  936 1184\n##  [9,] 6156 1566 6075  351 4374 2790 2115 4779 7461\n## [10,] 3420 6020 6510 4220 9290 5700 3950 1490 6760\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  831  433  382  601  471   51  647  860   65\n##  [2,]  638  520  658  272  546 1092  240 1334  100\n##  [3,] 1257  168  261 1182 1350 1176 1161 1146  837\n##  [4,] 3008  464 1340 2176 1704 2044 3992 3724 3492\n##  [5,] 3040 3390 1300 1690 1040  525 2225 2225 3790\n##  [6,] 3024 4338 5148 3012  306 5838  774  408 3300\n##  [7,] 1211 5593 1253 1120 3871 4753 2478  462 6664\n##  [8,] 3352 1856 4752 1088 7184 2696 7288 6496 5664\n##  [9,] 6822 2691 4662 2673 8919 5751 1152 7371 3465\n## [10,] 1010 1990 8080 5880 6500 5470 1700 5200 2360\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    2    2    1    2    1    1\n##  [3,]    1    1    1    1    1    1    3    3    1\n##  [4,]    1    1    1    1    1    2    4    1    4\n##  [5,]    5    5    5    5    5    1    5    1    5\n##  [6,]    2    1    3    3    1    2    1    3    1\n##  [7,]    1    1    1    1    1    1    1    7    1\n##  [8,]    4    2    2    2    1    2    1    1    1\n##  [9,]    1    3    9    9    1    1    3    1    1\n## [10,]    1   10   10    1    1    1    2    1    2\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    1    2    2    1    1    1\n##  [3,]    1    1    1    1    3    1    3    3    1\n##  [4,]    1    1    1    1    2    1    1    4    1\n##  [5,]    1    1    1    1    1    1    1    1    5\n##  [6,]    1    1    2    3    6    1    2    2    3\n##  [7,]    7    1    1    1    1    1    1    1    1\n##  [8,]    4    2    1    2    2    2    8    2    1\n##  [9,]    1    9    1    1    1    1    1    1    1\n## [10,]    1    2    1    2    5    1    2    1    2\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    2    2    1    2    2    1    1\n##  [3,]    1    3    3    1    3    1    3    3    1\n##  [4,]    1    1    1    1    1    1    4    1    1\n##  [5,]    1    1    1    1    1    5    1    1    1\n##  [6,]    3    6    6    3    1    1    1    3    1\n##  [7,]    1    1    1    1    7    1    1    1    7\n##  [8,]    4    1    1    1    1    1    4    2    2\n##  [9,]    1    1    1    1    3    3    1    1    3\n## [10,]    1   10    1    2    1   10    2   10    2\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    1    1    1    2    2    2    1\n##  [3,]    1    1    3    3    1    1    1    1    1\n##  [4,]    1    4    2    4    1    2    2    4    1\n##  [5,]    1    1    1    1    1    5    1    1    1\n##  [6,]    3    6    1    2    2    3    1    1    6\n##  [7,]    1    1    1    7    1    1    1    1    1\n##  [8,]    4    4    1    2    4    4    8    8    4\n##  [9,]    1    9    1    1    9    1    3    1    3\n## [10,]   10    1    1    2    2    2    2    2    2\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    2    2    2    2    2    2    1    2    2\n##  [3,]    1    1    1    1    3    1    3    1    1\n##  [4,]    1    1    4    4    4    1    1    1    2\n##  [5,]    1    5    1    5    1    5    1    1    1\n##  [6,]    1    3    6    2    2    1    3    1    2\n##  [7,]    1    1    1    1    1    1    1    1    1\n##  [8,]    1    8    2    2    2    1    1    1    2\n##  [9,]    1    1    1    1    9    3    1    1    3\n## [10,]    2    1   10    1    1    2    1    2    1\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    1    2    2    2    2    1\n##  [3,]    1    1    1    1    1    3    1    1    3\n##  [4,]    4    2    2    1    1    1    2    1    1\n##  [5,]    1    1    1    1    1    1    1    1    5\n##  [6,]    1    6    2    3    6    2    1    3    1\n##  [7,]    1    7    1    1    1    7    7    1    1\n##  [8,]    1    1    2    1    8    1    4    2    2\n##  [9,]    1    3    3    3    1    1    9    1    1\n## [10,]    2    1    5    2   10    1    1   10    2\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    1    2    1    2    1    1    1    1\n##  [3,]    1    3    1    1    1    3    3    1    3\n##  [4,]    1    4    2    1    1    2    2    2    1\n##  [5,]    1    5    1    1    1    1    1    1    1\n##  [6,]    1    2    1    6    1    6    1    2    2\n##  [7,]    1    1    1    1    1    1    1    1    1\n##  [8,]    2    1    8    4    2    1    1    1    4\n##  [9,]    9    3    9    3    9    1    1    9    1\n## [10,]    2    2    1    2    1   10    5    1    2\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]    1    1    1    1    1    1    1    1    1\n##  [2,]    1    2    1    2    1    2    2    1    2\n##  [3,]    1    1    3    1    3    1    3    1    3\n##  [4,]    4    4    1    4    2    1    2    1    1\n##  [5,]    1    1    5    1    1    5    5    5    1\n##  [6,]    6    3    6    2    3    1    3    2    2\n##  [7,]    1    1    1    1    7    7    1    1    7\n##  [8,]    1    8    2    8    2    1    1    4    4\n##  [9,]    1    1    1    9    1    9    1    9    1\n## [10,]    1    1    2    2   10    1   10   10    2\nbc.i(x, y, \"^\")\n## , , 1\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.370000e+02 8.460000e+02 9.040000e+02 2.650000e+02          200\n##  [2,] 7.569000e+03 7.507600e+04 2.530090e+05 2.560000e+02       715716\n##  [3,] 1.562500e+04 1.757600e+04 4.389760e+05 4.588271e+07    430368875\n##  [4,] 1.853982e+10 6.401355e+10 5.090664e+10 4.283454e+11 285541678321\n##  [5,] 9.272165e+14 4.984209e+14 1.386579e+13 6.413653e+14   7737809375\n##  [6,] 1.657107e+15 3.289411e+13 3.161135e+14 1.779785e+11          Inf\n##  [7,]          Inf          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.640000e+02          557 8.400000e+02 1.620000e+02\n##  [2,] 6.300100e+04       119716 3.132900e+04 9.545290e+05\n##  [3,] 5.533877e+08    307546875 2.619807e+07 1.455316e+08\n##  [4,] 7.352651e+11  56712564736 8.248436e+11 9.475854e+09\n##  [5,] 3.738856e+12   7737809375 1.729272e+14 1.024000e+13\n##  [6,]          Inf 567869252041 3.622994e+14          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 2\n## \n##               [,1]         [,2]         [,3]        [,4]         [,5]\n##  [1,] 2.760000e+02 1.950000e+02 1.990000e+02         757 4.410000e+02\n##  [2,] 1.822500e+04 6.789760e+05 2.250000e+02       69169 3.091360e+05\n##  [3,] 9.821078e+08 4.512177e+08 1.314426e+07    46268279 6.791514e+08\n##  [4,] 2.253600e+11 1.143381e+10 9.413366e+11 19356878641 2.373677e+11\n##  [5,] 3.875721e+13 2.771747e+12 7.477247e+11         243 9.738138e+12\n##  [6,] 3.573226e+15 4.826809e+06 2.736715e+15         Inf          Inf\n##  [7,] 3.777156e+15          Inf 7.812500e+04         Inf          Inf\n##  [8,]          Inf          Inf 5.002464e+11         Inf          Inf\n##  [9,]          Inf          Inf          Inf         Inf          Inf\n## [10,]          Inf          Inf          Inf         Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 5.330000e+02 4.470000e+02 1.300000e+02 3.440000e+02\n##  [2,] 6.021760e+05 1.962490e+05 1.361610e+05 1.722250e+05\n##  [3,] 2.633747e+08 3.826572e+08 3.200135e+08 4.287500e+07\n##  [4,] 1.605517e+11 1.688232e+11 3.482852e+10 2.909378e+10\n##  [5,] 1.630507e+13 4.094691e+12 1.242874e+14 2.373047e+14\n##  [6,] 8.415099e+15 4.818903e+14 6.871948e+10          Inf\n##  [7,]          Inf          Inf          Inf 4.398047e+12\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 3\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 4.540000e+02 8.400000e+01          423 2.720000e+02 7.110000e+02\n##  [2,] 3.025000e+05 4.435560e+05       125316 2.560360e+05 3.708810e+05\n##  [3,] 1.038230e+05 5.268024e+06     23149125 2.621440e+05 6.128487e+06\n##  [4,] 7.950201e+10 1.304662e+11 549556825041 7.642694e+11 4.285935e+10\n##  [5,] 2.654464e+14 3.752832e+14 563949338624 8.196283e+14 2.367586e+13\n##  [6,] 1.340096e+12 7.290000e+14          Inf          Inf 5.588450e+14\n##  [7,]          Inf          Inf          Inf 5.661611e+15 8.681255e+13\n##  [8,]          Inf          Inf          Inf 6.634204e+15          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.670000e+02 1.340000e+02 5.690000e+02 1.640000e+02\n##  [2,] 1.459240e+05 1.780840e+05 6.320250e+05 1.612900e+04\n##  [3,] 3.564008e+08 2.160000e+02 2.683361e+08 6.427356e+08\n##  [4,] 1.814113e+10 6.678420e+11 9.625444e+10 1.253337e+11\n##  [5,] 1.649162e+13 5.718077e+12 2.637205e+14 1.338327e+13\n##  [6,]          Inf 2.963707e+15          Inf          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 4\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.440000e+02 7.210000e+02          791 1.860000e+02 3.900000e+01\n##  [2,] 1.780840e+05 3.721000e+05       463761 9.312250e+05 8.584900e+04\n##  [3,] 8.615125e+06 1.815848e+06      1728000 1.851930e+05 2.149218e+08\n##  [4,] 4.181616e+08 3.934601e+11 254116810000 1.040862e+11 4.075558e+11\n##  [5,] 5.403975e+12 8.239016e+14 919358226007 3.093875e+13 1.486290e+14\n##  [6,] 6.594416e+13 5.314410e+11          Inf          Inf          Inf\n##  [7,] 1.000000e+00          Inf          Inf 2.950903e+13          Inf\n##  [8,]          Inf          Inf          Inf          Inf 1.679616e+14\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf 1.411671e+14          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 7.960000e+02 8.550000e+02 1.940000e+02 9.100000e+02\n##  [2,] 1.123600e+04 4.624000e+05 6.150400e+04 6.320250e+05\n##  [3,] 1.051540e+08 6.978641e+08 3.432812e+07 1.357967e+08\n##  [4,] 1.477634e+07 5.470082e+07 2.174327e+10 2.058346e+09\n##  [5,] 1.419857e+11 1.201573e+13 1.488828e+12 1.717025e+14\n##  [6,]          Inf          Inf 3.018551e+14          Inf\n##  [7,]          Inf 8.079828e+13          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,] 1.411671e+14          Inf          Inf          Inf\n## \n## , , 5\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 6.630000e+02 7.200000e+01 8.140000e+02 2.740000e+02 5.900000e+02\n##  [2,] 1.267360e+05 1.632160e+05 2.433600e+04 1.831840e+05 5.069440e+05\n##  [3,] 6.545083e+07 4.600996e+08 4.286611e+08 7.189057e+06 1.574640e+08\n##  [4,] 8.822385e+10 3.214992e+11 3.778020e+11 1.731891e+09 1.475789e+09\n##  [5,] 7.576274e+14 2.824752e+13 4.320400e+10 2.219007e+14 6.677516e+13\n##  [6,]          Inf          Inf 8.303766e+15 2.699554e+12          Inf\n##  [7,]          Inf          Inf          Inf 3.797498e+14          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf 2.066105e+10          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.200000e+01 5.970000e+02 4.630000e+02 8.200000e+02\n##  [2,] 2.560000e+04 1.612900e+04 9.734400e+04 1.102240e+05\n##  [3,] 5.929741e+06 9.261000e+06 4.763795e+08 3.442951e+06\n##  [4,] 2.601446e+08 4.075558e+11 1.624325e+10 3.224179e+08\n##  [5,] 1.078204e+12 2.082115e+13 1.667988e+13 1.133761e+14\n##  [6,] 7.541889e+10          Inf          Inf          Inf\n##  [7,]          Inf          Inf          Inf          Inf\n##  [8,]          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 6\n## \n##              [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,]         912 1.700000e+02 6.530000e+02 8.000000e+00 1.100000e+02\n##  [2,]      606841 5.505640e+05 1.204090e+05 8.118010e+05 5.446440e+05\n##  [3,]   801765089 3.944312e+06 1.331000e+03 4.943086e+07 9.850749e+08\n##  [4,]   303595776 1.920578e+11 2.129381e+10 2.690420e+10 2.125588e+11\n##  [5,] 51888844699 8.655704e+13 3.077056e+09 6.003973e+14 2.469403e+13\n##  [6,]         Inf 4.665600e+10 4.890838e+15          Inf 6.457791e+14\n##  [7,]         Inf          Inf          Inf          Inf          Inf\n##  [8,]         Inf          Inf          Inf 6.975757e+09          Inf\n##  [9,]         Inf          Inf          Inf 6.351462e+15          Inf\n## [10,]         Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 9.690000e+02 1.680000e+02 1.270000e+02 8.480000e+02\n##  [2,] 7.617600e+04 4.956160e+05 1.369000e+05 8.667610e+05\n##  [3,] 8.931462e+07 9.042311e+08 3.930400e+07 8.279360e+08\n##  [4,] 3.733010e+08 6.737717e+11 5.719141e+09 1.393686e+11\n##  [5,] 7.819807e+12 3.875721e+13 8.765865e+14 7.149243e+13\n##  [6,] 6.400000e+13 1.194052e+12          Inf 1.513342e+11\n##  [7,]          Inf 1.727095e+12          Inf          Inf\n##  [8,] 7.837434e+15          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf\n## \n## , , 7\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.620000e+02 7.100000e+02 9.310000e+02 1.800000e+01 8.420000e+02\n##  [2,] 6.225210e+05 4.032250e+05 4.956160e+05 6.037290e+05 2.755600e+04\n##  [3,] 2.247557e+08 1.434891e+07 1.331000e+03 1.155013e+08 3.518958e+08\n##  [4,] 3.023738e+10 6.553600e+08 3.097101e+11 3.014899e+11 1.000000e+00\n##  [5,] 8.947347e+14 6.046618e+12 4.282490e+12 4.157285e+14 1.360231e+14\n##  [6,]          Inf 1.902199e+15          Inf 4.140737e+13          Inf\n##  [7,]          Inf          Inf          Inf 4.637914e+15          Inf\n##  [8,]          Inf          Inf          Inf          Inf 1.679616e+06\n##  [9,]          Inf          Inf          Inf 2.087284e+14          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##               [,6]         [,7]         [,8]        [,9]\n##  [1,] 5.250000e+02 1.620000e+02 9.700000e+02         459\n##  [2,] 1.232010e+05 3.352410e+05 2.034010e+05      946729\n##  [3,] 5.081696e+08 3.125587e+07 1.357967e+08   392223168\n##  [4,] 1.022606e+10 4.430766e+09 1.082432e+08   163047361\n##  [5,] 9.310048e+13 7.320825e+11 2.279632e+14 21924480357\n##  [6,]          Inf 4.283811e+15 4.644041e+11         Inf\n##  [7,]          Inf 1.372310e+11          Inf         Inf\n##  [8,]          Inf 1.917073e+14          Inf         Inf\n##  [9,]          Inf          Inf          Inf         Inf\n## [10,]          Inf          Inf          Inf         Inf\n## \n## , , 8\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 8.310000e+02 4.330000e+02 3.820000e+02 6.010000e+02          471\n##  [2,] 1.017610e+05 6.760000e+04 1.082410e+05 1.849600e+04        74529\n##  [3,] 7.356006e+07 1.756160e+05 6.585030e+05 6.116298e+07     91125000\n##  [4,] 3.197948e+11 1.810639e+08 1.259445e+10 8.757812e+10  32933538576\n##  [5,] 8.308410e+13 1.432678e+14 1.188138e+12 4.411472e+12 389328928768\n##  [6,]          Inf          Inf          Inf          Inf  17596287801\n##  [7,] 4.637914e+15          Inf 5.888046e+15 2.684355e+15          Inf\n##  [8,]          Inf          Inf          Inf          Inf          Inf\n##  [9,]          Inf          Inf          Inf          Inf          Inf\n## [10,]          Inf          Inf          Inf          Inf          Inf\n##              [,6]         [,7]         [,8]         [,9]\n##  [1,]          51 6.470000e+02 8.600000e+02 6.500000e+01\n##  [2,]      298116 1.440000e+04 4.448890e+05 2.500000e+03\n##  [3,]    60236288 5.796060e+07 5.574297e+07 2.171764e+07\n##  [4,] 68184176641 9.920240e+11 7.512746e+11 5.808406e+11\n##  [5,] 12762815625 1.745019e+13 1.745019e+13 2.502338e+14\n##  [6,]         Inf 4.608274e+12 9.886748e+10          Inf\n##  [7,]         Inf          Inf 5.455161e+12          Inf\n##  [8,]         Inf          Inf          Inf          Inf\n##  [9,]         Inf          Inf          Inf          Inf\n## [10,]         Inf          Inf          Inf          Inf\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.i(x, y, \"&lt;\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"&gt;\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE  TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE FALSE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.i(x, y, \"&lt;=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.i(x, y, \"&gt;=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2]  [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE  TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE FALSE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE  TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##        [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.cplx.html",
    "href": "man/outer/bc.cplx.html",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(10,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 2\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 3\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 4\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 5\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 6\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 7\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 8\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA FALSE    NA    NA    NA    NA    NA    NA    NA FALSE\n## [13]    NA    NA    NA FALSE    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA TRUE   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                      \n##  [1,]        NaN-      Infi -0.5457306-1.27235395i      -Inf+       Infi\n##  [2,]                    NA        NaN-       Infi       NaN+       NaNi\n##  [3,]        Inf-0.8845922i  0.7329025+0.64400671i       Inf+       Infi\n##  [4,]                    NA        NaN+       NaNi       NaN+       NaNi\n##  [5,] -0.1883392+0.0204772i -0.8853338-0.01153333i 0.1669792-0.01595698i\n##  [6,]        NaN+0.4035476i        Inf+0.15537418i       NaN+       Infi\n##  [7,]                    NA        NaN+       Infi       NaN+       NaNi\n##  [8,]  0.8569610+0.3319232i        NaN+0.76378513i       NaN+       NaNi\n##  [9,]                    NA -0.9588386-0.53507235i                    NA\n## [10,]       -Inf-2.4787772i       -Inf-0.57025456i       Inf+       Infi\n## [11,]  1.1526796-1.0928646i                     NA                    NA\n## [12,]        NaN+      Infi        NaN+       NaNi       NaN+       NaNi\n## [13,]        NaN+1.3938376i        NaN+       Infi      -Inf+       NaNi\n## [14,]        NaN-      Infi                     NA       NaN+       NaNi\n## [15,]  0.1320610-0.5861494i                     NA                    NA\n## [16,]        NaN+      Infi  0.2650759-1.07828982i       Inf+       Infi\n## [17,]  0.3999434+1.0232885i        NaN-       Infi       Inf-       Infi\n## [18,]        Inf+1.6811024i                     NA       NaN-       Infi\n##                         out\n##  [1,]                    NA\n##  [2,]                    NA\n##  [3,]       Inf+       Infi\n##  [4,]                    NA\n##  [5,] 0.1669792-0.01595698i\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]                    NA\n##  [9,]                    NA\n## [10,]       Inf+       Infi\n## [11,]                    NA\n## [12,]                    NA\n## [13,]                    NA\n## [14,]                    NA\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,]                    NA"
  },
  {
    "objectID": "man/outer/bc.cplx.html#broadcasted-complex-numeric-operations",
    "href": "man/outer/bc.cplx.html#broadcasted-complex-numeric-operations",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(10,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4] [,5] [,6] [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA    NA   NA   NA   NA FALSE FALSE\n##  [2,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [3,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [4,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [5,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [6,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [7,]    NA FALSE FALSE FALSE   NA   NA   NA    NA    NA\n##  [8,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\n##  [9,] FALSE FALSE    NA    NA   NA   NA   NA    NA FALSE\n## [10,]    NA    NA    NA    NA   NA   NA   NA    NA    NA\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE   NA   NA   NA   NA   NA   NA TRUE TRUE\n##  [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [4,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [5,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [6,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [7,]   NA TRUE TRUE TRUE   NA   NA   NA   NA   NA\n##  [8,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n##  [9,] TRUE TRUE   NA   NA   NA   NA   NA   NA TRUE\n## [10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 2\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 3\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 4\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 5\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 6\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 7\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n## \n## , , 8\n## \n##                         [,1]                  [,2]                [,3]\n##  [1,] -2.14388767-0.1923591i                    NA                  NA\n##  [2,]                     NA                    NA                  NA\n##  [3,]                     NA                    NA                  NA\n##  [4,]                     NA                    NA                  NA\n##  [5,]                     NA                    NA                  NA\n##  [6,]                     NA                    NA                  NA\n##  [7,]                     NA        Inf-0.1483052i 0.7339151-2.631991i\n##  [8,]                     NA                    NA                  NA\n##  [9,]  0.01025446-1.8162063i -0.3514929+0.3012054i                  NA\n## [10,]                     NA                    NA                  NA\n##                       [,4] [,5] [,6] [,7]           [,8]                [,9]\n##  [1,]                   NA   NA   NA   NA Inf+0.1739148i -1.78214-2.3097708i\n##  [2,]                   NA   NA   NA   NA             NA                  NA\n##  [3,]                   NA   NA   NA   NA             NA                  NA\n##  [4,]                   NA   NA   NA   NA             NA                  NA\n##  [5,]                   NA   NA   NA   NA             NA                  NA\n##  [6,]                   NA   NA   NA   NA             NA                  NA\n##  [7,] 0.3721678-0.5145791i   NA   NA   NA             NA                  NA\n##  [8,]                   NA   NA   NA   NA             NA                  NA\n##  [9,]                   NA   NA   NA   NA             NA      Inf+0.6674793i\n## [10,]                   NA   NA   NA   NA             NA                  NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA    NA FALSE    NA    NA    NA    NA    NA    NA    NA FALSE\n## [13]    NA    NA    NA FALSE    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA TRUE   NA   NA   NA   NA\n## [16]   NA   NA   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                      y                      \n##  [1,]        NaN-      Infi -0.5457306-1.27235395i      -Inf+       Infi\n##  [2,]                    NA        NaN-       Infi       NaN+       NaNi\n##  [3,]        Inf-0.8845922i  0.7329025+0.64400671i       Inf+       Infi\n##  [4,]                    NA        NaN+       NaNi       NaN+       NaNi\n##  [5,] -0.1883392+0.0204772i -0.8853338-0.01153333i 0.1669792-0.01595698i\n##  [6,]        NaN+0.4035476i        Inf+0.15537418i       NaN+       Infi\n##  [7,]                    NA        NaN+       Infi       NaN+       NaNi\n##  [8,]  0.8569610+0.3319232i        NaN+0.76378513i       NaN+       NaNi\n##  [9,]                    NA -0.9588386-0.53507235i                    NA\n## [10,]       -Inf-2.4787772i       -Inf-0.57025456i       Inf+       Infi\n## [11,]  1.1526796-1.0928646i                     NA                    NA\n## [12,]        NaN+      Infi        NaN+       NaNi       NaN+       NaNi\n## [13,]        NaN+1.3938376i        NaN+       Infi      -Inf+       NaNi\n## [14,]        NaN-      Infi                     NA       NaN+       NaNi\n## [15,]  0.1320610-0.5861494i                     NA                    NA\n## [16,]        NaN+      Infi  0.2650759-1.07828982i       Inf+       Infi\n## [17,]  0.3999434+1.0232885i        NaN-       Infi       Inf-       Infi\n## [18,]        Inf+1.6811024i                     NA       NaN-       Infi\n##                         out\n##  [1,]                    NA\n##  [2,]                    NA\n##  [3,]       Inf+       Infi\n##  [4,]                    NA\n##  [5,] 0.1669792-0.01595698i\n##  [6,]                    NA\n##  [7,]                    NA\n##  [8,]                    NA\n##  [9,]                    NA\n## [10,]       Inf+       Infi\n## [11,]                    NA\n## [12,]                    NA\n## [13,]                    NA\n## [14,]                    NA\n## [15,]                    NA\n## [16,]                    NA\n## [17,]                    NA\n## [18,]                    NA"
  },
  {
    "objectID": "man/other/typecast.html",
    "href": "man/other/typecast.html",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n##     January February March April   May\n## Jan    TRUE     TRUE  TRUE  TRUE  TRUE\n## Feb    TRUE     TRUE  TRUE  TRUE  TRUE\n## Mar    TRUE     TRUE  TRUE  TRUE  TRUE\n## Apr    TRUE     TRUE  TRUE  TRUE  TRUE\n## May    TRUE     TRUE  TRUE  TRUE  TRUE\n## Jun    TRUE     TRUE  TRUE  TRUE FALSE\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_int(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_dbl(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_chr(x)\n##     January February March April May \n## Jan \"16\"    \"24\"     \"28\"  \"9\"   \"-1\"\n## Feb \"6\"     \"19\"     \"13\"  \"22\"  \"25\"\n## Mar \"3\"     \"17\"     \"20\"  \"15\"  \"23\"\n## Apr \"27\"    \"10\"     \"11\"  \"1\"   \"21\"\n## May \"8\"     \"7\"      \"18\"  \"5\"   \"12\"\n## Jun \"14\"    \"26\"     \"4\"   \"2\"   \"0\" \n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_cplx(x)\n##     January February March April   May\n## Jan   16+0i    24+0i 28+0i  9+0i -1+0i\n## Feb    6+0i    19+0i 13+0i 22+0i 25+0i\n## Mar    3+0i    17+0i 20+0i 15+0i 23+0i\n## Apr   27+0i    10+0i 11+0i  1+0i 21+0i\n## May    8+0i     7+0i 18+0i  5+0i 12+0i\n## Jun   14+0i    26+0i  4+0i  2+0i  0+0i\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_raw(x)\n##     January February March April May\n## Jan      10       18    1c    09  00\n## Feb      06       13    0d    16  19\n## Mar      03       11    14    0f  17\n## Apr      1b       0a    0b    01  15\n## May      08       07    12    05  0c\n## Jun      0e       1a    04    02  00\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n##   January  February     March     April       May      June      July    August \n##       Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \n## September   October  November  December \n##       Sep       Oct       Nov       Dec \n## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n##   January  February     March     April       May      June      July    August \n##     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \n## September   October  November  December \n##      TRUE      TRUE      TRUE      TRUE\nas_int(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_dbl(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_chr(x)\n##   January  February     March     April       May      June      July    August \n##     \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \n## September   October  November  December \n##     \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\"\nas_cplx(x)\n##   January  February     March     April       May      June      July    August \n##  1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\n## September   October  November  December \n##  9+0i 10+0i 11+0i 12+0i\nas_raw(x)\n##   January  February     March     April       May      June      July    August \n##        01        02        03        04        05        06        07        08 \n## September   October  November  December \n##        09        0a        0b        0c"
  },
  {
    "objectID": "man/other/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "href": "man/other/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n##     January February March April   May\n## Jan    TRUE     TRUE  TRUE  TRUE  TRUE\n## Feb    TRUE     TRUE  TRUE  TRUE  TRUE\n## Mar    TRUE     TRUE  TRUE  TRUE  TRUE\n## Apr    TRUE     TRUE  TRUE  TRUE  TRUE\n## May    TRUE     TRUE  TRUE  TRUE  TRUE\n## Jun    TRUE     TRUE  TRUE  TRUE FALSE\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_int(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_dbl(x)\n##     January February March April May\n## Jan      16       24    28     9  -1\n## Feb       6       19    13    22  25\n## Mar       3       17    20    15  23\n## Apr      27       10    11     1  21\n## May       8        7    18     5  12\n## Jun      14       26     4     2   0\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_chr(x)\n##     January February March April May \n## Jan \"16\"    \"24\"     \"28\"  \"9\"   \"-1\"\n## Feb \"6\"     \"19\"     \"13\"  \"22\"  \"25\"\n## Mar \"3\"     \"17\"     \"20\"  \"15\"  \"23\"\n## Apr \"27\"    \"10\"     \"11\"  \"1\"   \"21\"\n## May \"8\"     \"7\"      \"18\"  \"5\"   \"12\"\n## Jun \"14\"    \"26\"     \"4\"   \"2\"   \"0\" \n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_cplx(x)\n##     January February March April   May\n## Jan   16+0i    24+0i 28+0i  9+0i -1+0i\n## Feb    6+0i    19+0i 13+0i 22+0i 25+0i\n## Mar    3+0i    17+0i 20+0i 15+0i 23+0i\n## Apr   27+0i    10+0i 11+0i  1+0i 21+0i\n## May    8+0i     7+0i 18+0i  5+0i 12+0i\n## Jun   14+0i    26+0i  4+0i  2+0i  0+0i\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_raw(x)\n##     January February March April May\n## Jan      10       18    1c    09  00\n## Feb      06       13    0d    16  19\n## Mar      03       11    14    0f  17\n## Apr      1b       0a    0b    01  15\n## May      08       07    12    05  0c\n## Jun      0e       1a    04    02  00\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n##   January  February     March     April       May      June      July    August \n##       Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \n## September   October  November  December \n##       Sep       Oct       Nov       Dec \n## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n##   January  February     March     April       May      June      July    August \n##     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \n## September   October  November  December \n##      TRUE      TRUE      TRUE      TRUE\nas_int(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_dbl(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_chr(x)\n##   January  February     March     April       May      June      July    August \n##     \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \n## September   October  November  December \n##     \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\"\nas_cplx(x)\n##   January  February     March     April       May      June      July    August \n##  1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\n## September   October  November  December \n##  9+0i 10+0i 11+0i 12+0i\nas_raw(x)\n##   January  February     March     April       May      June      July    August \n##        01        02        03        04        05        06        07        08 \n## September   October  November  December \n##        09        0a        0b        0c"
  },
  {
    "objectID": "man/other/bc_dim.html",
    "href": "man/other/bc_dim.html",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/other/bc_dim.html#predict-broadcasted-dimensions",
    "href": "man/other/bc_dim.html#predict-broadcasted-dimensions",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/generic/bc_ifelse.html",
    "href": "man/generic/bc_ifelse.html",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n## , , 1\n## \n##       [,1]         [,2]        \n##  [1,] character,12 character,12\n##  [2,] integer,10   integer,10  \n##  [3,] character,12 character,12\n##  [4,] character,12 character,12\n##  [5,] character,26 character,26\n##  [6,] character,26 character,26\n##  [7,] character,26 character,26\n##  [8,] character,12 character,12\n##  [9,] integer,10   integer,10  \n## [10,] character,26 character,26\n## \n## , , 2\n## \n##       [,1]         [,2]        \n##  [1,] character,12 character,12\n##  [2,] integer,10   integer,10  \n##  [3,] character,12 character,12\n##  [4,] character,12 character,12\n##  [5,] character,26 character,26\n##  [6,] character,26 character,26\n##  [7,] character,26 character,26\n##  [8,] character,12 character,12\n##  [9,] integer,10   integer,10  \n## [10,] character,26 character,26"
  },
  {
    "objectID": "man/generic/bc_ifelse.html#broadcasted-ifelse",
    "href": "man/generic/bc_ifelse.html#broadcasted-ifelse",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n## , , 1\n## \n##       [,1]         [,2]        \n##  [1,] character,12 character,12\n##  [2,] integer,10   integer,10  \n##  [3,] character,12 character,12\n##  [4,] character,12 character,12\n##  [5,] character,26 character,26\n##  [6,] character,26 character,26\n##  [7,] character,26 character,26\n##  [8,] character,12 character,12\n##  [9,] integer,10   integer,10  \n## [10,] character,26 character,26\n## \n## , , 2\n## \n##       [,1]         [,2]        \n##  [1,] character,12 character,12\n##  [2,] integer,10   integer,10  \n##  [3,] character,12 character,12\n##  [4,] character,12 character,12\n##  [5,] character,26 character,26\n##  [6,] character,26 character,26\n##  [7,] character,26 character,26\n##  [8,] character,12 character,12\n##  [9,] integer,10   integer,10  \n## [10,] character,26 character,26"
  },
  {
    "objectID": "man/bind/bind.html",
    "href": "man/bind/bind.html",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Allows for recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  This function is only available if the ‘data.table’ package is installed.  Returns a data.table.  Faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\nNote that the naming convention of the binding implementations here is \"bind_\" followed by the resulting class (abbreviated).  I.e. bind_mat returns a matrix, but can bind both matrices and vectors.  And bind_array returns an array, but can bind both arrays and matrices.  And bind_dt returns a data.table, but can bind not only data.tables, but also most other data.frame-like objects.  \n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  revalong,\n  max_bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrevalong\n\n\nfor bind_array() only.  Same as along, but counting backwards.  I.e. revalong = 0 is equivalent to along = N+1, and revalong = N+1 is equivalent to along = 0;  with N = max(lst.ndim(input)).\n\n\n\n\nmax_bc\n\n\ninteger, for bind_array only.  Specify here the number of dimensions that are allowed to be broadcasted when binding arrays.  If max_bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to rbindlist.  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, revalong = 2L)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, revalong = 3L) # bind on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n##       x.a    x.b   y.a    y.b\n##     &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan     1    Jan\n##  2:     2    Feb     2    Feb\n##  3:     3    Mar     3    Mar\n##  4:     4    Apr     4    Apr\n##  5:     5    May     5    May\n##  6:     6    Jun     6    Jun\n##  7:     7    Jul     7    Jul\n##  8:     8    Aug     8    Aug\n##  9:     9    Sep     9    Sep\n## 10:    10    Oct    10    Oct\n## 11:    11    Nov    11    Nov\n## 12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/bind/bind.html#dimensional-binding-of-objects",
    "href": "man/bind/bind.html#dimensional-binding-of-objects",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Allows for recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  This function is only available if the ‘data.table’ package is installed.  Returns a data.table.  Faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\nNote that the naming convention of the binding implementations here is \"bind_\" followed by the resulting class (abbreviated).  I.e. bind_mat returns a matrix, but can bind both matrices and vectors.  And bind_array returns an array, but can bind both arrays and matrices.  And bind_dt returns a data.table, but can bind not only data.tables, but also most other data.frame-like objects.  \n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  revalong,\n  max_bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrevalong\n\n\nfor bind_array() only.  Same as along, but counting backwards.  I.e. revalong = 0 is equivalent to along = N+1, and revalong = N+1 is equivalent to along = 0;  with N = max(lst.ndim(input)).\n\n\n\n\nmax_bc\n\n\ninteger, for bind_array only.  Specify here the number of dimensions that are allowed to be broadcasted when binding arrays.  If max_bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to rbindlist.  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, revalong = 2L)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, revalong = 3L) # bind on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n##       x.a    x.b   y.a    y.b\n##     &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan     1    Jan\n##  2:     2    Feb     2    Feb\n##  3:     3    Mar     3    Mar\n##  4:     4    Apr     4    Apr\n##  5:     5    May     5    May\n##  6:     6    Jun     6    Jun\n##  7:     7    Jul     7    Jul\n##  8:     8    Aug     8    Aug\n##  9:     9    Sep     9    Sep\n## 10:    10    Oct    10    Oct\n## 11:    11    Nov    11    Nov\n## 12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html",
    "href": "man/aaa00_broadcast_help.html",
    "title": "broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe broadcasted implementations include, but are not limited to, the following:\n\n\nA more efficient and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nRelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=; can also take into account Machine precision);\n\n\nArithmetic operations (like +, -, *, /, \"gcd\", ^, pmin(), pmax());\n\n\nBoolean combiner operations (like &, |, xor(), \"nand\");\n\n\nString distance, (in)equality, and concatenation operations;\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function; The broadcasted implementations strive to minimize computation time and memory usage (which is not just good for computer efficiency, but also for the environment).\n\n\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "href": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "title": "broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe broadcasted implementations include, but are not limited to, the following:\n\n\nA more efficient and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nRelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=; can also take into account Machine precision);\n\n\nArithmetic operations (like +, -, *, /, \"gcd\", ^, pmin(), pmax());\n\n\nBoolean combiner operations (like &, |, xor(), \"nand\");\n\n\nString distance, (in)equality, and concatenation operations;\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function; The broadcasted implementations strive to minimize computation time and memory usage (which is not just good for computer efficiency, but also for the environment).\n\n\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "about/NEWS.html",
    "href": "about/NEWS.html",
    "title": "Changelog",
    "section": "",
    "text": "…still testing…"
  },
  {
    "objectID": "about/LICENSE.html",
    "href": "about/LICENSE.html",
    "title": "License",
    "section": "",
    "text": "1.1. “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular Contributor.\n1.4. “Covered Software” means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source Code Form.\n1.7. “Larger Work” means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for making modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n\n\n\n2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n\n\n\n3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n\n\n\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n\n\n\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n\n                                                                 *\n\nDisclaimer of Warranty *\n\n————————- *\n                                                                 *\nCovered Software is provided under this License on an “as is” *\nbasis, without warranty of any kind, either expressed, implied, or *\nstatutory, including, without limitation, warranties that the *\nCovered Software is free of defects, merchantable, fit for a *\nparticular purpose or non-infringing. The entire risk as to the *\nquality and performance of the Covered Software is with You. *\nShould any Covered Software prove defective in any respect, You *\n(not any Contributor) assume the cost of any necessary servicing, *\nrepair, or correction. This disclaimer of warranty constitutes an *\nessential part of this License. No use of any Covered Software is *\nauthorized under this License except under this disclaimer. *\n                                                                 *\n\n\n\n\n                                                                 *\n\nLimitation of Liability *\n\n————————– *\n                                                                 *\nUnder no circumstances and under no legal theory, whether tort *\n(including negligence), contract, or otherwise, shall any *\nContributor, or anyone who distributes Covered Software as *\npermitted above, be liable to You for any direct, indirect, *\nspecial, incidental, or consequential damages of any character *\nincluding, without limitation, damages for lost profits, loss of *\ngoodwill, work stoppage, computer failure or malfunction, or any *\nand all other commercial damages or losses, even if such party *\nshall have been informed of the possibility of such damages. This *\nlimitation of liability shall not apply to liability for death or *\npersonal injury resulting from such party’s negligence to the *\nextent applicable law prohibits such limitation. Some *\njurisdictions do not allow the exclusion or limitation of *\nincidental or consequential damages, so this exclusion and *\nlimitation may not apply to You. *\n                                                                 *\n\n\n\n\n\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n\n\n\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n\n\n\n10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\n\n\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\nYou may add additional accurate notices of copyright ownership.\n\n\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0."
  },
  {
    "objectID": "about/LICENSE.html#definitions",
    "href": "about/LICENSE.html#definitions",
    "title": "License",
    "section": "",
    "text": "1.1. “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular Contributor.\n1.4. “Covered Software” means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source Code Form.\n1.7. “Larger Work” means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for making modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity."
  },
  {
    "objectID": "about/LICENSE.html#license-grants-and-conditions",
    "href": "about/LICENSE.html#license-grants-and-conditions",
    "title": "License",
    "section": "",
    "text": "2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1."
  },
  {
    "objectID": "about/LICENSE.html#responsibilities",
    "href": "about/LICENSE.html#responsibilities",
    "title": "License",
    "section": "",
    "text": "3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction."
  },
  {
    "objectID": "about/LICENSE.html#inability-to-comply-due-to-statute-or-regulation",
    "href": "about/LICENSE.html#inability-to-comply-due-to-statute-or-regulation",
    "title": "License",
    "section": "",
    "text": "If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it."
  },
  {
    "objectID": "about/LICENSE.html#termination",
    "href": "about/LICENSE.html#termination",
    "title": "License",
    "section": "",
    "text": "5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n\n                                                                 *\n\nDisclaimer of Warranty *\n\n————————- *\n                                                                 *\nCovered Software is provided under this License on an “as is” *\nbasis, without warranty of any kind, either expressed, implied, or *\nstatutory, including, without limitation, warranties that the *\nCovered Software is free of defects, merchantable, fit for a *\nparticular purpose or non-infringing. The entire risk as to the *\nquality and performance of the Covered Software is with You. *\nShould any Covered Software prove defective in any respect, You *\n(not any Contributor) assume the cost of any necessary servicing, *\nrepair, or correction. This disclaimer of warranty constitutes an *\nessential part of this License. No use of any Covered Software is *\nauthorized under this License except under this disclaimer. *\n                                                                 *\n\n\n\n\n                                                                 *\n\nLimitation of Liability *\n\n————————– *\n                                                                 *\nUnder no circumstances and under no legal theory, whether tort *\n(including negligence), contract, or otherwise, shall any *\nContributor, or anyone who distributes Covered Software as *\npermitted above, be liable to You for any direct, indirect, *\nspecial, incidental, or consequential damages of any character *\nincluding, without limitation, damages for lost profits, loss of *\ngoodwill, work stoppage, computer failure or malfunction, or any *\nand all other commercial damages or losses, even if such party *\nshall have been informed of the possibility of such damages. This *\nlimitation of liability shall not apply to liability for death or *\npersonal injury resulting from such party’s negligence to the *\nextent applicable law prohibits such limitation. Some *\njurisdictions do not allow the exclusion or limitation of *\nincidental or consequential damages, so this exclusion and *\nlimitation may not apply to You. *\n                                                                 *"
  },
  {
    "objectID": "about/LICENSE.html#litigation",
    "href": "about/LICENSE.html#litigation",
    "title": "License",
    "section": "",
    "text": "Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims."
  },
  {
    "objectID": "about/LICENSE.html#miscellaneous",
    "href": "about/LICENSE.html#miscellaneous",
    "title": "License",
    "section": "",
    "text": "This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor."
  },
  {
    "objectID": "about/LICENSE.html#versions-of-the-license",
    "href": "about/LICENSE.html#versions-of-the-license",
    "title": "License",
    "section": "",
    "text": "10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached."
  },
  {
    "objectID": "about/LICENSE.html#exhibit-a---source-code-form-license-notice",
    "href": "about/LICENSE.html#exhibit-a---source-code-form-license-notice",
    "title": "License",
    "section": "",
    "text": "This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\nYou may add additional accurate notices of copyright ownership."
  },
  {
    "objectID": "about/LICENSE.html#exhibit-b---incompatible-with-secondary-licenses-notice",
    "href": "about/LICENSE.html#exhibit-b---incompatible-with-secondary-licenses-notice",
    "title": "License",
    "section": "",
    "text": "This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "index.html#why-use-broadcast",
    "href": "index.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/bind/aaa01_broadcast_bind.html",
    "href": "man/bind/aaa01_broadcast_bind.html",
    "title": "broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of rbind/cbind.  bind_mat() differs from rbind/cbind in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10).\n\n\nbind The primary differences is that   \n\n\n\n\n\n…"
  },
  {
    "objectID": "man/bind/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "href": "man/bind/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "title": "broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of rbind/cbind.  bind_mat() differs from rbind/cbind in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10).\n\n\nbind The primary differences is that   \n\n\n\n\n\n…"
  },
  {
    "objectID": "man/generic/bcapply.html",
    "href": "man/generic/bcapply.html",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n## , , 1\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2\n## \n## , , 2\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2"
  },
  {
    "objectID": "man/generic/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "href": "man/generic/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n## , , 1\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2\n## \n## , , 2\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2"
  },
  {
    "objectID": "man/other/array_replicate.html",
    "href": "man/other/array_replicate.html",
    "title": "array_replicate",
    "section": "",
    "text": "The array_replicate() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The array_replicate() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\narray_replicate(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## attr(,\"names\")\n## [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\narray_replicate(x, c(3,3,2)) # replicate to larger size\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9"
  },
  {
    "objectID": "man/other/array_replicate.html#replicate-array-dimensions",
    "href": "man/other/array_replicate.html#replicate-array-dimensions",
    "title": "array_replicate",
    "section": "",
    "text": "The array_replicate() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The array_replicate() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\narray_replicate(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## attr(,\"names\")\n## [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\narray_replicate(x, c(3,3,2)) # replicate to larger size\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    4    7\n## [2,]    2    5    8\n## [3,]    3    6    9"
  },
  {
    "objectID": "man/other/properties.html",
    "href": "man/other/properties.html",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  len() is an alias for length.  lst.len() is an alias for lengths.   These functions were all designed to be efficient.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nAn integer scalar\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, revalong = 2L)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, revalong = 3L) # bind on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n##       x.a    x.b   y.a    y.b\n##     &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan     1    Jan\n##  2:     2    Feb     2    Feb\n##  3:     3    Mar     3    Mar\n##  4:     4    Apr     4    Apr\n##  5:     5    May     5    May\n##  6:     6    Jun     6    Jun\n##  7:     7    Jul     7    Jul\n##  8:     8    Aug     8    Aug\n##  9:     9    Sep     9    Sep\n## 10:    10    Oct    10    Oct\n## 11:    11    Nov    11    Nov\n## 12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/other/properties.html#small-property-functions",
    "href": "man/other/properties.html#small-property-functions",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  len() is an alias for length.  lst.len() is an alias for lengths.   These functions were all designed to be efficient.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nAn integer scalar\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, revalong = 2L)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, revalong = 3L) # bind on new dimension before first\n## , , 1\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , 2\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , 3\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n##       x.a    x.b   y.a    y.b\n##     &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan     1    Jan\n##  2:     2    Feb     2    Feb\n##  3:     3    Mar     3    Mar\n##  4:     4    Apr     4    Apr\n##  5:     5    May     5    May\n##  6:     6    Jun     6    Jun\n##  7:     7    Jul     7    Jul\n##  8:     8    Aug     8    Aug\n##  9:     9    Sep     9    Sep\n## 10:    10    Oct    10    Oct\n## 11:    11    Nov    11    Nov\n## 12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/outer/bc.b.html",
    "href": "man/outer/bc.b.html",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.b(x, y, \"&\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE    NA\n##  [2,]    NA FALSE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n##  [3,]    NA  TRUE    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,]  TRUE FALSE    NA    NA    NA FALSE    NA    NA  TRUE\n##  [5,]    NA  TRUE    NA  TRUE    NA FALSE FALSE FALSE    NA\n##  [6,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [7,]  TRUE    NA  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n##  [8,] FALSE FALSE  TRUE  TRUE  TRUE FALSE    NA FALSE FALSE\n##  [9,]    NA FALSE FALSE  TRUE    NA FALSE    NA  TRUE FALSE\n## [10,]    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE    NA\n##  [2,]  TRUE  TRUE  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE\n##  [3,]  TRUE    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA    NA FALSE FALSE  TRUE\n##  [5,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE    NA FALSE\n##  [7,] FALSE    NA  TRUE  TRUE    NA    NA FALSE    NA    NA\n##  [8,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [9,]    NA FALSE    NA FALSE FALSE    NA    NA    NA  TRUE\n## [10,]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE\n##  [2,] FALSE FALSE  TRUE FALSE    NA    NA    NA    NA FALSE\n##  [3,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE\n##  [4,]    NA    NA  TRUE  TRUE FALSE  TRUE FALSE    NA FALSE\n##  [5,] FALSE    NA    NA    NA    NA    NA  TRUE FALSE    NA\n##  [6,]  TRUE  TRUE FALSE    NA FALSE    NA  TRUE    NA    NA\n##  [7,] FALSE    NA    NA  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n##  [8,] FALSE  TRUE    NA  TRUE  TRUE  TRUE    NA    NA  TRUE\n##  [9,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA FALSE  TRUE FALSE FALSE    NA FALSE\n##  [2,]  TRUE FALSE  TRUE FALSE    NA    NA FALSE    NA  TRUE\n##  [3,] FALSE FALSE FALSE FALSE FALSE    NA    NA    NA  TRUE\n##  [4,]    NA  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA\n##  [5,]    NA    NA FALSE FALSE    NA FALSE FALSE    NA FALSE\n##  [6,]  TRUE  TRUE FALSE FALSE FALSE    NA  TRUE FALSE  TRUE\n##  [7,] FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE    NA\n##  [8,]    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n##  [9,] FALSE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE FALSE\n## [10,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE FALSE FALSE    NA FALSE  TRUE FALSE\n##  [2,] FALSE    NA FALSE    NA  TRUE  TRUE FALSE    NA FALSE\n##  [3,]    NA    NA FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE\n##  [4,] FALSE    NA FALSE FALSE    NA    NA    NA    NA FALSE\n##  [5,]  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n##  [6,]  TRUE  TRUE FALSE  TRUE  TRUE    NA FALSE    NA  TRUE\n##  [7,]    NA FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE\n##  [8,]    NA    NA    NA  TRUE FALSE FALSE    NA FALSE  TRUE\n##  [9,]    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE    NA\n## [10,]    NA  TRUE  TRUE    NA FALSE    NA FALSE    NA  TRUE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA  TRUE FALSE    NA    NA  TRUE  TRUE\n##  [2,]  TRUE  TRUE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n##  [3,]    NA    NA  TRUE FALSE  TRUE    NA    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA FALSE FALSE    NA    NA\n##  [5,] FALSE    NA FALSE    NA FALSE FALSE    NA  TRUE  TRUE\n##  [6,]  TRUE  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n##  [7,] FALSE FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE\n##  [9,] FALSE    NA  TRUE    NA  TRUE  TRUE  TRUE    NA FALSE\n## [10,] FALSE FALSE    NA    NA    NA  TRUE FALSE  TRUE  TRUE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE FALSE\n##  [2,]  TRUE    NA    NA    NA    NA    NA  TRUE FALSE  TRUE\n##  [3,]    NA FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n##  [5,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE FALSE FALSE\n##  [7,]  TRUE FALSE  TRUE    NA    NA    NA FALSE    NA FALSE\n##  [8,]    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA  TRUE\n##  [9,]  TRUE  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE\n## [10,]    NA    NA    NA    NA  TRUE FALSE    NA  TRUE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE  TRUE FALSE  TRUE  TRUE    NA  TRUE  TRUE    NA\n##  [2,]  TRUE FALSE    NA  TRUE    NA  TRUE    NA    NA    NA\n##  [3,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE    NA\n##  [4,] FALSE  TRUE    NA FALSE FALSE FALSE FALSE  TRUE  TRUE\n##  [5,]  TRUE  TRUE    NA    NA FALSE FALSE FALSE    NA FALSE\n##  [6,] FALSE  TRUE  TRUE  TRUE    NA FALSE    NA FALSE FALSE\n##  [7,] FALSE FALSE FALSE  TRUE    NA FALSE FALSE    NA FALSE\n##  [8,]  TRUE  TRUE    NA    NA  TRUE    NA FALSE FALSE    NA\n##  [9,]  TRUE    NA FALSE  TRUE  TRUE FALSE FALSE    NA    NA\n## [10,]    NA    NA    NA FALSE FALSE    NA FALSE FALSE  TRUE\nbc.b(x, y, \"|\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.b(x, y, \"xor\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE FALSE    NA\n##  [2,]    NA  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n##  [3,]    NA FALSE    NA FALSE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,] FALSE  TRUE    NA    NA    NA  TRUE    NA    NA FALSE\n##  [5,]    NA FALSE    NA FALSE    NA  TRUE  TRUE  TRUE    NA\n##  [6,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [7,] FALSE    NA FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n##  [8,]  TRUE  TRUE FALSE FALSE FALSE  TRUE    NA  TRUE  TRUE\n##  [9,]    NA  TRUE  TRUE FALSE    NA  TRUE    NA FALSE  TRUE\n## [10,]    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE  TRUE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE    NA\n##  [2,] FALSE FALSE FALSE FALSE  TRUE    NA FALSE  TRUE FALSE\n##  [3,] FALSE    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA    NA  TRUE  TRUE FALSE\n##  [5,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE    NA  TRUE\n##  [7,]  TRUE    NA FALSE FALSE    NA    NA  TRUE    NA    NA\n##  [8,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [9,]    NA  TRUE    NA  TRUE  TRUE    NA    NA    NA FALSE\n## [10,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE\n##  [2,]  TRUE  TRUE FALSE  TRUE    NA    NA    NA    NA  TRUE\n##  [3,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE FALSE\n##  [4,]    NA    NA FALSE FALSE  TRUE FALSE  TRUE    NA  TRUE\n##  [5,]  TRUE    NA    NA    NA    NA    NA FALSE  TRUE    NA\n##  [6,] FALSE FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA\n##  [7,]  TRUE    NA    NA FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [8,]  TRUE FALSE    NA FALSE FALSE FALSE    NA    NA FALSE\n##  [9,] FALSE FALSE FALSE FALSE    NA FALSE    NA FALSE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA  TRUE  TRUE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA  TRUE FALSE  TRUE  TRUE    NA  TRUE\n##  [2,] FALSE  TRUE FALSE  TRUE    NA    NA  TRUE    NA FALSE\n##  [3,]  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA    NA FALSE\n##  [4,]    NA FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA\n##  [5,]    NA    NA  TRUE  TRUE    NA  TRUE  TRUE    NA  TRUE\n##  [6,] FALSE FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE FALSE\n##  [7,]  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE    NA\n##  [8,]    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n##  [9,]  TRUE FALSE FALSE    NA    NA FALSE FALSE FALSE  TRUE\n## [10,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE  TRUE\n##  [2,]  TRUE    NA  TRUE    NA FALSE FALSE  TRUE    NA  TRUE\n##  [3,]    NA    NA  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n##  [4,]  TRUE    NA  TRUE  TRUE    NA    NA    NA    NA  TRUE\n##  [5,] FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE\n##  [6,] FALSE FALSE  TRUE FALSE FALSE    NA  TRUE    NA FALSE\n##  [7,]    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n##  [8,]    NA    NA    NA FALSE  TRUE  TRUE    NA  TRUE FALSE\n##  [9,]    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE    NA\n## [10,]    NA FALSE FALSE    NA  TRUE    NA  TRUE    NA FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA FALSE  TRUE    NA    NA FALSE FALSE\n##  [2,] FALSE FALSE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n##  [3,]    NA    NA FALSE  TRUE FALSE    NA    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA  TRUE  TRUE    NA    NA\n##  [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA FALSE FALSE\n##  [6,] FALSE FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n##  [7,]  TRUE  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n##  [8,]  TRUE FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE\n##  [9,]  TRUE    NA FALSE    NA FALSE FALSE FALSE    NA  TRUE\n## [10,]  TRUE  TRUE    NA    NA    NA FALSE  TRUE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE  TRUE\n##  [2,] FALSE    NA    NA    NA    NA    NA FALSE  TRUE FALSE\n##  [3,]    NA  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE\n##  [5,]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA  TRUE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE  TRUE  TRUE\n##  [7,] FALSE  TRUE FALSE    NA    NA    NA  TRUE    NA  TRUE\n##  [8,]    NA    NA FALSE FALSE    NA  TRUE FALSE    NA FALSE\n##  [9,] FALSE FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE\n## [10,]    NA    NA    NA    NA FALSE  TRUE    NA FALSE  TRUE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE  TRUE FALSE FALSE    NA FALSE FALSE    NA\n##  [2,] FALSE  TRUE    NA FALSE    NA FALSE    NA    NA    NA\n##  [3,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE    NA\n##  [4,]  TRUE FALSE    NA  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n##  [5,] FALSE FALSE    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n##  [6,]  TRUE FALSE FALSE FALSE    NA  TRUE    NA  TRUE  TRUE\n##  [7,]  TRUE  TRUE  TRUE FALSE    NA  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE FALSE    NA    NA FALSE    NA  TRUE  TRUE    NA\n##  [9,] FALSE    NA  TRUE FALSE FALSE  TRUE  TRUE    NA    NA\n## [10,]    NA    NA    NA  TRUE  TRUE    NA  TRUE  TRUE FALSE\nbc.b(x, y, \"nand\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.b(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE    NA\n##  [2,]    NA FALSE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n##  [3,]    NA  TRUE    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,]  TRUE FALSE    NA    NA    NA FALSE    NA    NA  TRUE\n##  [5,]    NA  TRUE    NA  TRUE    NA FALSE FALSE FALSE    NA\n##  [6,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [7,]  TRUE    NA  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n##  [8,] FALSE FALSE  TRUE  TRUE  TRUE FALSE    NA FALSE FALSE\n##  [9,]    NA FALSE FALSE  TRUE    NA FALSE    NA  TRUE FALSE\n## [10,]    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE    NA\n##  [2,]  TRUE  TRUE  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE\n##  [3,]  TRUE    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA    NA FALSE FALSE  TRUE\n##  [5,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE    NA FALSE\n##  [7,] FALSE    NA  TRUE  TRUE    NA    NA FALSE    NA    NA\n##  [8,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [9,]    NA FALSE    NA FALSE FALSE    NA    NA    NA  TRUE\n## [10,]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE\n##  [2,] FALSE FALSE  TRUE FALSE    NA    NA    NA    NA FALSE\n##  [3,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE\n##  [4,]    NA    NA  TRUE  TRUE FALSE  TRUE FALSE    NA FALSE\n##  [5,] FALSE    NA    NA    NA    NA    NA  TRUE FALSE    NA\n##  [6,]  TRUE  TRUE FALSE    NA FALSE    NA  TRUE    NA    NA\n##  [7,] FALSE    NA    NA  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n##  [8,] FALSE  TRUE    NA  TRUE  TRUE  TRUE    NA    NA  TRUE\n##  [9,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA FALSE  TRUE FALSE FALSE    NA FALSE\n##  [2,]  TRUE FALSE  TRUE FALSE    NA    NA FALSE    NA  TRUE\n##  [3,] FALSE FALSE FALSE FALSE FALSE    NA    NA    NA  TRUE\n##  [4,]    NA  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA\n##  [5,]    NA    NA FALSE FALSE    NA FALSE FALSE    NA FALSE\n##  [6,]  TRUE  TRUE FALSE FALSE FALSE    NA  TRUE FALSE  TRUE\n##  [7,] FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE    NA\n##  [8,]    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n##  [9,] FALSE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE FALSE\n## [10,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE FALSE FALSE    NA FALSE  TRUE FALSE\n##  [2,] FALSE    NA FALSE    NA  TRUE  TRUE FALSE    NA FALSE\n##  [3,]    NA    NA FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE\n##  [4,] FALSE    NA FALSE FALSE    NA    NA    NA    NA FALSE\n##  [5,]  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n##  [6,]  TRUE  TRUE FALSE  TRUE  TRUE    NA FALSE    NA  TRUE\n##  [7,]    NA FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE\n##  [8,]    NA    NA    NA  TRUE FALSE FALSE    NA FALSE  TRUE\n##  [9,]    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE    NA\n## [10,]    NA  TRUE  TRUE    NA FALSE    NA FALSE    NA  TRUE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA  TRUE FALSE    NA    NA  TRUE  TRUE\n##  [2,]  TRUE  TRUE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n##  [3,]    NA    NA  TRUE FALSE  TRUE    NA    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA FALSE FALSE    NA    NA\n##  [5,] FALSE    NA FALSE    NA FALSE FALSE    NA  TRUE  TRUE\n##  [6,]  TRUE  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n##  [7,] FALSE FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE\n##  [9,] FALSE    NA  TRUE    NA  TRUE  TRUE  TRUE    NA FALSE\n## [10,] FALSE FALSE    NA    NA    NA  TRUE FALSE  TRUE  TRUE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE FALSE\n##  [2,]  TRUE    NA    NA    NA    NA    NA  TRUE FALSE  TRUE\n##  [3,]    NA FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n##  [5,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE FALSE FALSE\n##  [7,]  TRUE FALSE  TRUE    NA    NA    NA FALSE    NA FALSE\n##  [8,]    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA  TRUE\n##  [9,]  TRUE  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE\n## [10,]    NA    NA    NA    NA  TRUE FALSE    NA  TRUE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE  TRUE FALSE  TRUE  TRUE    NA  TRUE  TRUE    NA\n##  [2,]  TRUE FALSE    NA  TRUE    NA  TRUE    NA    NA    NA\n##  [3,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE    NA\n##  [4,] FALSE  TRUE    NA FALSE FALSE FALSE FALSE  TRUE  TRUE\n##  [5,]  TRUE  TRUE    NA    NA FALSE FALSE FALSE    NA FALSE\n##  [6,] FALSE  TRUE  TRUE  TRUE    NA FALSE    NA FALSE FALSE\n##  [7,] FALSE FALSE FALSE  TRUE    NA FALSE FALSE    NA FALSE\n##  [8,]  TRUE  TRUE    NA    NA  TRUE    NA FALSE FALSE    NA\n##  [9,]  TRUE    NA FALSE  TRUE  TRUE FALSE FALSE    NA    NA\n## [10,]    NA    NA    NA FALSE FALSE    NA FALSE FALSE  TRUE\nbc.b(x, y, \"!=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE FALSE    NA\n##  [2,]    NA  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n##  [3,]    NA FALSE    NA FALSE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,] FALSE  TRUE    NA    NA    NA  TRUE    NA    NA FALSE\n##  [5,]    NA FALSE    NA FALSE    NA  TRUE  TRUE  TRUE    NA\n##  [6,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [7,] FALSE    NA FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n##  [8,]  TRUE  TRUE FALSE FALSE FALSE  TRUE    NA  TRUE  TRUE\n##  [9,]    NA  TRUE  TRUE FALSE    NA  TRUE    NA FALSE  TRUE\n## [10,]    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE  TRUE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE    NA\n##  [2,] FALSE FALSE FALSE FALSE  TRUE    NA FALSE  TRUE FALSE\n##  [3,] FALSE    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA    NA  TRUE  TRUE FALSE\n##  [5,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE    NA  TRUE\n##  [7,]  TRUE    NA FALSE FALSE    NA    NA  TRUE    NA    NA\n##  [8,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [9,]    NA  TRUE    NA  TRUE  TRUE    NA    NA    NA FALSE\n## [10,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE\n##  [2,]  TRUE  TRUE FALSE  TRUE    NA    NA    NA    NA  TRUE\n##  [3,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE FALSE\n##  [4,]    NA    NA FALSE FALSE  TRUE FALSE  TRUE    NA  TRUE\n##  [5,]  TRUE    NA    NA    NA    NA    NA FALSE  TRUE    NA\n##  [6,] FALSE FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA\n##  [7,]  TRUE    NA    NA FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [8,]  TRUE FALSE    NA FALSE FALSE FALSE    NA    NA FALSE\n##  [9,] FALSE FALSE FALSE FALSE    NA FALSE    NA FALSE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA  TRUE  TRUE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA  TRUE FALSE  TRUE  TRUE    NA  TRUE\n##  [2,] FALSE  TRUE FALSE  TRUE    NA    NA  TRUE    NA FALSE\n##  [3,]  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA    NA FALSE\n##  [4,]    NA FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA\n##  [5,]    NA    NA  TRUE  TRUE    NA  TRUE  TRUE    NA  TRUE\n##  [6,] FALSE FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE FALSE\n##  [7,]  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE    NA\n##  [8,]    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n##  [9,]  TRUE FALSE FALSE    NA    NA FALSE FALSE FALSE  TRUE\n## [10,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE  TRUE\n##  [2,]  TRUE    NA  TRUE    NA FALSE FALSE  TRUE    NA  TRUE\n##  [3,]    NA    NA  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n##  [4,]  TRUE    NA  TRUE  TRUE    NA    NA    NA    NA  TRUE\n##  [5,] FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE\n##  [6,] FALSE FALSE  TRUE FALSE FALSE    NA  TRUE    NA FALSE\n##  [7,]    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n##  [8,]    NA    NA    NA FALSE  TRUE  TRUE    NA  TRUE FALSE\n##  [9,]    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE    NA\n## [10,]    NA FALSE FALSE    NA  TRUE    NA  TRUE    NA FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA FALSE  TRUE    NA    NA FALSE FALSE\n##  [2,] FALSE FALSE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n##  [3,]    NA    NA FALSE  TRUE FALSE    NA    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA  TRUE  TRUE    NA    NA\n##  [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA FALSE FALSE\n##  [6,] FALSE FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n##  [7,]  TRUE  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n##  [8,]  TRUE FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE\n##  [9,]  TRUE    NA FALSE    NA FALSE FALSE FALSE    NA  TRUE\n## [10,]  TRUE  TRUE    NA    NA    NA FALSE  TRUE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE  TRUE\n##  [2,] FALSE    NA    NA    NA    NA    NA FALSE  TRUE FALSE\n##  [3,]    NA  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE\n##  [5,]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA  TRUE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE  TRUE  TRUE\n##  [7,] FALSE  TRUE FALSE    NA    NA    NA  TRUE    NA  TRUE\n##  [8,]    NA    NA FALSE FALSE    NA  TRUE FALSE    NA FALSE\n##  [9,] FALSE FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE\n## [10,]    NA    NA    NA    NA FALSE  TRUE    NA FALSE  TRUE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE  TRUE FALSE FALSE    NA FALSE FALSE    NA\n##  [2,] FALSE  TRUE    NA FALSE    NA FALSE    NA    NA    NA\n##  [3,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE    NA\n##  [4,]  TRUE FALSE    NA  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n##  [5,] FALSE FALSE    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n##  [6,]  TRUE FALSE FALSE FALSE    NA  TRUE    NA  TRUE  TRUE\n##  [7,]  TRUE  TRUE  TRUE FALSE    NA  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE FALSE    NA    NA FALSE    NA  TRUE  TRUE    NA\n##  [9,] FALSE    NA  TRUE FALSE FALSE  TRUE  TRUE    NA    NA\n## [10,]    NA    NA    NA  TRUE  TRUE    NA  TRUE  TRUE FALSE"
  },
  {
    "objectID": "man/outer/bc.b.html#broadcasted-boolean-operations",
    "href": "man/outer/bc.b.html#broadcasted-boolean-operations",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.b(x, y, \"&\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE    NA\n##  [2,]    NA FALSE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n##  [3,]    NA  TRUE    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,]  TRUE FALSE    NA    NA    NA FALSE    NA    NA  TRUE\n##  [5,]    NA  TRUE    NA  TRUE    NA FALSE FALSE FALSE    NA\n##  [6,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [7,]  TRUE    NA  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n##  [8,] FALSE FALSE  TRUE  TRUE  TRUE FALSE    NA FALSE FALSE\n##  [9,]    NA FALSE FALSE  TRUE    NA FALSE    NA  TRUE FALSE\n## [10,]    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE    NA\n##  [2,]  TRUE  TRUE  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE\n##  [3,]  TRUE    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA    NA FALSE FALSE  TRUE\n##  [5,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE    NA FALSE\n##  [7,] FALSE    NA  TRUE  TRUE    NA    NA FALSE    NA    NA\n##  [8,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [9,]    NA FALSE    NA FALSE FALSE    NA    NA    NA  TRUE\n## [10,]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE\n##  [2,] FALSE FALSE  TRUE FALSE    NA    NA    NA    NA FALSE\n##  [3,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE\n##  [4,]    NA    NA  TRUE  TRUE FALSE  TRUE FALSE    NA FALSE\n##  [5,] FALSE    NA    NA    NA    NA    NA  TRUE FALSE    NA\n##  [6,]  TRUE  TRUE FALSE    NA FALSE    NA  TRUE    NA    NA\n##  [7,] FALSE    NA    NA  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n##  [8,] FALSE  TRUE    NA  TRUE  TRUE  TRUE    NA    NA  TRUE\n##  [9,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA FALSE  TRUE FALSE FALSE    NA FALSE\n##  [2,]  TRUE FALSE  TRUE FALSE    NA    NA FALSE    NA  TRUE\n##  [3,] FALSE FALSE FALSE FALSE FALSE    NA    NA    NA  TRUE\n##  [4,]    NA  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA\n##  [5,]    NA    NA FALSE FALSE    NA FALSE FALSE    NA FALSE\n##  [6,]  TRUE  TRUE FALSE FALSE FALSE    NA  TRUE FALSE  TRUE\n##  [7,] FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE    NA\n##  [8,]    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n##  [9,] FALSE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE FALSE\n## [10,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE FALSE FALSE    NA FALSE  TRUE FALSE\n##  [2,] FALSE    NA FALSE    NA  TRUE  TRUE FALSE    NA FALSE\n##  [3,]    NA    NA FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE\n##  [4,] FALSE    NA FALSE FALSE    NA    NA    NA    NA FALSE\n##  [5,]  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n##  [6,]  TRUE  TRUE FALSE  TRUE  TRUE    NA FALSE    NA  TRUE\n##  [7,]    NA FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE\n##  [8,]    NA    NA    NA  TRUE FALSE FALSE    NA FALSE  TRUE\n##  [9,]    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE    NA\n## [10,]    NA  TRUE  TRUE    NA FALSE    NA FALSE    NA  TRUE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA  TRUE FALSE    NA    NA  TRUE  TRUE\n##  [2,]  TRUE  TRUE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n##  [3,]    NA    NA  TRUE FALSE  TRUE    NA    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA FALSE FALSE    NA    NA\n##  [5,] FALSE    NA FALSE    NA FALSE FALSE    NA  TRUE  TRUE\n##  [6,]  TRUE  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n##  [7,] FALSE FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE\n##  [9,] FALSE    NA  TRUE    NA  TRUE  TRUE  TRUE    NA FALSE\n## [10,] FALSE FALSE    NA    NA    NA  TRUE FALSE  TRUE  TRUE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE FALSE\n##  [2,]  TRUE    NA    NA    NA    NA    NA  TRUE FALSE  TRUE\n##  [3,]    NA FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n##  [5,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE FALSE FALSE\n##  [7,]  TRUE FALSE  TRUE    NA    NA    NA FALSE    NA FALSE\n##  [8,]    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA  TRUE\n##  [9,]  TRUE  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE\n## [10,]    NA    NA    NA    NA  TRUE FALSE    NA  TRUE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE  TRUE FALSE  TRUE  TRUE    NA  TRUE  TRUE    NA\n##  [2,]  TRUE FALSE    NA  TRUE    NA  TRUE    NA    NA    NA\n##  [3,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE    NA\n##  [4,] FALSE  TRUE    NA FALSE FALSE FALSE FALSE  TRUE  TRUE\n##  [5,]  TRUE  TRUE    NA    NA FALSE FALSE FALSE    NA FALSE\n##  [6,] FALSE  TRUE  TRUE  TRUE    NA FALSE    NA FALSE FALSE\n##  [7,] FALSE FALSE FALSE  TRUE    NA FALSE FALSE    NA FALSE\n##  [8,]  TRUE  TRUE    NA    NA  TRUE    NA FALSE FALSE    NA\n##  [9,]  TRUE    NA FALSE  TRUE  TRUE FALSE FALSE    NA    NA\n## [10,]    NA    NA    NA FALSE FALSE    NA FALSE FALSE  TRUE\nbc.b(x, y, \"|\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.b(x, y, \"xor\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE FALSE    NA\n##  [2,]    NA  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n##  [3,]    NA FALSE    NA FALSE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,] FALSE  TRUE    NA    NA    NA  TRUE    NA    NA FALSE\n##  [5,]    NA FALSE    NA FALSE    NA  TRUE  TRUE  TRUE    NA\n##  [6,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [7,] FALSE    NA FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n##  [8,]  TRUE  TRUE FALSE FALSE FALSE  TRUE    NA  TRUE  TRUE\n##  [9,]    NA  TRUE  TRUE FALSE    NA  TRUE    NA FALSE  TRUE\n## [10,]    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE  TRUE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE    NA\n##  [2,] FALSE FALSE FALSE FALSE  TRUE    NA FALSE  TRUE FALSE\n##  [3,] FALSE    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA    NA  TRUE  TRUE FALSE\n##  [5,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE    NA  TRUE\n##  [7,]  TRUE    NA FALSE FALSE    NA    NA  TRUE    NA    NA\n##  [8,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [9,]    NA  TRUE    NA  TRUE  TRUE    NA    NA    NA FALSE\n## [10,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE\n##  [2,]  TRUE  TRUE FALSE  TRUE    NA    NA    NA    NA  TRUE\n##  [3,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE FALSE\n##  [4,]    NA    NA FALSE FALSE  TRUE FALSE  TRUE    NA  TRUE\n##  [5,]  TRUE    NA    NA    NA    NA    NA FALSE  TRUE    NA\n##  [6,] FALSE FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA\n##  [7,]  TRUE    NA    NA FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [8,]  TRUE FALSE    NA FALSE FALSE FALSE    NA    NA FALSE\n##  [9,] FALSE FALSE FALSE FALSE    NA FALSE    NA FALSE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA  TRUE  TRUE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA  TRUE FALSE  TRUE  TRUE    NA  TRUE\n##  [2,] FALSE  TRUE FALSE  TRUE    NA    NA  TRUE    NA FALSE\n##  [3,]  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA    NA FALSE\n##  [4,]    NA FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA\n##  [5,]    NA    NA  TRUE  TRUE    NA  TRUE  TRUE    NA  TRUE\n##  [6,] FALSE FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE FALSE\n##  [7,]  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE    NA\n##  [8,]    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n##  [9,]  TRUE FALSE FALSE    NA    NA FALSE FALSE FALSE  TRUE\n## [10,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE  TRUE\n##  [2,]  TRUE    NA  TRUE    NA FALSE FALSE  TRUE    NA  TRUE\n##  [3,]    NA    NA  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n##  [4,]  TRUE    NA  TRUE  TRUE    NA    NA    NA    NA  TRUE\n##  [5,] FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE\n##  [6,] FALSE FALSE  TRUE FALSE FALSE    NA  TRUE    NA FALSE\n##  [7,]    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n##  [8,]    NA    NA    NA FALSE  TRUE  TRUE    NA  TRUE FALSE\n##  [9,]    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE    NA\n## [10,]    NA FALSE FALSE    NA  TRUE    NA  TRUE    NA FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA FALSE  TRUE    NA    NA FALSE FALSE\n##  [2,] FALSE FALSE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n##  [3,]    NA    NA FALSE  TRUE FALSE    NA    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA  TRUE  TRUE    NA    NA\n##  [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA FALSE FALSE\n##  [6,] FALSE FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n##  [7,]  TRUE  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n##  [8,]  TRUE FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE\n##  [9,]  TRUE    NA FALSE    NA FALSE FALSE FALSE    NA  TRUE\n## [10,]  TRUE  TRUE    NA    NA    NA FALSE  TRUE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE  TRUE\n##  [2,] FALSE    NA    NA    NA    NA    NA FALSE  TRUE FALSE\n##  [3,]    NA  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE\n##  [5,]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA  TRUE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE  TRUE  TRUE\n##  [7,] FALSE  TRUE FALSE    NA    NA    NA  TRUE    NA  TRUE\n##  [8,]    NA    NA FALSE FALSE    NA  TRUE FALSE    NA FALSE\n##  [9,] FALSE FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE\n## [10,]    NA    NA    NA    NA FALSE  TRUE    NA FALSE  TRUE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE  TRUE FALSE FALSE    NA FALSE FALSE    NA\n##  [2,] FALSE  TRUE    NA FALSE    NA FALSE    NA    NA    NA\n##  [3,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE    NA\n##  [4,]  TRUE FALSE    NA  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n##  [5,] FALSE FALSE    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n##  [6,]  TRUE FALSE FALSE FALSE    NA  TRUE    NA  TRUE  TRUE\n##  [7,]  TRUE  TRUE  TRUE FALSE    NA  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE FALSE    NA    NA FALSE    NA  TRUE  TRUE    NA\n##  [9,] FALSE    NA  TRUE FALSE FALSE  TRUE  TRUE    NA    NA\n## [10,]    NA    NA    NA  TRUE  TRUE    NA  TRUE  TRUE FALSE\nbc.b(x, y, \"nand\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.b(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE    NA\n##  [2,]    NA FALSE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n##  [3,]    NA  TRUE    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,]  TRUE FALSE    NA    NA    NA FALSE    NA    NA  TRUE\n##  [5,]    NA  TRUE    NA  TRUE    NA FALSE FALSE FALSE    NA\n##  [6,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [7,]  TRUE    NA  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n##  [8,] FALSE FALSE  TRUE  TRUE  TRUE FALSE    NA FALSE FALSE\n##  [9,]    NA FALSE FALSE  TRUE    NA FALSE    NA  TRUE FALSE\n## [10,]    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE    NA\n##  [2,]  TRUE  TRUE  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE\n##  [3,]  TRUE    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA    NA FALSE FALSE  TRUE\n##  [5,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE    NA FALSE\n##  [7,] FALSE    NA  TRUE  TRUE    NA    NA FALSE    NA    NA\n##  [8,] FALSE  TRUE    NA    NA FALSE FALSE    NA    NA FALSE\n##  [9,]    NA FALSE    NA FALSE FALSE    NA    NA    NA  TRUE\n## [10,]  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE\n##  [2,] FALSE FALSE  TRUE FALSE    NA    NA    NA    NA FALSE\n##  [3,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE\n##  [4,]    NA    NA  TRUE  TRUE FALSE  TRUE FALSE    NA FALSE\n##  [5,] FALSE    NA    NA    NA    NA    NA  TRUE FALSE    NA\n##  [6,]  TRUE  TRUE FALSE    NA FALSE    NA  TRUE    NA    NA\n##  [7,] FALSE    NA    NA  TRUE FALSE  TRUE  TRUE  TRUE  TRUE\n##  [8,] FALSE  TRUE    NA  TRUE  TRUE  TRUE    NA    NA  TRUE\n##  [9,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE    NA  TRUE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA FALSE  TRUE FALSE FALSE    NA FALSE\n##  [2,]  TRUE FALSE  TRUE FALSE    NA    NA FALSE    NA  TRUE\n##  [3,] FALSE FALSE FALSE FALSE FALSE    NA    NA    NA  TRUE\n##  [4,]    NA  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA\n##  [5,]    NA    NA FALSE FALSE    NA FALSE FALSE    NA FALSE\n##  [6,]  TRUE  TRUE FALSE FALSE FALSE    NA  TRUE FALSE  TRUE\n##  [7,] FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE    NA\n##  [8,]    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n##  [9,] FALSE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE FALSE\n## [10,]    NA    NA  TRUE  TRUE FALSE  TRUE    NA FALSE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE FALSE FALSE    NA FALSE  TRUE FALSE\n##  [2,] FALSE    NA FALSE    NA  TRUE  TRUE FALSE    NA FALSE\n##  [3,]    NA    NA FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE\n##  [4,] FALSE    NA FALSE FALSE    NA    NA    NA    NA FALSE\n##  [5,]  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE FALSE  TRUE\n##  [6,]  TRUE  TRUE FALSE  TRUE  TRUE    NA FALSE    NA  TRUE\n##  [7,]    NA FALSE  TRUE  TRUE FALSE FALSE FALSE  TRUE FALSE\n##  [8,]    NA    NA    NA  TRUE FALSE FALSE    NA FALSE  TRUE\n##  [9,]    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE    NA\n## [10,]    NA  TRUE  TRUE    NA FALSE    NA FALSE    NA  TRUE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE    NA  TRUE FALSE    NA    NA  TRUE  TRUE\n##  [2,]  TRUE  TRUE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n##  [3,]    NA    NA  TRUE FALSE  TRUE    NA    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA FALSE FALSE    NA    NA\n##  [5,] FALSE    NA FALSE    NA FALSE FALSE    NA  TRUE  TRUE\n##  [6,]  TRUE  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n##  [7,] FALSE FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE\n##  [9,] FALSE    NA  TRUE    NA  TRUE  TRUE  TRUE    NA FALSE\n## [10,] FALSE FALSE    NA    NA    NA  TRUE FALSE  TRUE  TRUE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE FALSE  TRUE  TRUE    NA    NA  TRUE FALSE\n##  [2,]  TRUE    NA    NA    NA    NA    NA  TRUE FALSE  TRUE\n##  [3,]    NA FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE\n##  [4,] FALSE  TRUE FALSE  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n##  [5,] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE FALSE FALSE\n##  [7,]  TRUE FALSE  TRUE    NA    NA    NA FALSE    NA FALSE\n##  [8,]    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA  TRUE\n##  [9,]  TRUE  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE\n## [10,]    NA    NA    NA    NA  TRUE FALSE    NA  TRUE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE  TRUE FALSE  TRUE  TRUE    NA  TRUE  TRUE    NA\n##  [2,]  TRUE FALSE    NA  TRUE    NA  TRUE    NA    NA    NA\n##  [3,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE  TRUE    NA\n##  [4,] FALSE  TRUE    NA FALSE FALSE FALSE FALSE  TRUE  TRUE\n##  [5,]  TRUE  TRUE    NA    NA FALSE FALSE FALSE    NA FALSE\n##  [6,] FALSE  TRUE  TRUE  TRUE    NA FALSE    NA FALSE FALSE\n##  [7,] FALSE FALSE FALSE  TRUE    NA FALSE FALSE    NA FALSE\n##  [8,]  TRUE  TRUE    NA    NA  TRUE    NA FALSE FALSE    NA\n##  [9,]  TRUE    NA FALSE  TRUE  TRUE FALSE FALSE    NA    NA\n## [10,]    NA    NA    NA FALSE FALSE    NA FALSE FALSE  TRUE\nbc.b(x, y, \"!=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE FALSE    NA\n##  [2,]    NA  TRUE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n##  [3,]    NA FALSE    NA FALSE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,] FALSE  TRUE    NA    NA    NA  TRUE    NA    NA FALSE\n##  [5,]    NA FALSE    NA FALSE    NA  TRUE  TRUE  TRUE    NA\n##  [6,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [7,] FALSE    NA FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n##  [8,]  TRUE  TRUE FALSE FALSE FALSE  TRUE    NA  TRUE  TRUE\n##  [9,]    NA  TRUE  TRUE FALSE    NA  TRUE    NA FALSE  TRUE\n## [10,]    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE  TRUE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE    NA\n##  [2,] FALSE FALSE FALSE FALSE  TRUE    NA FALSE  TRUE FALSE\n##  [3,] FALSE    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE\n##  [4,]  TRUE  TRUE    NA  TRUE    NA    NA  TRUE  TRUE FALSE\n##  [5,]  TRUE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE\n##  [6,]  TRUE    NA FALSE    NA FALSE    NA  TRUE    NA  TRUE\n##  [7,]  TRUE    NA FALSE FALSE    NA    NA  TRUE    NA    NA\n##  [8,]  TRUE FALSE    NA    NA  TRUE  TRUE    NA    NA  TRUE\n##  [9,]    NA  TRUE    NA  TRUE  TRUE    NA    NA    NA FALSE\n## [10,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE    NA\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA    NA    NA  TRUE    NA  TRUE  TRUE  TRUE FALSE\n##  [2,]  TRUE  TRUE FALSE  TRUE    NA    NA    NA    NA  TRUE\n##  [3,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE FALSE\n##  [4,]    NA    NA FALSE FALSE  TRUE FALSE  TRUE    NA  TRUE\n##  [5,]  TRUE    NA    NA    NA    NA    NA FALSE  TRUE    NA\n##  [6,] FALSE FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA\n##  [7,]  TRUE    NA    NA FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [8,]  TRUE FALSE    NA FALSE FALSE FALSE    NA    NA FALSE\n##  [9,] FALSE FALSE FALSE FALSE    NA FALSE    NA FALSE    NA\n## [10,]    NA    NA    NA    NA    NA    NA    NA  TRUE  TRUE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA  TRUE FALSE  TRUE  TRUE    NA  TRUE\n##  [2,] FALSE  TRUE FALSE  TRUE    NA    NA  TRUE    NA FALSE\n##  [3,]  TRUE  TRUE  TRUE  TRUE  TRUE    NA    NA    NA FALSE\n##  [4,]    NA FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA\n##  [5,]    NA    NA  TRUE  TRUE    NA  TRUE  TRUE    NA  TRUE\n##  [6,] FALSE FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE FALSE\n##  [7,]  TRUE FALSE    NA FALSE FALSE    NA    NA FALSE    NA\n##  [8,]    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n##  [9,]  TRUE FALSE FALSE    NA    NA FALSE FALSE FALSE  TRUE\n## [10,]    NA    NA FALSE FALSE  TRUE FALSE    NA  TRUE    NA\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE  TRUE\n##  [2,]  TRUE    NA  TRUE    NA FALSE FALSE  TRUE    NA  TRUE\n##  [3,]    NA    NA  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE\n##  [4,]  TRUE    NA  TRUE  TRUE    NA    NA    NA    NA  TRUE\n##  [5,] FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE  TRUE FALSE\n##  [6,] FALSE FALSE  TRUE FALSE FALSE    NA  TRUE    NA FALSE\n##  [7,]    NA  TRUE FALSE FALSE  TRUE  TRUE  TRUE FALSE  TRUE\n##  [8,]    NA    NA    NA FALSE  TRUE  TRUE    NA  TRUE FALSE\n##  [9,]    NA    NA FALSE    NA FALSE FALSE FALSE  TRUE    NA\n## [10,]    NA FALSE FALSE    NA  TRUE    NA  TRUE    NA FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA FALSE    NA FALSE  TRUE    NA    NA FALSE FALSE\n##  [2,] FALSE FALSE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n##  [3,]    NA    NA FALSE  TRUE FALSE    NA    NA    NA  TRUE\n##  [4,] FALSE FALSE    NA FALSE    NA  TRUE  TRUE    NA    NA\n##  [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA FALSE FALSE\n##  [6,] FALSE FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n##  [7,]  TRUE  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n##  [8,]  TRUE FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE\n##  [9,]  TRUE    NA FALSE    NA FALSE FALSE FALSE    NA  TRUE\n## [10,]  TRUE  TRUE    NA    NA    NA FALSE  TRUE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]    NA  TRUE  TRUE FALSE FALSE    NA    NA FALSE  TRUE\n##  [2,] FALSE    NA    NA    NA    NA    NA FALSE  TRUE FALSE\n##  [3,]    NA  TRUE  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE\n##  [4,]  TRUE FALSE  TRUE FALSE FALSE  TRUE  TRUE FALSE FALSE\n##  [5,]  TRUE  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA  TRUE\n##  [6,] FALSE    NA  TRUE    NA  TRUE    NA FALSE  TRUE  TRUE\n##  [7,] FALSE  TRUE FALSE    NA    NA    NA  TRUE    NA  TRUE\n##  [8,]    NA    NA FALSE FALSE    NA  TRUE FALSE    NA FALSE\n##  [9,] FALSE FALSE  TRUE    NA  TRUE  TRUE    NA    NA  TRUE\n## [10,]    NA    NA    NA    NA FALSE  TRUE    NA FALSE  TRUE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE  TRUE FALSE FALSE    NA FALSE FALSE    NA\n##  [2,] FALSE  TRUE    NA FALSE    NA FALSE    NA    NA    NA\n##  [3,] FALSE FALSE  TRUE  TRUE FALSE FALSE  TRUE FALSE    NA\n##  [4,]  TRUE FALSE    NA  TRUE  TRUE  TRUE  TRUE FALSE FALSE\n##  [5,] FALSE FALSE    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n##  [6,]  TRUE FALSE FALSE FALSE    NA  TRUE    NA  TRUE  TRUE\n##  [7,]  TRUE  TRUE  TRUE FALSE    NA  TRUE  TRUE    NA  TRUE\n##  [8,] FALSE FALSE    NA    NA FALSE    NA  TRUE  TRUE    NA\n##  [9,] FALSE    NA  TRUE FALSE FALSE  TRUE  TRUE    NA    NA\n## [10,]    NA    NA    NA  TRUE  TRUE    NA  TRUE  TRUE FALSE"
  },
  {
    "objectID": "man/outer/bc.d.html",
    "href": "man/outer/bc.d.html",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##        [,1]  [,2]   [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 551.1 412.1  360.1 629.1 590.1 133.1 809.1 760.1 253.1\n##  [2,]  73.1 960.1  996.1 380.1 106.1 383.1 720.1 335.1 501.1\n##  [3,] 392.1 628.1  207.1 507.1 452.1 507.1 794.1 606.1 395.1\n##  [4,] 162.1 584.1  418.1  62.1 536.1 536.1 327.1 833.1 588.1\n##  [5,] 768.1 312.1  779.1 568.1 524.1 773.1   8.1 740.1 343.1\n##  [6,] 268.1 769.1  856.1 935.1 577.1 795.1 494.1 439.1  98.1\n##  [7,] 210.1 384.1  550.1 722.1 294.1 563.1 539.1 105.1 585.1\n##  [8,] 209.1 547.1  899.1  17.1 840.1 811.1 945.1 981.1 942.1\n##  [9,] 972.1 270.1 1002.1 156.1 997.1 799.1 838.1 416.1 554.1\n## [10,] 604.1  68.1  581.1 171.1 394.1 286.1 888.1 305.1 276.1\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]   [,6]  [,7]  [,8]  [,9]\n##  [1,] 724.1 203.1  91.1  18.1 177.1  386.1 104.1 422.1 321.1\n##  [2,] 966.1 484.1 580.1 964.1  36.1  818.1 206.1 385.1 761.1\n##  [3,] 382.1 483.1 772.1 805.1 337.1  936.1 651.1 371.1 727.1\n##  [4,] 689.1 310.1 384.1 448.1 890.1  517.1 220.1 766.1 712.1\n##  [5,]  20.1 803.1 712.1 223.1 817.1 1003.1 460.1 802.1 509.1\n##  [6,]  29.1 948.1 194.1  60.1 323.1  481.1 702.1 960.1 474.1\n##  [7,] 397.1 388.1 178.1 520.1 656.1  403.1 931.1 341.1 857.1\n##  [8,] 669.1 899.1 645.1  40.1 450.1  385.1 878.1  16.1 734.1\n##  [9,] 800.1 177.1 184.1 507.1 963.1  450.1 524.1  60.1  53.1\n## [10,] 917.1 955.1 811.1 125.1  42.1  883.1 148.1 664.1 918.1\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]   [,4]  [,5]   [,6]  [,7]  [,8]  [,9]\n##  [1,] 495.1 352.1 159.1   20.1 351.1  165.1 955.1 226.1 663.1\n##  [2,]  33.1  52.1 564.1 1001.1 438.1  254.1 909.1 148.1 142.1\n##  [3,] 698.1 565.1 387.1  423.1 230.1   89.1  70.1 119.1  20.1\n##  [4,] 855.1 925.1 703.1  829.1 857.1  561.1  83.1 515.1 980.1\n##  [5,] 705.1 375.1 846.1  838.1 739.1  808.1 103.1 897.1 185.1\n##  [6,] 907.1 460.1 921.1  738.1 594.1  427.1 727.1 957.1 304.1\n##  [7,] 191.1 737.1 860.1  401.1 370.1   14.1 530.1  35.1 336.1\n##  [8,] 348.1 867.1 972.1  776.1 954.1 1001.1 355.1 702.1 108.1\n##  [9,] 541.1 594.1 960.1  292.1 265.1  404.1 439.1 822.1 183.1\n## [10,] 778.1 951.1 187.1  828.1 328.1  294.1 138.1 136.1 532.1\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 844.1 865.1 419.1 263.1 782.1 446.1  67.1  24.1 700.1\n##  [2,] 973.1  39.1 384.1 685.1 364.1 613.1   6.1 447.1 254.1\n##  [3,] 205.1 112.1 327.1 792.1 407.1 255.1 905.1 703.1  38.1\n##  [4,] 816.1 526.1 158.1 271.1   5.1 309.1 252.1 677.1 250.1\n##  [5,] 639.1 241.1 745.1 238.1 975.1 329.1 441.1 990.1  77.1\n##  [6,] 959.1 461.1 974.1 404.1 925.1 410.1 998.1 403.1 257.1\n##  [7,] 830.1 853.1 121.1 270.1  45.1 701.1  45.1 411.1 579.1\n##  [8,] 721.1 253.1  51.1 594.1  30.1 270.1 922.1 192.1 596.1\n##  [9,] 660.1 794.1 168.1 983.1 539.1 123.1 530.1 316.1 678.1\n## [10,] 989.1 497.1 255.1 735.1 142.1 441.1 714.1 971.1 735.1\n## \n## , , 5\n## \n##         [,1]  [,2]   [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  136.1   2.1  279.1  25.1 659.1 194.1 605.1 956.1 459.1\n##  [2,]  906.1 901.1  168.1 260.1 541.1 444.1 363.1 767.1 110.1\n##  [3,]   32.1 144.1  912.1 442.1 886.1 104.1 453.1 140.1 467.1\n##  [4,]  214.1 486.1 1002.1 262.1 863.1 715.1 280.1 557.1 485.1\n##  [5,]  575.1 316.1  969.1 975.1 592.1 854.1 426.1 876.1 104.1\n##  [6,] 1001.1 863.1  838.1   8.1 520.1 630.1 997.1 406.1 357.1\n##  [7,]  720.1 704.1  382.1  53.1 995.1 786.1 843.1 584.1 429.1\n##  [8,]  311.1 153.1  755.1 297.1 213.1 428.1 803.1 436.1 996.1\n##  [9,]  808.1 224.1  735.1 532.1  58.1 370.1 709.1 399.1 542.1\n## [10,]  553.1 203.1   60.1  25.1 484.1 488.1 149.1 129.1 847.1\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 200.1 251.1 364.1 446.1 146.1 631.1 200.1 604.1 272.1\n##  [2,] 902.1 294.1 302.1 100.1 428.1 563.1 109.1 377.1 459.1\n##  [3,]  52.1 561.1 852.1 987.1  33.1 379.1 769.1 226.1 767.1\n##  [4,] 808.1 607.1 134.1 995.1  69.1 987.1 632.1 488.1 997.1\n##  [5,] 619.1 446.1 989.1 242.1  77.1 356.1 515.1 785.1 676.1\n##  [6,] 303.1 120.1 525.1 394.1 616.1 699.1 509.1 234.1 464.1\n##  [7,]  52.1 799.1 862.1 927.1 935.1 343.1 884.1 882.1  54.1\n##  [8,] 706.1 769.1 140.1 680.1  88.1 240.1 619.1 209.1 680.1\n##  [9,] 782.1 843.1 941.1 883.1 453.1 513.1  83.1 247.1 851.1\n## [10,] 669.1  40.1 991.1 317.1 830.1 339.1 319.1 603.1 854.1\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 707.1 625.1 168.1 244.1 353.1 807.1 401.1  86.1 525.1\n##  [2,] 677.1 573.1 821.1 597.1 509.1 131.1  78.1 939.1 635.1\n##  [3,] 797.1 326.1 917.1 841.1  11.1 561.1 987.1 963.1 980.1\n##  [4,]  21.1 166.1 497.1 872.1 544.1 660.1 399.1 143.1  20.1\n##  [5,] 460.1 539.1 797.1 210.1 997.1  76.1 906.1 913.1 697.1\n##  [6,] 261.1 112.1 722.1 808.1 161.1 299.1 407.1 613.1 549.1\n##  [7,] 867.1 122.1 371.1 231.1 950.1 812.1 550.1 545.1  74.1\n##  [8,] 596.1  73.1 731.1 549.1 266.1 745.1 275.1 440.1  38.1\n##  [9,] 274.1 599.1 983.1 991.1 497.1 271.1 802.1 348.1 336.1\n## [10,] 203.1 915.1 647.1 617.1 496.1 170.1 168.1 544.1 495.1\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 589.1  85.1 662.1 214.1 165.1 904.1 773.1 436.1 978.1\n##  [2,] 491.1 331.1 787.1  70.1 952.1 968.1 290.1  37.1 962.1\n##  [3,] 957.1 109.1 383.1 912.1 573.1 434.1 756.1 715.1 418.1\n##  [4,] 372.1 195.1 588.1 538.1 850.1 353.1 668.1 925.1 111.1\n##  [5,] 508.1 218.1 982.1  57.1 977.1 999.1 996.1 940.1 568.1\n##  [6,] 546.1 624.1 258.1 458.1 323.1 653.1 358.1 492.1 355.1\n##  [7,] 285.1 207.1 532.1 988.1  57.1 938.1 157.1 414.1  32.1\n##  [8,] 442.1 132.1 905.1 454.1  65.1  38.1 760.1 317.1 214.1\n##  [9,] 600.1 100.1 855.1 746.1 436.1 212.1 928.1 676.1 341.1\n## [10,] 759.1 467.1 371.1 797.1 754.1 123.1 966.1 427.1 921.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 549.1 410.1 358.1 627.1 588.1 131.1 807.1 758.1 251.1\n##  [2,]  69.1 956.1 992.1 376.1 102.1 379.1 716.1 331.1 497.1\n##  [3,] 386.1 622.1 201.1 501.1 446.1 501.1 788.1 600.1 389.1\n##  [4,] 154.1 576.1 410.1  54.1 528.1 528.1 319.1 825.1 580.1\n##  [5,] 758.1 302.1 769.1 558.1 514.1 763.1  -1.9 730.1 333.1\n##  [6,] 256.1 757.1 844.1 923.1 565.1 783.1 482.1 427.1  86.1\n##  [7,] 196.1 370.1 536.1 708.1 280.1 549.1 525.1  91.1 571.1\n##  [8,] 193.1 531.1 883.1   1.1 824.1 795.1 929.1 965.1 926.1\n##  [9,] 954.1 252.1 984.1 138.1 979.1 781.1 820.1 398.1 536.1\n## [10,] 584.1  48.1 561.1 151.1 374.1 266.1 868.1 285.1 256.1\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 722.1 201.1  89.1  16.1 175.1 384.1 102.1 420.1 319.1\n##  [2,] 962.1 480.1 576.1 960.1  32.1 814.1 202.1 381.1 757.1\n##  [3,] 376.1 477.1 766.1 799.1 331.1 930.1 645.1 365.1 721.1\n##  [4,] 681.1 302.1 376.1 440.1 882.1 509.1 212.1 758.1 704.1\n##  [5,]  10.1 793.1 702.1 213.1 807.1 993.1 450.1 792.1 499.1\n##  [6,]  17.1 936.1 182.1  48.1 311.1 469.1 690.1 948.1 462.1\n##  [7,] 383.1 374.1 164.1 506.1 642.1 389.1 917.1 327.1 843.1\n##  [8,] 653.1 883.1 629.1  24.1 434.1 369.1 862.1   0.1 718.1\n##  [9,] 782.1 159.1 166.1 489.1 945.1 432.1 506.1  42.1  35.1\n## [10,] 897.1 935.1 791.1 105.1  22.1 863.1 128.1 644.1 898.1\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 493.1 350.1 157.1  18.1 349.1 163.1 953.1 224.1 661.1\n##  [2,]  29.1  48.1 560.1 997.1 434.1 250.1 905.1 144.1 138.1\n##  [3,] 692.1 559.1 381.1 417.1 224.1  83.1  64.1 113.1  14.1\n##  [4,] 847.1 917.1 695.1 821.1 849.1 553.1  75.1 507.1 972.1\n##  [5,] 695.1 365.1 836.1 828.1 729.1 798.1  93.1 887.1 175.1\n##  [6,] 895.1 448.1 909.1 726.1 582.1 415.1 715.1 945.1 292.1\n##  [7,] 177.1 723.1 846.1 387.1 356.1   0.1 516.1  21.1 322.1\n##  [8,] 332.1 851.1 956.1 760.1 938.1 985.1 339.1 686.1  92.1\n##  [9,] 523.1 576.1 942.1 274.1 247.1 386.1 421.1 804.1 165.1\n## [10,] 758.1 931.1 167.1 808.1 308.1 274.1 118.1 116.1 512.1\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 842.1 863.1 417.1 261.1 780.1 444.1  65.1  22.1 698.1\n##  [2,] 969.1  35.1 380.1 681.1 360.1 609.1   2.1 443.1 250.1\n##  [3,] 199.1 106.1 321.1 786.1 401.1 249.1 899.1 697.1  32.1\n##  [4,] 808.1 518.1 150.1 263.1  -2.9 301.1 244.1 669.1 242.1\n##  [5,] 629.1 231.1 735.1 228.1 965.1 319.1 431.1 980.1  67.1\n##  [6,] 947.1 449.1 962.1 392.1 913.1 398.1 986.1 391.1 245.1\n##  [7,] 816.1 839.1 107.1 256.1  31.1 687.1  31.1 397.1 565.1\n##  [8,] 705.1 237.1  35.1 578.1  14.1 254.1 906.1 176.1 580.1\n##  [9,] 642.1 776.1 150.1 965.1 521.1 105.1 512.1 298.1 660.1\n## [10,] 969.1 477.1 235.1 715.1 122.1 421.1 694.1 951.1 715.1\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 134.1   0.1 277.1  23.1 657.1 192.1 603.1 954.1 457.1\n##  [2,] 902.1 897.1 164.1 256.1 537.1 440.1 359.1 763.1 106.1\n##  [3,]  26.1 138.1 906.1 436.1 880.1  98.1 447.1 134.1 461.1\n##  [4,] 206.1 478.1 994.1 254.1 855.1 707.1 272.1 549.1 477.1\n##  [5,] 565.1 306.1 959.1 965.1 582.1 844.1 416.1 866.1  94.1\n##  [6,] 989.1 851.1 826.1  -3.9 508.1 618.1 985.1 394.1 345.1\n##  [7,] 706.1 690.1 368.1  39.1 981.1 772.1 829.1 570.1 415.1\n##  [8,] 295.1 137.1 739.1 281.1 197.1 412.1 787.1 420.1 980.1\n##  [9,] 790.1 206.1 717.1 514.1  40.1 352.1 691.1 381.1 524.1\n## [10,] 533.1 183.1  40.1   5.1 464.1 468.1 129.1 109.1 827.1\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 198.1 249.1 362.1 444.1 144.1 629.1 198.1 602.1 270.1\n##  [2,] 898.1 290.1 298.1  96.1 424.1 559.1 105.1 373.1 455.1\n##  [3,]  46.1 555.1 846.1 981.1  27.1 373.1 763.1 220.1 761.1\n##  [4,] 800.1 599.1 126.1 987.1  61.1 979.1 624.1 480.1 989.1\n##  [5,] 609.1 436.1 979.1 232.1  67.1 346.1 505.1 775.1 666.1\n##  [6,] 291.1 108.1 513.1 382.1 604.1 687.1 497.1 222.1 452.1\n##  [7,]  38.1 785.1 848.1 913.1 921.1 329.1 870.1 868.1  40.1\n##  [8,] 690.1 753.1 124.1 664.1  72.1 224.1 603.1 193.1 664.1\n##  [9,] 764.1 825.1 923.1 865.1 435.1 495.1  65.1 229.1 833.1\n## [10,] 649.1  20.1 971.1 297.1 810.1 319.1 299.1 583.1 834.1\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 705.1 623.1 166.1 242.1 351.1 805.1 399.1  84.1 523.1\n##  [2,] 673.1 569.1 817.1 593.1 505.1 127.1  74.1 935.1 631.1\n##  [3,] 791.1 320.1 911.1 835.1   5.1 555.1 981.1 957.1 974.1\n##  [4,]  13.1 158.1 489.1 864.1 536.1 652.1 391.1 135.1  12.1\n##  [5,] 450.1 529.1 787.1 200.1 987.1  66.1 896.1 903.1 687.1\n##  [6,] 249.1 100.1 710.1 796.1 149.1 287.1 395.1 601.1 537.1\n##  [7,] 853.1 108.1 357.1 217.1 936.1 798.1 536.1 531.1  60.1\n##  [8,] 580.1  57.1 715.1 533.1 250.1 729.1 259.1 424.1  22.1\n##  [9,] 256.1 581.1 965.1 973.1 479.1 253.1 784.1 330.1 318.1\n## [10,] 183.1 895.1 627.1 597.1 476.1 150.1 148.1 524.1 475.1\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 587.1  83.1 660.1 212.1 163.1 902.1 771.1 434.1 976.1\n##  [2,] 487.1 327.1 783.1  66.1 948.1 964.1 286.1  33.1 958.1\n##  [3,] 951.1 103.1 377.1 906.1 567.1 428.1 750.1 709.1 412.1\n##  [4,] 364.1 187.1 580.1 530.1 842.1 345.1 660.1 917.1 103.1\n##  [5,] 498.1 208.1 972.1  47.1 967.1 989.1 986.1 930.1 558.1\n##  [6,] 534.1 612.1 246.1 446.1 311.1 641.1 346.1 480.1 343.1\n##  [7,] 271.1 193.1 518.1 974.1  43.1 924.1 143.1 400.1  18.1\n##  [8,] 426.1 116.1 889.1 438.1  49.1  22.1 744.1 301.1 198.1\n##  [9,] 582.1  82.1 837.1 728.1 418.1 194.1 910.1 658.1 323.1\n## [10,] 739.1 447.1 351.1 777.1 734.1 103.1 946.1 407.1 901.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  550.1  411.1  359.1  628.1  589.1  132.1  808.1  759.1  252.1\n##  [2,]  142.2 1916.2 1988.2  756.2  208.2  762.2 1436.2  666.2  998.2\n##  [3,] 1167.3 1875.3  612.3 1512.3 1347.3 1512.3 2373.3 1809.3 1176.3\n##  [4,]  632.4 2320.4 1656.4  232.4 2128.4 2128.4 1292.4 3316.4 2336.4\n##  [5,] 3815.5 1535.5 3870.5 2815.5 2595.5 3840.5   15.5 3675.5 1690.5\n##  [6,] 1572.6 4578.6 5100.6 5574.6 3426.6 4734.6 2928.6 2598.6  552.6\n##  [7,] 1421.7 2639.7 3801.7 5005.7 2009.7 3892.7 3724.7  686.7 4046.7\n##  [8,] 1608.8 4312.8 7128.8   72.8 6656.8 6424.8 7496.8 7784.8 7472.8\n##  [9,] 8667.9 2349.9 8937.9 1323.9 8892.9 7110.9 7461.9 3663.9 4905.9\n## [10,] 5941.0  581.0 5711.0 1611.0 3841.0 2761.0 8781.0 2951.0 2661.0\n## \n## , , 2\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  723.1  202.1   90.1   17.1  176.1  385.1  103.1  421.1  320.1\n##  [2,] 1928.2  964.2 1156.2 1924.2   68.2 1632.2  408.2  766.2 1518.2\n##  [3,] 1137.3 1440.3 2307.3 2406.3 1002.3 2799.3 1944.3 1104.3 2172.3\n##  [4,] 2740.4 1224.4 1520.4 1776.4 3544.4 2052.4  864.4 3048.4 2832.4\n##  [5,]   75.5 3990.5 3535.5 1090.5 4060.5 4990.5 2275.5 3985.5 2520.5\n##  [6,]  138.6 5652.6 1128.6  324.6 1902.6 2850.6 4176.6 5724.6 2808.6\n##  [7,] 2730.7 2667.7 1197.7 3591.7 4543.7 2772.7 6468.7 2338.7 5950.7\n##  [8,] 5288.8 7128.8 5096.8  256.8 3536.8 3016.8 6960.8   64.8 5808.8\n##  [9,] 7119.9 1512.9 1575.9 4482.9 8586.9 3969.9 4635.9  459.9  396.9\n## [10,] 9071.0 9451.0 8011.0 1151.0  321.0 8731.0 1381.0 6541.0 9081.0\n## \n## , , 3\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  494.1  351.1  158.1   19.1  350.1  164.1  954.1  225.1  662.1\n##  [2,]   62.2  100.2 1124.2 1998.2  872.2  504.2 1814.2  292.2  280.2\n##  [3,] 2085.3 1686.3 1152.3 1260.3  681.3  258.3  201.3  348.3   51.3\n##  [4,] 3404.4 3684.4 2796.4 3300.4 3412.4 2228.4  316.4 2044.4 3904.4\n##  [5,] 3500.5 1850.5 4205.5 4165.5 3670.5 4015.5  490.5 4460.5  900.5\n##  [6,] 5406.6 2724.6 5490.6 4392.6 3528.6 2526.6 4326.6 5706.6 1788.6\n##  [7,] 1288.7 5110.7 5971.7 2758.7 2541.7   49.7 3661.7  196.7 2303.7\n##  [8,] 2720.8 6872.8 7712.8 6144.8 7568.8 7944.8 2776.8 5552.8  800.8\n##  [9,] 4788.9 5265.9 8559.9 2547.9 2304.9 3555.9 3870.9 7317.9 1566.9\n## [10,] 7681.0 9411.0 1771.0 8181.0 3181.0 2841.0 1281.0 1261.0 5221.0\n## \n## , , 4\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  843.1  864.1  418.1  262.1  781.1  445.1   66.1   23.1  699.1\n##  [2,] 1942.2   74.2  764.2 1366.2  724.2 1222.2    8.2  890.2  504.2\n##  [3,]  606.3  327.3  972.3 2367.3 1212.3  756.3 2706.3 2100.3  105.3\n##  [4,] 3248.4 2088.4  616.4 1068.4    4.4 1220.4  992.4 2692.4  984.4\n##  [5,] 3170.5 1180.5 3700.5 1165.5 4850.5 1620.5 2180.5 4925.5  360.5\n##  [6,] 5718.6 2730.6 5808.6 2388.6 5514.6 2424.6 5952.6 2382.6 1506.6\n##  [7,] 5761.7 5922.7  798.7 1841.7  266.7 4858.7  266.7 2828.7 4004.7\n##  [8,] 5704.8 1960.8  344.8 4688.8  176.8 2096.8 7312.8 1472.8 4704.8\n##  [9,] 5859.9 7065.9 1431.9 8766.9 4770.9 1026.9 4689.9 2763.9 6021.9\n## [10,] 9791.0 4871.0 2451.0 7251.0 1321.0 4311.0 7041.0 9611.0 7251.0\n## \n## , , 5\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  135.1    1.1  278.1   24.1  658.1  193.1  604.1  955.1  458.1\n##  [2,] 1808.2 1798.2  332.2  516.2 1078.2  884.2  722.2 1530.2  216.2\n##  [3,]   87.3  423.3 2727.3 1317.3 2649.3  303.3 1350.3  411.3 1392.3\n##  [4,]  840.4 1928.4 3992.4 1032.4 3436.4 2844.4 1104.4 2212.4 1924.4\n##  [5,] 2850.5 1555.5 4820.5 4850.5 2935.5 4245.5 2105.5 4355.5  495.5\n##  [6,] 5970.6 5142.6 4992.6   12.6 3084.6 3744.6 5946.6 2400.6 2106.6\n##  [7,] 4991.7 4879.7 2625.7  322.7 6916.7 5453.7 5852.7 4039.7 2954.7\n##  [8,] 2424.8 1160.8 5976.8 2312.8 1640.8 3360.8 6360.8 3424.8 7904.8\n##  [9,] 7191.9 1935.9 6534.9 4707.9  441.9 3249.9 6300.9 3510.9 4797.9\n## [10,] 5431.0 1931.0  501.0  151.0 4741.0 4781.0 1391.0 1191.0 8371.0\n## \n## , , 6\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  199.1  250.1  363.1  445.1  145.1  630.1  199.1  603.1  271.1\n##  [2,] 1800.2  584.2  600.2  196.2  852.2 1122.2  214.2  750.2  914.2\n##  [3,]  147.3 1674.3 2547.3 2952.3   90.3 1128.3 2298.3  669.3 2292.3\n##  [4,] 3216.4 2412.4  520.4 3964.4  260.4 3932.4 2512.4 1936.4 3972.4\n##  [5,] 3070.5 2205.5 4920.5 1185.5  360.5 1755.5 2550.5 3900.5 3355.5\n##  [6,] 1782.6  684.6 3114.6 2328.6 3660.6 4158.6 3018.6 1368.6 2748.6\n##  [7,]  315.7 5544.7 5985.7 6440.7 6496.7 2352.7 6139.7 6125.7  329.7\n##  [8,] 5584.8 6088.8 1056.8 5376.8  640.8 1856.8 4888.8 1608.8 5376.8\n##  [9,] 6957.9 7506.9 8388.9 7866.9 3996.9 4536.9  666.9 2142.9 7578.9\n## [10,] 6591.0  301.0 9811.0 3071.0 8201.0 3291.0 3091.0 5931.0 8441.0\n## \n## , , 7\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  706.1  624.1  167.1  243.1  352.1  806.1  400.1   85.1  524.1\n##  [2,] 1350.2 1142.2 1638.2 1190.2 1014.2  258.2  152.2 1874.2 1266.2\n##  [3,] 2382.3  969.3 2742.3 2514.3   24.3 1674.3 2952.3 2880.3 2931.3\n##  [4,]   68.4  648.4 1972.4 3472.4 2160.4 2624.4 1580.4  556.4   64.4\n##  [5,] 2275.5 2670.5 3960.5 1025.5 4960.5  355.5 4505.5 4540.5 3460.5\n##  [6,] 1530.6  636.6 4296.6 4812.6  930.6 1758.6 2406.6 3642.6 3258.6\n##  [7,] 6020.7  805.7 2548.7 1568.7 6601.7 5635.7 3801.7 3766.7  469.7\n##  [8,] 4704.8  520.8 5784.8 4328.8 2064.8 5896.8 2136.8 3456.8  240.8\n##  [9,] 2385.9 5310.9 8766.9 8838.9 4392.9 2358.9 7137.9 3051.9 2943.9\n## [10,] 1931.0 9051.0 6371.0 6071.0 4861.0 1601.0 1581.0 5341.0 4851.0\n## \n## , , 8\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  588.1   84.1  661.1  213.1  164.1  903.1  772.1  435.1  977.1\n##  [2,]  978.2  658.2 1570.2  136.2 1900.2 1932.2  576.2   70.2 1920.2\n##  [3,] 2862.3  318.3 1140.3 2727.3 1710.3 1293.3 2259.3 2136.3 1245.3\n##  [4,] 1472.4  764.4 2336.4 2136.4 3384.4 1396.4 2656.4 3684.4  428.4\n##  [5,] 2515.5 1065.5 4885.5  260.5 4860.5 4970.5 4955.5 4675.5 2815.5\n##  [6,] 3240.6 3708.6 1512.6 2712.6 1902.6 3882.6 2112.6 2916.6 2094.6\n##  [7,] 1946.7 1400.7 3675.7 6867.7  350.7 6517.7 1050.7 2849.7  175.7\n##  [8,] 3472.8  992.8 7176.8 3568.8  456.8  240.8 6016.8 2472.8 1648.8\n##  [9,] 5319.9  819.9 7614.9 6633.9 3843.9 1827.9 8271.9 6003.9 2988.9\n## [10,] 7491.0 4571.0 3611.0 7871.0 7441.0 1131.0 9561.0 4171.0 9111.0\nbc.d(x, y, \"/\")\n## , , 1\n## \n##            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n##  [1,] 550.10000 411.10000 359.10000 628.10000 589.10000 132.10000 808.10000\n##  [2,]  35.55000 479.05000 497.05000 189.05000  52.05000 190.55000 359.05000\n##  [3,] 129.70000 208.36667  68.03333 168.03333 149.70000 168.03333 263.70000\n##  [4,]  39.52500 145.02500 103.52500  14.52500 133.02500 133.02500  80.77500\n##  [5,] 152.62000  61.42000 154.82000 112.62000 103.82000 153.62000   0.62000\n##  [6,]  43.68333 127.18333 141.68333 154.85000  95.18333 131.51667  81.35000\n##  [7,]  29.01429  53.87143  77.58571 102.15714  41.01429  79.44286  76.01429\n##  [8,]  25.13750  67.38750 111.38750   1.13750 104.01250 100.38750 117.13750\n##  [9,] 107.01111  29.01111 110.34444  16.34444 109.78889  87.78889  92.12222\n## [10,]  59.41000   5.81000  57.11000  16.11000  38.41000  27.61000  87.81000\n##            [,8]      [,9]\n##  [1,] 759.10000 252.10000\n##  [2,] 166.55000 249.55000\n##  [3,] 201.03333 130.70000\n##  [4,] 207.27500 146.02500\n##  [5,] 147.02000  67.62000\n##  [6,]  72.18333  15.35000\n##  [7,]  14.01429  82.58571\n##  [8,] 121.63750 116.76250\n##  [9,]  45.23333  60.56667\n## [10,]  29.51000  26.61000\n## \n## , , 2\n## \n##            [,1]      [,2]      [,3]       [,4]      [,5]      [,6]      [,7]\n##  [1,] 723.10000 202.10000  90.10000  17.100000 176.10000 385.10000 103.10000\n##  [2,] 482.05000 241.05000 289.05000 481.050000  17.05000 408.05000 102.05000\n##  [3,] 126.36667 160.03333 256.36667 267.366667 111.36667 311.03333 216.03333\n##  [4,] 171.27500  76.52500  95.02500 111.025000 221.52500 128.27500  54.02500\n##  [5,]   3.02000 159.62000 141.42000  43.620000 162.42000 199.62000  91.02000\n##  [6,]   3.85000 157.01667  31.35000   9.016667  52.85000  79.18333 116.01667\n##  [7,]  55.72857  54.44286  24.44286  73.300000  92.72857  56.58571 132.01429\n##  [8,]  82.63750 111.38750  79.63750   4.012500  55.26250  47.13750 108.76250\n##  [9,]  87.90000  18.67778  19.45556  55.344444 106.01111  49.01111  57.23333\n## [10,]  90.71000  94.51000  80.11000  11.510000   3.21000  87.31000  13.81000\n##             [,8]      [,9]\n##  [1,] 421.100000 320.10000\n##  [2,] 191.550000 379.55000\n##  [3,] 122.700000 241.36667\n##  [4,] 190.525000 177.02500\n##  [5,] 159.420000 100.82000\n##  [6,] 159.016667  78.01667\n##  [7,]  47.728571 121.44286\n##  [8,]   1.012500  90.76250\n##  [9,]   5.677778   4.90000\n## [10,]  65.410000  90.81000\n## \n## , , 3\n## \n##            [,1]      [,2]     [,3]      [,4]      [,5]       [,6]      [,7]\n##  [1,] 494.10000 351.10000 158.1000  19.10000 350.10000 164.100000 954.10000\n##  [2,]  15.55000  25.05000 281.0500 499.55000 218.05000 126.050000 453.55000\n##  [3,] 231.70000 187.36667 128.0333 140.03333  75.70000  28.700000  22.36667\n##  [4,] 212.77500 230.27500 174.7750 206.27500 213.27500 139.275000  19.77500\n##  [5,] 140.02000  74.02000 168.2200 166.62000 146.82000 160.620000  19.62000\n##  [6,] 150.18333  75.68333 152.5167 122.01667  98.01667  70.183333 120.18333\n##  [7,]  26.30000 104.30000 121.8714  56.30000  51.87143   1.014286  74.72857\n##  [8,]  42.51250 107.38750 120.5125  96.01250 118.26250 124.137500  43.38750\n##  [9,]  59.12222  65.01111 105.6778  31.45556  28.45556  43.900000  47.78889\n## [10,]  76.81000  94.11000  17.7100  81.81000  31.81000  28.410000  12.81000\n##             [,8]      [,9]\n##  [1,] 225.100000 662.10000\n##  [2,]  73.050000  70.05000\n##  [3,]  38.700000   5.70000\n##  [4,] 127.775000 244.02500\n##  [5,] 178.420000  36.02000\n##  [6,] 158.516667  49.68333\n##  [7,]   4.014286  47.01429\n##  [8,]  86.762500  12.51250\n##  [9,]  90.344444  19.34444\n## [10,]  12.610000  52.21000\n## \n## , , 4\n## \n##            [,1]      [,2]      [,3]      [,4]       [,5]      [,6]       [,7]\n##  [1,] 843.10000 864.10000 418.10000 262.10000 781.100000 445.10000  66.100000\n##  [2,] 485.55000  18.55000 191.05000 341.55000 181.050000 305.55000   2.050000\n##  [3,]  67.36667  36.36667 108.03333 263.03333 134.700000  84.03333 300.700000\n##  [4,] 203.02500 130.52500  38.52500  66.77500   0.275000  76.27500  62.025000\n##  [5,] 126.82000  47.22000 148.02000  46.62000 194.020000  64.82000  87.220000\n##  [6,] 158.85000  75.85000 161.35000  66.35000 153.183333  67.35000 165.350000\n##  [7,] 117.58571 120.87143  16.30000  37.58571   5.442857  99.15714   5.442857\n##  [8,]  89.13750  30.63750   5.38750  73.26250   2.762500  32.76250 114.262500\n##  [9,]  72.34444  87.23333  17.67778 108.23333  58.900000  12.67778  57.900000\n## [10,]  97.91000  48.71000  24.51000  72.51000  13.210000  43.11000  70.410000\n##            [,8]      [,9]\n##  [1,]  23.10000 699.10000\n##  [2,] 222.55000 126.05000\n##  [3,] 233.36667  11.70000\n##  [4,] 168.27500  61.52500\n##  [5,] 197.02000  14.42000\n##  [6,]  66.18333  41.85000\n##  [7,]  57.72857  81.72857\n##  [8,]  23.01250  73.51250\n##  [9,]  34.12222  74.34444\n## [10,]  96.11000  72.51000\n## \n## , , 5\n## \n##            [,1]      [,2]      [,3]       [,4]       [,5]      [,6]      [,7]\n##  [1,] 135.10000   1.10000 278.10000  24.100000 658.100000 193.10000 604.10000\n##  [2,] 452.05000 449.55000  83.05000 129.050000 269.550000 221.05000 180.55000\n##  [3,]   9.70000  47.03333 303.03333 146.366667 294.366667  33.70000 150.03333\n##  [4,]  52.52500 120.52500 249.52500  64.525000 214.775000 177.77500  69.02500\n##  [5,] 114.02000  62.22000 192.82000 194.020000 117.420000 169.82000  84.22000\n##  [6,] 165.85000 142.85000 138.68333   0.350000  85.683333 104.01667 165.18333\n##  [7,] 101.87143  99.58571  53.58571   6.585714 141.157143 111.30000 119.44286\n##  [8,]  37.88750  18.13750  93.38750  36.137500  25.637500  52.51250  99.38750\n##  [9,]  88.78889  23.90000  80.67778  58.122222   5.455556  40.12222  77.78889\n## [10,]  54.31000  19.31000   5.01000   1.510000  47.410000  47.81000  13.91000\n##            [,8]      [,9]\n##  [1,] 955.10000 458.10000\n##  [2,] 382.55000  54.05000\n##  [3,]  45.70000 154.70000\n##  [4,] 138.27500 120.27500\n##  [5,] 174.22000  19.82000\n##  [6,]  66.68333  58.51667\n##  [7,]  82.44286  60.30000\n##  [8,]  53.51250 123.51250\n##  [9,]  43.34444  59.23333\n## [10,]  11.91000  83.71000\n## \n## , , 6\n## \n##             [,1]      [,2]      [,3]      [,4]      [,5]      [,6]       [,7]\n##  [1,] 199.100000 250.10000 363.10000 445.10000 145.10000 630.10000 199.100000\n##  [2,] 450.050000 146.05000 150.05000  49.05000 213.05000 280.55000  53.550000\n##  [3,]  16.366667 186.03333 283.03333 328.03333  10.03333 125.36667 255.366667\n##  [4,] 201.025000 150.77500  32.52500 247.77500  16.27500 245.77500 157.025000\n##  [5,] 122.820000  88.22000 196.82000  47.42000  14.42000  70.22000 102.020000\n##  [6,]  49.516667  19.01667  86.51667  64.68333 101.68333 115.51667  83.850000\n##  [7,]   6.442857 113.15714 122.15714 131.44286 132.58571  48.01429 125.300000\n##  [8,]  87.262500  95.13750  16.51250  84.01250  10.01250  29.01250  76.387500\n##  [9,]  85.900000  92.67778 103.56667  97.12222  49.34444  56.01111   8.233333\n## [10,]  65.910000   3.01000  98.11000  30.71000  82.01000  32.91000  30.910000\n##            [,8]       [,9]\n##  [1,] 603.10000 271.100000\n##  [2,] 187.55000 228.550000\n##  [3,]  74.36667 254.700000\n##  [4,] 121.02500 248.275000\n##  [5,] 156.02000 134.220000\n##  [6,]  38.01667  76.350000\n##  [7,] 125.01429   6.728571\n##  [8,]  25.13750  84.012500\n##  [9,]  26.45556  93.566667\n## [10,]  59.31000  84.410000\n## \n## , , 7\n## \n##            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n##  [1,] 706.10000 624.10000 167.10000 243.10000 352.10000 806.10000 400.10000\n##  [2,] 337.55000 285.55000 409.55000 297.55000 253.55000  64.55000  38.05000\n##  [3,] 264.70000 107.70000 304.70000 279.36667   2.70000 186.03333 328.03333\n##  [4,]   4.27500  40.52500 123.27500 217.02500 135.02500 164.02500  98.77500\n##  [5,]  91.02000 106.82000 158.42000  41.02000 198.42000  14.22000 180.22000\n##  [6,]  42.51667  17.68333 119.35000 133.68333  25.85000  48.85000  66.85000\n##  [7,] 122.87143  16.44286  52.01429  32.01429 134.72857 115.01429  77.58571\n##  [8,]  73.51250   8.13750  90.38750  67.63750  32.26250  92.13750  33.38750\n##  [9,]  29.45556  65.56667 108.23333 109.12222  54.23333  29.12222  88.12222\n## [10,]  19.31000  90.51000  63.71000  60.71000  48.61000  16.01000  15.81000\n##            [,8]       [,9]\n##  [1,]  85.10000 524.100000\n##  [2,] 468.55000 316.550000\n##  [3,] 320.03333 325.700000\n##  [4,]  34.77500   4.025000\n##  [5,] 181.62000 138.420000\n##  [6,] 101.18333  90.516667\n##  [7,]  76.87143   9.585714\n##  [8,]  54.01250   3.762500\n##  [9,]  37.67778  36.344444\n## [10,]  53.41000  48.510000\n## \n## , , 8\n## \n##            [,1]      [,2]      [,3]     [,4]       [,5]      [,6]      [,7]\n##  [1,] 588.10000  84.10000 661.10000 213.1000 164.100000 903.10000 772.10000\n##  [2,] 244.55000 164.55000 392.55000  34.0500 475.050000 483.05000 144.05000\n##  [3,] 318.03333  35.36667 126.70000 303.0333 190.033333 143.70000 251.03333\n##  [4,]  92.02500  47.77500 146.02500 133.5250 211.525000  87.27500 166.02500\n##  [5,] 100.62000  42.62000 195.42000  10.4200 194.420000 198.82000 198.22000\n##  [6,]  90.01667 103.01667  42.01667  75.3500  52.850000 107.85000  58.68333\n##  [7,]  39.72857  28.58571  75.01429 140.1571   7.157143 133.01429  21.44286\n##  [8,]  54.26250  15.51250 112.13750  55.7625   7.137500   3.76250  94.01250\n##  [9,]  65.67778  10.12222  94.01111  81.9000  47.455556  22.56667 102.12222\n## [10,]  74.91000  45.71000  36.11000  78.7100  74.410000  11.31000  95.61000\n##            [,8]       [,9]\n##  [1,] 435.10000 977.100000\n##  [2,]  17.55000 480.050000\n##  [3,] 237.36667 138.366667\n##  [4,] 230.27500  26.775000\n##  [5,] 187.02000 112.620000\n##  [6,]  81.01667  58.183333\n##  [7,]  58.15714   3.585714\n##  [8,]  38.63750  25.762500\n##  [9,]  74.12222  36.900000\n## [10,]  41.71000  91.110000\nbc.d(x, y, \"^\")\n## , , 1\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 5.501000e+02 4.111000e+02 3.591000e+02 6.281000e+02 5.891000e+02\n##  [2,] 5.055210e+03 9.179556e+05 9.882348e+05 1.429596e+05 1.083681e+04\n##  [3,] 5.890928e+07 2.442578e+08 8.502155e+06 1.281003e+08 9.057934e+07\n##  [4,] 6.247805e+08 1.132430e+11 2.940498e+10 1.139474e+07 8.016283e+10\n##  [5,] 2.587660e+14 2.731487e+12 2.779619e+14 5.661449e+13 3.769252e+13\n##  [6,] 3.241919e+14 1.974644e+17 3.774158e+17 6.432425e+17 3.469548e+16\n##  [7,] 1.425507e+16 1.084416e+18 1.393666e+19 9.562412e+19 1.607801e+17\n##  [8,] 2.674832e+18 7.134354e+21 3.975681e+23 4.702525e+07 2.298287e+23\n##  [9,] 7.129227e+26 5.639776e+21 9.395866e+26 3.224884e+19 8.978589e+26\n## [10,] 5.477666e+27 4.382898e+17 3.690809e+27 1.177485e+22 6.989451e+25\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.321000e+02 8.081000e+02 7.591000e+02 2.521000e+02\n##  [2,] 1.452372e+05 5.156676e+05 1.109556e+05 2.491008e+05\n##  [3,] 1.281003e+08 4.951014e+08 2.193653e+08 6.028240e+07\n##  [4,] 8.016283e+10 1.089803e+10 4.725281e+11 1.163989e+11\n##  [5,] 2.673553e+14 2.862915e+02 2.146506e+14 4.418001e+12\n##  [6,] 2.414306e+17 1.352237e+16 6.599775e+15 6.103203e+11\n##  [7,] 1.644638e+19 1.207683e+19 8.743454e+13 2.157848e+19\n##  [8,] 1.730442e+23 5.946857e+23 8.040069e+23 5.796248e+23\n##  [9,] 1.199882e+26 1.851238e+26 3.071213e+23 4.248989e+24\n## [10,] 2.574329e+24 2.725460e+29 5.008320e+24 1.780118e+24\n## \n## , , 2\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.231000e+02 2.021000e+02 9.010000e+01 1.710000e+01 1.761000e+02\n##  [2,] 9.294888e+05 2.324204e+05 3.341996e+05 9.256364e+05 1.162810e+03\n##  [3,] 5.448304e+07 1.106611e+08 4.549340e+08 5.160426e+08 3.729318e+07\n##  [4,] 2.203007e+11 8.779167e+09 2.087332e+10 3.889763e+10 6.164970e+11\n##  [5,] 7.850273e+05 3.238072e+14 1.767682e+14 4.934900e+11 3.532218e+14\n##  [6,] 1.519399e+08 6.991688e+17 4.429276e+13 2.507169e+10 1.016664e+15\n##  [7,] 1.374775e+18 1.167542e+18 4.292893e+15 9.362980e+18 4.854911e+19\n##  [8,] 3.648692e+22 3.975681e+23 2.714319e+22 1.127302e+12 1.459366e+21\n##  [9,] 1.213619e+26 1.071789e+20 1.547303e+20 1.887334e+24 6.551565e+26\n## [10,] 3.771826e+29 5.685617e+29 1.088597e+29 4.080874e+20 1.161583e+15\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 3.851000e+02 1.031000e+02 4.211000e+02 3.201000e+02\n##  [2,] 6.660192e+05 4.165681e+04 1.467656e+05 5.762328e+05\n##  [3,] 8.124274e+08 2.722238e+08 4.987667e+07 3.796607e+08\n##  [4,] 6.931194e+10 2.180816e+09 3.373245e+11 2.514076e+11\n##  [5,] 9.905360e+14 1.952244e+13 3.217837e+14 3.255244e+13\n##  [6,] 1.150033e+16 1.137705e+17 7.543335e+17 1.052039e+16\n##  [7,] 1.529797e+18 5.754834e+20 4.646600e+17 3.208412e+20\n##  [8,] 4.089331e+20 3.285136e+23 1.853020e+07 7.726299e+22\n##  [9,] 6.321695e+23 2.552842e+24 2.375681e+15 6.308808e+14\n## [10,] 2.574186e+29 2.523113e+21 1.433645e+28 3.813614e+29\n## \n## , , 3\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 4.941000e+02 3.511000e+02 1.581000e+02 1.910000e+01 3.501000e+02\n##  [2,] 9.672100e+02 2.510010e+03 3.159564e+05 9.982008e+05 1.901832e+05\n##  [3,] 3.358473e+08 1.775991e+08 5.666735e+07 7.414093e+07 1.171255e+07\n##  [4,] 5.247136e+11 7.198253e+11 2.388676e+11 4.634750e+11 5.296632e+11\n##  [5,] 1.681901e+14 6.943772e+12 4.209574e+14 4.013153e+14 2.131946e+14\n##  [6,] 5.353502e+17 8.768171e+15 5.872342e+17 1.539652e+17 4.137205e+16\n##  [7,] 7.167646e+15 1.105800e+20 3.288513e+20 1.476539e+18 8.321158e+17\n##  [8,] 1.790000e+20 2.967220e+23 7.464086e+23 1.211552e+23 6.419428e+23\n##  [9,] 3.419317e+24 8.036573e+24 6.368478e+26 1.168043e+22 4.738995e+21\n## [10,] 7.147887e+28 5.449514e+29 3.035188e+22 1.342963e+29 1.060808e+25\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.641000e+02 9.541000e+02 2.251000e+02 6.621000e+02\n##  [2,] 6.355441e+04 8.228304e+05 2.134521e+04 1.962801e+04\n##  [3,] 6.382774e+05 3.021117e+05 1.564936e+06 5.000211e+03\n##  [4,] 9.632358e+10 3.914767e+07 6.823757e+10 9.077730e+11\n##  [5,] 3.340782e+14 9.085421e+09 5.650250e+14 1.894823e+11\n##  [6,] 5.575855e+15 1.405960e+17 7.402137e+17 7.017329e+14\n##  [7,] 9.095120e+05 1.071749e+19 1.383389e+10 4.181144e+17\n##  [8,] 9.461148e+23 2.106866e+20 5.387364e+22 1.008028e+16\n##  [9,] 2.346190e+23 5.036455e+23 1.553444e+26 1.469565e+20\n## [10,] 3.425408e+24 1.189847e+21 1.016602e+21 1.505001e+27\n## \n## , , 4\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 8.431000e+02 8.641000e+02 4.181000e+02 2.621000e+02 7.811000e+02\n##  [2,] 9.430352e+05 1.376410e+03 1.460004e+05 4.666256e+05 1.311164e+05\n##  [3,] 8.254655e+06 1.298597e+06 3.404373e+07 4.913558e+08 6.598824e+07\n##  [4,] 4.349487e+11 7.430444e+10 5.639110e+08 5.089739e+09 1.464100e+00\n##  [5,] 1.025153e+14 7.336348e+11 2.220506e+14 6.881948e+11 8.591768e+14\n##  [6,] 7.496021e+17 8.884664e+15 8.232303e+17 3.980641e+15 6.028047e+17\n##  [7,] 2.559577e+20 3.104216e+20 2.517674e+14 8.726617e+16 1.165400e+11\n##  [8,] 6.686571e+22 1.302406e+19 1.190743e+13 1.392431e+22 5.690340e+10\n##  [9,] 2.102952e+25 1.133248e+26 6.531781e+19 7.896450e+26 3.305371e+24\n## [10,] 8.096000e+29 7.519367e+26 7.824077e+23 4.017714e+28 1.618185e+21\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.451000e+02 6.610000e+01 2.310000e+01 6.991000e+02\n##  [2,] 3.734432e+05 1.681000e+01 1.981140e+05 6.355441e+04\n##  [3,] 1.602207e+07 7.341149e+08 3.431470e+08 4.324355e+04\n##  [4,] 8.665005e+09 3.788847e+09 2.052666e+11 3.668145e+09\n##  [5,] 3.575981e+12 1.577359e+13 9.276873e+14 1.948392e+09\n##  [6,] 4.354448e+15 9.535263e+17 3.921022e+15 2.506573e+14\n##  [7,] 7.761655e+19 1.165400e+11 1.759632e+18 2.005874e+19\n##  [8,] 2.227082e+19 4.874720e+23 1.319564e+18 1.430900e+22\n##  [9,] 3.277712e+18 2.833281e+24 2.429508e+22 2.687938e+25\n## [10,] 2.217074e+26 2.994632e+28 6.724899e+29 4.017714e+28\n## \n## , , 5\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.351000e+02 1.100000e+00 2.781000e+02 2.410000e+01 6.581000e+02\n##  [2,] 8.173968e+05 8.083808e+05 2.758921e+04 6.661561e+04 2.906288e+05\n##  [3,] 2.464217e+04 2.809190e+06 7.513373e+08 8.466235e+07 6.886993e+08\n##  [4,] 1.948517e+09 5.401925e+10 9.924216e+11 4.437639e+09 5.447220e+11\n##  [5,] 6.022200e+13 2.914071e+12 8.329337e+14 8.591768e+14 6.975260e+13\n##  [6,] 9.709578e+17 3.964505e+17 3.319351e+17 8.576612e+01 1.846229e+16\n##  [7,] 9.376766e+19 7.999550e+19 1.044791e+18 4.424931e+11 9.196155e+20\n##  [8,] 7.123403e+19 1.964895e+17 9.705768e+22 4.879606e+19 3.131304e+18\n##  [9,] 1.328649e+26 9.857430e+20 5.610065e+25 2.932665e+24 1.658569e+15\n## [10,] 2.232534e+27 7.208132e+22 9.962705e+16 6.162678e+11 5.737194e+26\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.931000e+02 6.041000e+02 9.551000e+02 4.581000e+02\n##  [2,] 1.954524e+05 1.303932e+05 5.853780e+05 1.168561e+04\n##  [3,] 1.033364e+06 9.118576e+07 2.576988e+06 9.996195e+07\n##  [4,] 2.556953e+11 5.811197e+09 9.358681e+10 5.357244e+10\n##  [5,] 4.413613e+14 1.324117e+13 5.015798e+14 9.558027e+09\n##  [6,] 5.909151e+16 9.477741e+17 4.102148e+15 1.873204e+15\n##  [7,] 1.742418e+20 2.856325e+20 2.131854e+19 2.387303e+18\n##  [8,] 9.701111e+20 1.597254e+23 1.128137e+21 9.086721e+23\n##  [9,] 1.043872e+23 4.040552e+25 2.092105e+23 3.477588e+24\n## [10,] 6.240041e+26 2.711885e+21 5.742720e+20 1.689559e+29\n## \n## , , 6\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.991000e+02 2.501000e+02 3.631000e+02 4.451000e+02 1.451000e+02\n##  [2,] 8.101800e+05 8.532241e+04 9.006001e+04 9.623610e+03 1.815612e+05\n##  [3,] 1.183708e+05 1.738345e+08 6.121763e+08 9.530544e+08 2.727090e+04\n##  [4,] 4.180616e+11 1.322992e+11 2.864898e+08 9.648724e+11 1.796073e+07\n##  [5,] 8.733644e+13 1.669880e+13 9.229882e+14 7.493035e+11 1.948392e+09\n##  [6,] 6.877267e+14 2.206550e+12 1.956619e+16 3.417133e+15 5.157107e+16\n##  [7,] 3.795210e+11 1.956411e+20 3.342861e+20 5.582712e+20 5.931485e+20\n##  [8,] 5.640805e+22 1.125988e+23 9.273049e+16 4.163621e+22 1.694572e+15\n##  [9,] 9.865544e+25 1.954173e+26 5.310832e+26 2.978860e+26 6.719345e+23\n## [10,] 1.547081e+28 6.104709e+14 8.262905e+29 7.461019e+24 1.376157e+29\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 6.301000e+02 1.991000e+02 6.031000e+02 2.711000e+02\n##  [2,] 3.148332e+05 1.147041e+04 1.407000e+05 2.089404e+05\n##  [3,] 5.319980e+07 4.496311e+08 1.110449e+07 4.461189e+08\n##  [4,] 9.340944e+11 1.556378e+11 5.492124e+10 9.726843e+11\n##  [5,] 5.335242e+12 3.453636e+13 2.889026e+14 1.361245e+14\n##  [6,] 1.108601e+17 1.621533e+16 1.408483e+14 9.241910e+15\n##  [7,] 4.844842e+17 3.993409e+20 3.930102e+20 5.142169e+11\n##  [8,] 8.421726e+18 1.944904e+22 2.674832e+18 4.163621e+22\n##  [9,] 2.102085e+24 6.735407e+16 2.459431e+21 2.129477e+26\n## [10,] 1.490318e+25 7.961411e+24 5.386160e+27 1.836280e+29\n## \n## , , 7\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.061000e+02 6.241000e+02 1.671000e+02 2.431000e+02 3.521000e+02\n##  [2,] 4.557600e+05 3.261552e+05 6.709248e+05 3.541440e+05 2.571504e+05\n##  [3,] 5.007553e+08 3.372958e+07 7.638026e+08 5.886912e+08 5.314410e+02\n##  [4,] 8.550361e+04 6.904497e+08 5.912076e+10 5.679094e+11 8.509356e+10\n##  [5,] 1.952244e+13 4.346232e+13 3.118172e+14 3.629345e+11 9.611192e+14\n##  [6,] 2.755896e+14 1.426567e+12 1.348472e+17 2.663000e+17 1.392101e+13\n##  [7,] 3.482111e+20 2.676254e+14 8.482908e+17 2.838527e+16 6.635967e+20\n##  [8,] 1.430900e+22 3.225878e+14 7.474582e+22 7.348865e+21 1.969264e+19\n##  [9,] 6.466772e+21 8.676220e+24 7.896450e+26 8.499657e+26 1.572459e+24\n## [10,] 7.208132e+22 3.689484e+29 1.101732e+28 6.801463e+27 7.366415e+26\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 8.061000e+02 4.001000e+02 8.510000e+01 5.241000e+02\n##  [2,] 1.666681e+04 5.791210e+03 8.781564e+05 4.008156e+05\n##  [3,] 1.738345e+08 9.530544e+08 8.850125e+08 9.328612e+08\n##  [4,] 1.853020e+11 2.436846e+10 3.743764e+08 6.718982e+04\n##  [5,] 1.816971e+09 5.941074e+14 6.175447e+14 1.587977e+14\n##  [6,] 6.340083e+14 4.164050e+15 5.006813e+16 2.566131e+16\n##  [7,] 2.192546e+20 1.393666e+19 1.306294e+19 6.124317e+12\n##  [8,] 8.713874e+22 2.590545e+19 1.215274e+21 6.738015e+11\n##  [9,] 5.837181e+21 1.241514e+26 5.928572e+22 4.286718e+22\n## [10,] 1.106403e+22 9.757054e+21 1.888973e+27 7.216270e+26\n## \n## , , 8\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 5.881000e+02 8.410000e+01 6.611000e+02 2.131000e+02 1.641000e+02\n##  [2,] 2.392188e+05 1.083068e+05 6.163820e+05 4.637610e+03 9.026900e+05\n##  [3,] 8.685237e+08 1.194390e+06 5.491533e+07 7.513373e+08 1.852905e+08\n##  [4,] 1.835960e+10 1.333653e+09 1.163989e+11 8.137487e+10 5.124916e+11\n##  [5,] 3.223084e+13 4.394579e+11 8.906254e+14 3.838739e+08 8.680699e+14\n##  [6,] 2.482247e+16 5.576381e+16 2.567066e+14 8.539001e+15 1.016664e+15\n##  [7,] 1.286492e+17 1.284487e+16 1.100764e+19 8.749695e+20 7.922533e+11\n##  [8,] 1.261009e+21 5.625670e+16 4.194951e+23 1.568403e+21 1.130027e+14\n##  [9,] 8.809447e+24 4.321807e+17 2.222262e+26 6.422997e+25 4.728965e+23\n## [10,] 5.564139e+28 3.982100e+26 3.769423e+25 9.126392e+28 5.203710e+28\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 9.031000e+02 7.721000e+02 4.351000e+02 9.771000e+02\n##  [2,] 9.333492e+05 8.300161e+04 1.232010e+03 9.217920e+05\n##  [3,] 8.011873e+07 4.271279e+08 3.610962e+08 7.152505e+07\n##  [4,] 1.485249e+10 1.945064e+11 7.198253e+11 1.315703e+08\n##  [5,] 9.708461e+14 9.562851e+14 7.149741e+14 5.661449e+13\n##  [6,] 7.342237e+16 1.905444e+15 1.319331e+16 1.810086e+15\n##  [7,] 6.067004e+20 1.716583e+15 1.853138e+18 6.276479e+09\n##  [8,] 6.738015e+11 1.023775e+23 8.332821e+19 3.255547e+18\n##  [9,] 5.880162e+20 4.680205e+26 2.616486e+25 4.913827e+22\n## [10,] 3.424728e+20 6.383123e+29 1.593683e+26 3.941490e+29\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.d(x, y, \"&lt;\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"&gt;\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.d(x, y, \"&lt;=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"&gt;=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.d.html#broadcasted-decimal-numeric-operations",
    "href": "man/outer/bc.d.html#broadcasted-decimal-numeric-operations",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##        [,1]  [,2]   [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 551.1 412.1  360.1 629.1 590.1 133.1 809.1 760.1 253.1\n##  [2,]  73.1 960.1  996.1 380.1 106.1 383.1 720.1 335.1 501.1\n##  [3,] 392.1 628.1  207.1 507.1 452.1 507.1 794.1 606.1 395.1\n##  [4,] 162.1 584.1  418.1  62.1 536.1 536.1 327.1 833.1 588.1\n##  [5,] 768.1 312.1  779.1 568.1 524.1 773.1   8.1 740.1 343.1\n##  [6,] 268.1 769.1  856.1 935.1 577.1 795.1 494.1 439.1  98.1\n##  [7,] 210.1 384.1  550.1 722.1 294.1 563.1 539.1 105.1 585.1\n##  [8,] 209.1 547.1  899.1  17.1 840.1 811.1 945.1 981.1 942.1\n##  [9,] 972.1 270.1 1002.1 156.1 997.1 799.1 838.1 416.1 554.1\n## [10,] 604.1  68.1  581.1 171.1 394.1 286.1 888.1 305.1 276.1\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]   [,6]  [,7]  [,8]  [,9]\n##  [1,] 724.1 203.1  91.1  18.1 177.1  386.1 104.1 422.1 321.1\n##  [2,] 966.1 484.1 580.1 964.1  36.1  818.1 206.1 385.1 761.1\n##  [3,] 382.1 483.1 772.1 805.1 337.1  936.1 651.1 371.1 727.1\n##  [4,] 689.1 310.1 384.1 448.1 890.1  517.1 220.1 766.1 712.1\n##  [5,]  20.1 803.1 712.1 223.1 817.1 1003.1 460.1 802.1 509.1\n##  [6,]  29.1 948.1 194.1  60.1 323.1  481.1 702.1 960.1 474.1\n##  [7,] 397.1 388.1 178.1 520.1 656.1  403.1 931.1 341.1 857.1\n##  [8,] 669.1 899.1 645.1  40.1 450.1  385.1 878.1  16.1 734.1\n##  [9,] 800.1 177.1 184.1 507.1 963.1  450.1 524.1  60.1  53.1\n## [10,] 917.1 955.1 811.1 125.1  42.1  883.1 148.1 664.1 918.1\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]   [,4]  [,5]   [,6]  [,7]  [,8]  [,9]\n##  [1,] 495.1 352.1 159.1   20.1 351.1  165.1 955.1 226.1 663.1\n##  [2,]  33.1  52.1 564.1 1001.1 438.1  254.1 909.1 148.1 142.1\n##  [3,] 698.1 565.1 387.1  423.1 230.1   89.1  70.1 119.1  20.1\n##  [4,] 855.1 925.1 703.1  829.1 857.1  561.1  83.1 515.1 980.1\n##  [5,] 705.1 375.1 846.1  838.1 739.1  808.1 103.1 897.1 185.1\n##  [6,] 907.1 460.1 921.1  738.1 594.1  427.1 727.1 957.1 304.1\n##  [7,] 191.1 737.1 860.1  401.1 370.1   14.1 530.1  35.1 336.1\n##  [8,] 348.1 867.1 972.1  776.1 954.1 1001.1 355.1 702.1 108.1\n##  [9,] 541.1 594.1 960.1  292.1 265.1  404.1 439.1 822.1 183.1\n## [10,] 778.1 951.1 187.1  828.1 328.1  294.1 138.1 136.1 532.1\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 844.1 865.1 419.1 263.1 782.1 446.1  67.1  24.1 700.1\n##  [2,] 973.1  39.1 384.1 685.1 364.1 613.1   6.1 447.1 254.1\n##  [3,] 205.1 112.1 327.1 792.1 407.1 255.1 905.1 703.1  38.1\n##  [4,] 816.1 526.1 158.1 271.1   5.1 309.1 252.1 677.1 250.1\n##  [5,] 639.1 241.1 745.1 238.1 975.1 329.1 441.1 990.1  77.1\n##  [6,] 959.1 461.1 974.1 404.1 925.1 410.1 998.1 403.1 257.1\n##  [7,] 830.1 853.1 121.1 270.1  45.1 701.1  45.1 411.1 579.1\n##  [8,] 721.1 253.1  51.1 594.1  30.1 270.1 922.1 192.1 596.1\n##  [9,] 660.1 794.1 168.1 983.1 539.1 123.1 530.1 316.1 678.1\n## [10,] 989.1 497.1 255.1 735.1 142.1 441.1 714.1 971.1 735.1\n## \n## , , 5\n## \n##         [,1]  [,2]   [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,]  136.1   2.1  279.1  25.1 659.1 194.1 605.1 956.1 459.1\n##  [2,]  906.1 901.1  168.1 260.1 541.1 444.1 363.1 767.1 110.1\n##  [3,]   32.1 144.1  912.1 442.1 886.1 104.1 453.1 140.1 467.1\n##  [4,]  214.1 486.1 1002.1 262.1 863.1 715.1 280.1 557.1 485.1\n##  [5,]  575.1 316.1  969.1 975.1 592.1 854.1 426.1 876.1 104.1\n##  [6,] 1001.1 863.1  838.1   8.1 520.1 630.1 997.1 406.1 357.1\n##  [7,]  720.1 704.1  382.1  53.1 995.1 786.1 843.1 584.1 429.1\n##  [8,]  311.1 153.1  755.1 297.1 213.1 428.1 803.1 436.1 996.1\n##  [9,]  808.1 224.1  735.1 532.1  58.1 370.1 709.1 399.1 542.1\n## [10,]  553.1 203.1   60.1  25.1 484.1 488.1 149.1 129.1 847.1\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 200.1 251.1 364.1 446.1 146.1 631.1 200.1 604.1 272.1\n##  [2,] 902.1 294.1 302.1 100.1 428.1 563.1 109.1 377.1 459.1\n##  [3,]  52.1 561.1 852.1 987.1  33.1 379.1 769.1 226.1 767.1\n##  [4,] 808.1 607.1 134.1 995.1  69.1 987.1 632.1 488.1 997.1\n##  [5,] 619.1 446.1 989.1 242.1  77.1 356.1 515.1 785.1 676.1\n##  [6,] 303.1 120.1 525.1 394.1 616.1 699.1 509.1 234.1 464.1\n##  [7,]  52.1 799.1 862.1 927.1 935.1 343.1 884.1 882.1  54.1\n##  [8,] 706.1 769.1 140.1 680.1  88.1 240.1 619.1 209.1 680.1\n##  [9,] 782.1 843.1 941.1 883.1 453.1 513.1  83.1 247.1 851.1\n## [10,] 669.1  40.1 991.1 317.1 830.1 339.1 319.1 603.1 854.1\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 707.1 625.1 168.1 244.1 353.1 807.1 401.1  86.1 525.1\n##  [2,] 677.1 573.1 821.1 597.1 509.1 131.1  78.1 939.1 635.1\n##  [3,] 797.1 326.1 917.1 841.1  11.1 561.1 987.1 963.1 980.1\n##  [4,]  21.1 166.1 497.1 872.1 544.1 660.1 399.1 143.1  20.1\n##  [5,] 460.1 539.1 797.1 210.1 997.1  76.1 906.1 913.1 697.1\n##  [6,] 261.1 112.1 722.1 808.1 161.1 299.1 407.1 613.1 549.1\n##  [7,] 867.1 122.1 371.1 231.1 950.1 812.1 550.1 545.1  74.1\n##  [8,] 596.1  73.1 731.1 549.1 266.1 745.1 275.1 440.1  38.1\n##  [9,] 274.1 599.1 983.1 991.1 497.1 271.1 802.1 348.1 336.1\n## [10,] 203.1 915.1 647.1 617.1 496.1 170.1 168.1 544.1 495.1\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 589.1  85.1 662.1 214.1 165.1 904.1 773.1 436.1 978.1\n##  [2,] 491.1 331.1 787.1  70.1 952.1 968.1 290.1  37.1 962.1\n##  [3,] 957.1 109.1 383.1 912.1 573.1 434.1 756.1 715.1 418.1\n##  [4,] 372.1 195.1 588.1 538.1 850.1 353.1 668.1 925.1 111.1\n##  [5,] 508.1 218.1 982.1  57.1 977.1 999.1 996.1 940.1 568.1\n##  [6,] 546.1 624.1 258.1 458.1 323.1 653.1 358.1 492.1 355.1\n##  [7,] 285.1 207.1 532.1 988.1  57.1 938.1 157.1 414.1  32.1\n##  [8,] 442.1 132.1 905.1 454.1  65.1  38.1 760.1 317.1 214.1\n##  [9,] 600.1 100.1 855.1 746.1 436.1 212.1 928.1 676.1 341.1\n## [10,] 759.1 467.1 371.1 797.1 754.1 123.1 966.1 427.1 921.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 549.1 410.1 358.1 627.1 588.1 131.1 807.1 758.1 251.1\n##  [2,]  69.1 956.1 992.1 376.1 102.1 379.1 716.1 331.1 497.1\n##  [3,] 386.1 622.1 201.1 501.1 446.1 501.1 788.1 600.1 389.1\n##  [4,] 154.1 576.1 410.1  54.1 528.1 528.1 319.1 825.1 580.1\n##  [5,] 758.1 302.1 769.1 558.1 514.1 763.1  -1.9 730.1 333.1\n##  [6,] 256.1 757.1 844.1 923.1 565.1 783.1 482.1 427.1  86.1\n##  [7,] 196.1 370.1 536.1 708.1 280.1 549.1 525.1  91.1 571.1\n##  [8,] 193.1 531.1 883.1   1.1 824.1 795.1 929.1 965.1 926.1\n##  [9,] 954.1 252.1 984.1 138.1 979.1 781.1 820.1 398.1 536.1\n## [10,] 584.1  48.1 561.1 151.1 374.1 266.1 868.1 285.1 256.1\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 722.1 201.1  89.1  16.1 175.1 384.1 102.1 420.1 319.1\n##  [2,] 962.1 480.1 576.1 960.1  32.1 814.1 202.1 381.1 757.1\n##  [3,] 376.1 477.1 766.1 799.1 331.1 930.1 645.1 365.1 721.1\n##  [4,] 681.1 302.1 376.1 440.1 882.1 509.1 212.1 758.1 704.1\n##  [5,]  10.1 793.1 702.1 213.1 807.1 993.1 450.1 792.1 499.1\n##  [6,]  17.1 936.1 182.1  48.1 311.1 469.1 690.1 948.1 462.1\n##  [7,] 383.1 374.1 164.1 506.1 642.1 389.1 917.1 327.1 843.1\n##  [8,] 653.1 883.1 629.1  24.1 434.1 369.1 862.1   0.1 718.1\n##  [9,] 782.1 159.1 166.1 489.1 945.1 432.1 506.1  42.1  35.1\n## [10,] 897.1 935.1 791.1 105.1  22.1 863.1 128.1 644.1 898.1\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 493.1 350.1 157.1  18.1 349.1 163.1 953.1 224.1 661.1\n##  [2,]  29.1  48.1 560.1 997.1 434.1 250.1 905.1 144.1 138.1\n##  [3,] 692.1 559.1 381.1 417.1 224.1  83.1  64.1 113.1  14.1\n##  [4,] 847.1 917.1 695.1 821.1 849.1 553.1  75.1 507.1 972.1\n##  [5,] 695.1 365.1 836.1 828.1 729.1 798.1  93.1 887.1 175.1\n##  [6,] 895.1 448.1 909.1 726.1 582.1 415.1 715.1 945.1 292.1\n##  [7,] 177.1 723.1 846.1 387.1 356.1   0.1 516.1  21.1 322.1\n##  [8,] 332.1 851.1 956.1 760.1 938.1 985.1 339.1 686.1  92.1\n##  [9,] 523.1 576.1 942.1 274.1 247.1 386.1 421.1 804.1 165.1\n## [10,] 758.1 931.1 167.1 808.1 308.1 274.1 118.1 116.1 512.1\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 842.1 863.1 417.1 261.1 780.1 444.1  65.1  22.1 698.1\n##  [2,] 969.1  35.1 380.1 681.1 360.1 609.1   2.1 443.1 250.1\n##  [3,] 199.1 106.1 321.1 786.1 401.1 249.1 899.1 697.1  32.1\n##  [4,] 808.1 518.1 150.1 263.1  -2.9 301.1 244.1 669.1 242.1\n##  [5,] 629.1 231.1 735.1 228.1 965.1 319.1 431.1 980.1  67.1\n##  [6,] 947.1 449.1 962.1 392.1 913.1 398.1 986.1 391.1 245.1\n##  [7,] 816.1 839.1 107.1 256.1  31.1 687.1  31.1 397.1 565.1\n##  [8,] 705.1 237.1  35.1 578.1  14.1 254.1 906.1 176.1 580.1\n##  [9,] 642.1 776.1 150.1 965.1 521.1 105.1 512.1 298.1 660.1\n## [10,] 969.1 477.1 235.1 715.1 122.1 421.1 694.1 951.1 715.1\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 134.1   0.1 277.1  23.1 657.1 192.1 603.1 954.1 457.1\n##  [2,] 902.1 897.1 164.1 256.1 537.1 440.1 359.1 763.1 106.1\n##  [3,]  26.1 138.1 906.1 436.1 880.1  98.1 447.1 134.1 461.1\n##  [4,] 206.1 478.1 994.1 254.1 855.1 707.1 272.1 549.1 477.1\n##  [5,] 565.1 306.1 959.1 965.1 582.1 844.1 416.1 866.1  94.1\n##  [6,] 989.1 851.1 826.1  -3.9 508.1 618.1 985.1 394.1 345.1\n##  [7,] 706.1 690.1 368.1  39.1 981.1 772.1 829.1 570.1 415.1\n##  [8,] 295.1 137.1 739.1 281.1 197.1 412.1 787.1 420.1 980.1\n##  [9,] 790.1 206.1 717.1 514.1  40.1 352.1 691.1 381.1 524.1\n## [10,] 533.1 183.1  40.1   5.1 464.1 468.1 129.1 109.1 827.1\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 198.1 249.1 362.1 444.1 144.1 629.1 198.1 602.1 270.1\n##  [2,] 898.1 290.1 298.1  96.1 424.1 559.1 105.1 373.1 455.1\n##  [3,]  46.1 555.1 846.1 981.1  27.1 373.1 763.1 220.1 761.1\n##  [4,] 800.1 599.1 126.1 987.1  61.1 979.1 624.1 480.1 989.1\n##  [5,] 609.1 436.1 979.1 232.1  67.1 346.1 505.1 775.1 666.1\n##  [6,] 291.1 108.1 513.1 382.1 604.1 687.1 497.1 222.1 452.1\n##  [7,]  38.1 785.1 848.1 913.1 921.1 329.1 870.1 868.1  40.1\n##  [8,] 690.1 753.1 124.1 664.1  72.1 224.1 603.1 193.1 664.1\n##  [9,] 764.1 825.1 923.1 865.1 435.1 495.1  65.1 229.1 833.1\n## [10,] 649.1  20.1 971.1 297.1 810.1 319.1 299.1 583.1 834.1\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 705.1 623.1 166.1 242.1 351.1 805.1 399.1  84.1 523.1\n##  [2,] 673.1 569.1 817.1 593.1 505.1 127.1  74.1 935.1 631.1\n##  [3,] 791.1 320.1 911.1 835.1   5.1 555.1 981.1 957.1 974.1\n##  [4,]  13.1 158.1 489.1 864.1 536.1 652.1 391.1 135.1  12.1\n##  [5,] 450.1 529.1 787.1 200.1 987.1  66.1 896.1 903.1 687.1\n##  [6,] 249.1 100.1 710.1 796.1 149.1 287.1 395.1 601.1 537.1\n##  [7,] 853.1 108.1 357.1 217.1 936.1 798.1 536.1 531.1  60.1\n##  [8,] 580.1  57.1 715.1 533.1 250.1 729.1 259.1 424.1  22.1\n##  [9,] 256.1 581.1 965.1 973.1 479.1 253.1 784.1 330.1 318.1\n## [10,] 183.1 895.1 627.1 597.1 476.1 150.1 148.1 524.1 475.1\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] 587.1  83.1 660.1 212.1 163.1 902.1 771.1 434.1 976.1\n##  [2,] 487.1 327.1 783.1  66.1 948.1 964.1 286.1  33.1 958.1\n##  [3,] 951.1 103.1 377.1 906.1 567.1 428.1 750.1 709.1 412.1\n##  [4,] 364.1 187.1 580.1 530.1 842.1 345.1 660.1 917.1 103.1\n##  [5,] 498.1 208.1 972.1  47.1 967.1 989.1 986.1 930.1 558.1\n##  [6,] 534.1 612.1 246.1 446.1 311.1 641.1 346.1 480.1 343.1\n##  [7,] 271.1 193.1 518.1 974.1  43.1 924.1 143.1 400.1  18.1\n##  [8,] 426.1 116.1 889.1 438.1  49.1  22.1 744.1 301.1 198.1\n##  [9,] 582.1  82.1 837.1 728.1 418.1 194.1 910.1 658.1 323.1\n## [10,] 739.1 447.1 351.1 777.1 734.1 103.1 946.1 407.1 901.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  550.1  411.1  359.1  628.1  589.1  132.1  808.1  759.1  252.1\n##  [2,]  142.2 1916.2 1988.2  756.2  208.2  762.2 1436.2  666.2  998.2\n##  [3,] 1167.3 1875.3  612.3 1512.3 1347.3 1512.3 2373.3 1809.3 1176.3\n##  [4,]  632.4 2320.4 1656.4  232.4 2128.4 2128.4 1292.4 3316.4 2336.4\n##  [5,] 3815.5 1535.5 3870.5 2815.5 2595.5 3840.5   15.5 3675.5 1690.5\n##  [6,] 1572.6 4578.6 5100.6 5574.6 3426.6 4734.6 2928.6 2598.6  552.6\n##  [7,] 1421.7 2639.7 3801.7 5005.7 2009.7 3892.7 3724.7  686.7 4046.7\n##  [8,] 1608.8 4312.8 7128.8   72.8 6656.8 6424.8 7496.8 7784.8 7472.8\n##  [9,] 8667.9 2349.9 8937.9 1323.9 8892.9 7110.9 7461.9 3663.9 4905.9\n## [10,] 5941.0  581.0 5711.0 1611.0 3841.0 2761.0 8781.0 2951.0 2661.0\n## \n## , , 2\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  723.1  202.1   90.1   17.1  176.1  385.1  103.1  421.1  320.1\n##  [2,] 1928.2  964.2 1156.2 1924.2   68.2 1632.2  408.2  766.2 1518.2\n##  [3,] 1137.3 1440.3 2307.3 2406.3 1002.3 2799.3 1944.3 1104.3 2172.3\n##  [4,] 2740.4 1224.4 1520.4 1776.4 3544.4 2052.4  864.4 3048.4 2832.4\n##  [5,]   75.5 3990.5 3535.5 1090.5 4060.5 4990.5 2275.5 3985.5 2520.5\n##  [6,]  138.6 5652.6 1128.6  324.6 1902.6 2850.6 4176.6 5724.6 2808.6\n##  [7,] 2730.7 2667.7 1197.7 3591.7 4543.7 2772.7 6468.7 2338.7 5950.7\n##  [8,] 5288.8 7128.8 5096.8  256.8 3536.8 3016.8 6960.8   64.8 5808.8\n##  [9,] 7119.9 1512.9 1575.9 4482.9 8586.9 3969.9 4635.9  459.9  396.9\n## [10,] 9071.0 9451.0 8011.0 1151.0  321.0 8731.0 1381.0 6541.0 9081.0\n## \n## , , 3\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  494.1  351.1  158.1   19.1  350.1  164.1  954.1  225.1  662.1\n##  [2,]   62.2  100.2 1124.2 1998.2  872.2  504.2 1814.2  292.2  280.2\n##  [3,] 2085.3 1686.3 1152.3 1260.3  681.3  258.3  201.3  348.3   51.3\n##  [4,] 3404.4 3684.4 2796.4 3300.4 3412.4 2228.4  316.4 2044.4 3904.4\n##  [5,] 3500.5 1850.5 4205.5 4165.5 3670.5 4015.5  490.5 4460.5  900.5\n##  [6,] 5406.6 2724.6 5490.6 4392.6 3528.6 2526.6 4326.6 5706.6 1788.6\n##  [7,] 1288.7 5110.7 5971.7 2758.7 2541.7   49.7 3661.7  196.7 2303.7\n##  [8,] 2720.8 6872.8 7712.8 6144.8 7568.8 7944.8 2776.8 5552.8  800.8\n##  [9,] 4788.9 5265.9 8559.9 2547.9 2304.9 3555.9 3870.9 7317.9 1566.9\n## [10,] 7681.0 9411.0 1771.0 8181.0 3181.0 2841.0 1281.0 1261.0 5221.0\n## \n## , , 4\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  843.1  864.1  418.1  262.1  781.1  445.1   66.1   23.1  699.1\n##  [2,] 1942.2   74.2  764.2 1366.2  724.2 1222.2    8.2  890.2  504.2\n##  [3,]  606.3  327.3  972.3 2367.3 1212.3  756.3 2706.3 2100.3  105.3\n##  [4,] 3248.4 2088.4  616.4 1068.4    4.4 1220.4  992.4 2692.4  984.4\n##  [5,] 3170.5 1180.5 3700.5 1165.5 4850.5 1620.5 2180.5 4925.5  360.5\n##  [6,] 5718.6 2730.6 5808.6 2388.6 5514.6 2424.6 5952.6 2382.6 1506.6\n##  [7,] 5761.7 5922.7  798.7 1841.7  266.7 4858.7  266.7 2828.7 4004.7\n##  [8,] 5704.8 1960.8  344.8 4688.8  176.8 2096.8 7312.8 1472.8 4704.8\n##  [9,] 5859.9 7065.9 1431.9 8766.9 4770.9 1026.9 4689.9 2763.9 6021.9\n## [10,] 9791.0 4871.0 2451.0 7251.0 1321.0 4311.0 7041.0 9611.0 7251.0\n## \n## , , 5\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  135.1    1.1  278.1   24.1  658.1  193.1  604.1  955.1  458.1\n##  [2,] 1808.2 1798.2  332.2  516.2 1078.2  884.2  722.2 1530.2  216.2\n##  [3,]   87.3  423.3 2727.3 1317.3 2649.3  303.3 1350.3  411.3 1392.3\n##  [4,]  840.4 1928.4 3992.4 1032.4 3436.4 2844.4 1104.4 2212.4 1924.4\n##  [5,] 2850.5 1555.5 4820.5 4850.5 2935.5 4245.5 2105.5 4355.5  495.5\n##  [6,] 5970.6 5142.6 4992.6   12.6 3084.6 3744.6 5946.6 2400.6 2106.6\n##  [7,] 4991.7 4879.7 2625.7  322.7 6916.7 5453.7 5852.7 4039.7 2954.7\n##  [8,] 2424.8 1160.8 5976.8 2312.8 1640.8 3360.8 6360.8 3424.8 7904.8\n##  [9,] 7191.9 1935.9 6534.9 4707.9  441.9 3249.9 6300.9 3510.9 4797.9\n## [10,] 5431.0 1931.0  501.0  151.0 4741.0 4781.0 1391.0 1191.0 8371.0\n## \n## , , 6\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  199.1  250.1  363.1  445.1  145.1  630.1  199.1  603.1  271.1\n##  [2,] 1800.2  584.2  600.2  196.2  852.2 1122.2  214.2  750.2  914.2\n##  [3,]  147.3 1674.3 2547.3 2952.3   90.3 1128.3 2298.3  669.3 2292.3\n##  [4,] 3216.4 2412.4  520.4 3964.4  260.4 3932.4 2512.4 1936.4 3972.4\n##  [5,] 3070.5 2205.5 4920.5 1185.5  360.5 1755.5 2550.5 3900.5 3355.5\n##  [6,] 1782.6  684.6 3114.6 2328.6 3660.6 4158.6 3018.6 1368.6 2748.6\n##  [7,]  315.7 5544.7 5985.7 6440.7 6496.7 2352.7 6139.7 6125.7  329.7\n##  [8,] 5584.8 6088.8 1056.8 5376.8  640.8 1856.8 4888.8 1608.8 5376.8\n##  [9,] 6957.9 7506.9 8388.9 7866.9 3996.9 4536.9  666.9 2142.9 7578.9\n## [10,] 6591.0  301.0 9811.0 3071.0 8201.0 3291.0 3091.0 5931.0 8441.0\n## \n## , , 7\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  706.1  624.1  167.1  243.1  352.1  806.1  400.1   85.1  524.1\n##  [2,] 1350.2 1142.2 1638.2 1190.2 1014.2  258.2  152.2 1874.2 1266.2\n##  [3,] 2382.3  969.3 2742.3 2514.3   24.3 1674.3 2952.3 2880.3 2931.3\n##  [4,]   68.4  648.4 1972.4 3472.4 2160.4 2624.4 1580.4  556.4   64.4\n##  [5,] 2275.5 2670.5 3960.5 1025.5 4960.5  355.5 4505.5 4540.5 3460.5\n##  [6,] 1530.6  636.6 4296.6 4812.6  930.6 1758.6 2406.6 3642.6 3258.6\n##  [7,] 6020.7  805.7 2548.7 1568.7 6601.7 5635.7 3801.7 3766.7  469.7\n##  [8,] 4704.8  520.8 5784.8 4328.8 2064.8 5896.8 2136.8 3456.8  240.8\n##  [9,] 2385.9 5310.9 8766.9 8838.9 4392.9 2358.9 7137.9 3051.9 2943.9\n## [10,] 1931.0 9051.0 6371.0 6071.0 4861.0 1601.0 1581.0 5341.0 4851.0\n## \n## , , 8\n## \n##         [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n##  [1,]  588.1   84.1  661.1  213.1  164.1  903.1  772.1  435.1  977.1\n##  [2,]  978.2  658.2 1570.2  136.2 1900.2 1932.2  576.2   70.2 1920.2\n##  [3,] 2862.3  318.3 1140.3 2727.3 1710.3 1293.3 2259.3 2136.3 1245.3\n##  [4,] 1472.4  764.4 2336.4 2136.4 3384.4 1396.4 2656.4 3684.4  428.4\n##  [5,] 2515.5 1065.5 4885.5  260.5 4860.5 4970.5 4955.5 4675.5 2815.5\n##  [6,] 3240.6 3708.6 1512.6 2712.6 1902.6 3882.6 2112.6 2916.6 2094.6\n##  [7,] 1946.7 1400.7 3675.7 6867.7  350.7 6517.7 1050.7 2849.7  175.7\n##  [8,] 3472.8  992.8 7176.8 3568.8  456.8  240.8 6016.8 2472.8 1648.8\n##  [9,] 5319.9  819.9 7614.9 6633.9 3843.9 1827.9 8271.9 6003.9 2988.9\n## [10,] 7491.0 4571.0 3611.0 7871.0 7441.0 1131.0 9561.0 4171.0 9111.0\nbc.d(x, y, \"/\")\n## , , 1\n## \n##            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n##  [1,] 550.10000 411.10000 359.10000 628.10000 589.10000 132.10000 808.10000\n##  [2,]  35.55000 479.05000 497.05000 189.05000  52.05000 190.55000 359.05000\n##  [3,] 129.70000 208.36667  68.03333 168.03333 149.70000 168.03333 263.70000\n##  [4,]  39.52500 145.02500 103.52500  14.52500 133.02500 133.02500  80.77500\n##  [5,] 152.62000  61.42000 154.82000 112.62000 103.82000 153.62000   0.62000\n##  [6,]  43.68333 127.18333 141.68333 154.85000  95.18333 131.51667  81.35000\n##  [7,]  29.01429  53.87143  77.58571 102.15714  41.01429  79.44286  76.01429\n##  [8,]  25.13750  67.38750 111.38750   1.13750 104.01250 100.38750 117.13750\n##  [9,] 107.01111  29.01111 110.34444  16.34444 109.78889  87.78889  92.12222\n## [10,]  59.41000   5.81000  57.11000  16.11000  38.41000  27.61000  87.81000\n##            [,8]      [,9]\n##  [1,] 759.10000 252.10000\n##  [2,] 166.55000 249.55000\n##  [3,] 201.03333 130.70000\n##  [4,] 207.27500 146.02500\n##  [5,] 147.02000  67.62000\n##  [6,]  72.18333  15.35000\n##  [7,]  14.01429  82.58571\n##  [8,] 121.63750 116.76250\n##  [9,]  45.23333  60.56667\n## [10,]  29.51000  26.61000\n## \n## , , 2\n## \n##            [,1]      [,2]      [,3]       [,4]      [,5]      [,6]      [,7]\n##  [1,] 723.10000 202.10000  90.10000  17.100000 176.10000 385.10000 103.10000\n##  [2,] 482.05000 241.05000 289.05000 481.050000  17.05000 408.05000 102.05000\n##  [3,] 126.36667 160.03333 256.36667 267.366667 111.36667 311.03333 216.03333\n##  [4,] 171.27500  76.52500  95.02500 111.025000 221.52500 128.27500  54.02500\n##  [5,]   3.02000 159.62000 141.42000  43.620000 162.42000 199.62000  91.02000\n##  [6,]   3.85000 157.01667  31.35000   9.016667  52.85000  79.18333 116.01667\n##  [7,]  55.72857  54.44286  24.44286  73.300000  92.72857  56.58571 132.01429\n##  [8,]  82.63750 111.38750  79.63750   4.012500  55.26250  47.13750 108.76250\n##  [9,]  87.90000  18.67778  19.45556  55.344444 106.01111  49.01111  57.23333\n## [10,]  90.71000  94.51000  80.11000  11.510000   3.21000  87.31000  13.81000\n##             [,8]      [,9]\n##  [1,] 421.100000 320.10000\n##  [2,] 191.550000 379.55000\n##  [3,] 122.700000 241.36667\n##  [4,] 190.525000 177.02500\n##  [5,] 159.420000 100.82000\n##  [6,] 159.016667  78.01667\n##  [7,]  47.728571 121.44286\n##  [8,]   1.012500  90.76250\n##  [9,]   5.677778   4.90000\n## [10,]  65.410000  90.81000\n## \n## , , 3\n## \n##            [,1]      [,2]     [,3]      [,4]      [,5]       [,6]      [,7]\n##  [1,] 494.10000 351.10000 158.1000  19.10000 350.10000 164.100000 954.10000\n##  [2,]  15.55000  25.05000 281.0500 499.55000 218.05000 126.050000 453.55000\n##  [3,] 231.70000 187.36667 128.0333 140.03333  75.70000  28.700000  22.36667\n##  [4,] 212.77500 230.27500 174.7750 206.27500 213.27500 139.275000  19.77500\n##  [5,] 140.02000  74.02000 168.2200 166.62000 146.82000 160.620000  19.62000\n##  [6,] 150.18333  75.68333 152.5167 122.01667  98.01667  70.183333 120.18333\n##  [7,]  26.30000 104.30000 121.8714  56.30000  51.87143   1.014286  74.72857\n##  [8,]  42.51250 107.38750 120.5125  96.01250 118.26250 124.137500  43.38750\n##  [9,]  59.12222  65.01111 105.6778  31.45556  28.45556  43.900000  47.78889\n## [10,]  76.81000  94.11000  17.7100  81.81000  31.81000  28.410000  12.81000\n##             [,8]      [,9]\n##  [1,] 225.100000 662.10000\n##  [2,]  73.050000  70.05000\n##  [3,]  38.700000   5.70000\n##  [4,] 127.775000 244.02500\n##  [5,] 178.420000  36.02000\n##  [6,] 158.516667  49.68333\n##  [7,]   4.014286  47.01429\n##  [8,]  86.762500  12.51250\n##  [9,]  90.344444  19.34444\n## [10,]  12.610000  52.21000\n## \n## , , 4\n## \n##            [,1]      [,2]      [,3]      [,4]       [,5]      [,6]       [,7]\n##  [1,] 843.10000 864.10000 418.10000 262.10000 781.100000 445.10000  66.100000\n##  [2,] 485.55000  18.55000 191.05000 341.55000 181.050000 305.55000   2.050000\n##  [3,]  67.36667  36.36667 108.03333 263.03333 134.700000  84.03333 300.700000\n##  [4,] 203.02500 130.52500  38.52500  66.77500   0.275000  76.27500  62.025000\n##  [5,] 126.82000  47.22000 148.02000  46.62000 194.020000  64.82000  87.220000\n##  [6,] 158.85000  75.85000 161.35000  66.35000 153.183333  67.35000 165.350000\n##  [7,] 117.58571 120.87143  16.30000  37.58571   5.442857  99.15714   5.442857\n##  [8,]  89.13750  30.63750   5.38750  73.26250   2.762500  32.76250 114.262500\n##  [9,]  72.34444  87.23333  17.67778 108.23333  58.900000  12.67778  57.900000\n## [10,]  97.91000  48.71000  24.51000  72.51000  13.210000  43.11000  70.410000\n##            [,8]      [,9]\n##  [1,]  23.10000 699.10000\n##  [2,] 222.55000 126.05000\n##  [3,] 233.36667  11.70000\n##  [4,] 168.27500  61.52500\n##  [5,] 197.02000  14.42000\n##  [6,]  66.18333  41.85000\n##  [7,]  57.72857  81.72857\n##  [8,]  23.01250  73.51250\n##  [9,]  34.12222  74.34444\n## [10,]  96.11000  72.51000\n## \n## , , 5\n## \n##            [,1]      [,2]      [,3]       [,4]       [,5]      [,6]      [,7]\n##  [1,] 135.10000   1.10000 278.10000  24.100000 658.100000 193.10000 604.10000\n##  [2,] 452.05000 449.55000  83.05000 129.050000 269.550000 221.05000 180.55000\n##  [3,]   9.70000  47.03333 303.03333 146.366667 294.366667  33.70000 150.03333\n##  [4,]  52.52500 120.52500 249.52500  64.525000 214.775000 177.77500  69.02500\n##  [5,] 114.02000  62.22000 192.82000 194.020000 117.420000 169.82000  84.22000\n##  [6,] 165.85000 142.85000 138.68333   0.350000  85.683333 104.01667 165.18333\n##  [7,] 101.87143  99.58571  53.58571   6.585714 141.157143 111.30000 119.44286\n##  [8,]  37.88750  18.13750  93.38750  36.137500  25.637500  52.51250  99.38750\n##  [9,]  88.78889  23.90000  80.67778  58.122222   5.455556  40.12222  77.78889\n## [10,]  54.31000  19.31000   5.01000   1.510000  47.410000  47.81000  13.91000\n##            [,8]      [,9]\n##  [1,] 955.10000 458.10000\n##  [2,] 382.55000  54.05000\n##  [3,]  45.70000 154.70000\n##  [4,] 138.27500 120.27500\n##  [5,] 174.22000  19.82000\n##  [6,]  66.68333  58.51667\n##  [7,]  82.44286  60.30000\n##  [8,]  53.51250 123.51250\n##  [9,]  43.34444  59.23333\n## [10,]  11.91000  83.71000\n## \n## , , 6\n## \n##             [,1]      [,2]      [,3]      [,4]      [,5]      [,6]       [,7]\n##  [1,] 199.100000 250.10000 363.10000 445.10000 145.10000 630.10000 199.100000\n##  [2,] 450.050000 146.05000 150.05000  49.05000 213.05000 280.55000  53.550000\n##  [3,]  16.366667 186.03333 283.03333 328.03333  10.03333 125.36667 255.366667\n##  [4,] 201.025000 150.77500  32.52500 247.77500  16.27500 245.77500 157.025000\n##  [5,] 122.820000  88.22000 196.82000  47.42000  14.42000  70.22000 102.020000\n##  [6,]  49.516667  19.01667  86.51667  64.68333 101.68333 115.51667  83.850000\n##  [7,]   6.442857 113.15714 122.15714 131.44286 132.58571  48.01429 125.300000\n##  [8,]  87.262500  95.13750  16.51250  84.01250  10.01250  29.01250  76.387500\n##  [9,]  85.900000  92.67778 103.56667  97.12222  49.34444  56.01111   8.233333\n## [10,]  65.910000   3.01000  98.11000  30.71000  82.01000  32.91000  30.910000\n##            [,8]       [,9]\n##  [1,] 603.10000 271.100000\n##  [2,] 187.55000 228.550000\n##  [3,]  74.36667 254.700000\n##  [4,] 121.02500 248.275000\n##  [5,] 156.02000 134.220000\n##  [6,]  38.01667  76.350000\n##  [7,] 125.01429   6.728571\n##  [8,]  25.13750  84.012500\n##  [9,]  26.45556  93.566667\n## [10,]  59.31000  84.410000\n## \n## , , 7\n## \n##            [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n##  [1,] 706.10000 624.10000 167.10000 243.10000 352.10000 806.10000 400.10000\n##  [2,] 337.55000 285.55000 409.55000 297.55000 253.55000  64.55000  38.05000\n##  [3,] 264.70000 107.70000 304.70000 279.36667   2.70000 186.03333 328.03333\n##  [4,]   4.27500  40.52500 123.27500 217.02500 135.02500 164.02500  98.77500\n##  [5,]  91.02000 106.82000 158.42000  41.02000 198.42000  14.22000 180.22000\n##  [6,]  42.51667  17.68333 119.35000 133.68333  25.85000  48.85000  66.85000\n##  [7,] 122.87143  16.44286  52.01429  32.01429 134.72857 115.01429  77.58571\n##  [8,]  73.51250   8.13750  90.38750  67.63750  32.26250  92.13750  33.38750\n##  [9,]  29.45556  65.56667 108.23333 109.12222  54.23333  29.12222  88.12222\n## [10,]  19.31000  90.51000  63.71000  60.71000  48.61000  16.01000  15.81000\n##            [,8]       [,9]\n##  [1,]  85.10000 524.100000\n##  [2,] 468.55000 316.550000\n##  [3,] 320.03333 325.700000\n##  [4,]  34.77500   4.025000\n##  [5,] 181.62000 138.420000\n##  [6,] 101.18333  90.516667\n##  [7,]  76.87143   9.585714\n##  [8,]  54.01250   3.762500\n##  [9,]  37.67778  36.344444\n## [10,]  53.41000  48.510000\n## \n## , , 8\n## \n##            [,1]      [,2]      [,3]     [,4]       [,5]      [,6]      [,7]\n##  [1,] 588.10000  84.10000 661.10000 213.1000 164.100000 903.10000 772.10000\n##  [2,] 244.55000 164.55000 392.55000  34.0500 475.050000 483.05000 144.05000\n##  [3,] 318.03333  35.36667 126.70000 303.0333 190.033333 143.70000 251.03333\n##  [4,]  92.02500  47.77500 146.02500 133.5250 211.525000  87.27500 166.02500\n##  [5,] 100.62000  42.62000 195.42000  10.4200 194.420000 198.82000 198.22000\n##  [6,]  90.01667 103.01667  42.01667  75.3500  52.850000 107.85000  58.68333\n##  [7,]  39.72857  28.58571  75.01429 140.1571   7.157143 133.01429  21.44286\n##  [8,]  54.26250  15.51250 112.13750  55.7625   7.137500   3.76250  94.01250\n##  [9,]  65.67778  10.12222  94.01111  81.9000  47.455556  22.56667 102.12222\n## [10,]  74.91000  45.71000  36.11000  78.7100  74.410000  11.31000  95.61000\n##            [,8]       [,9]\n##  [1,] 435.10000 977.100000\n##  [2,]  17.55000 480.050000\n##  [3,] 237.36667 138.366667\n##  [4,] 230.27500  26.775000\n##  [5,] 187.02000 112.620000\n##  [6,]  81.01667  58.183333\n##  [7,]  58.15714   3.585714\n##  [8,]  38.63750  25.762500\n##  [9,]  74.12222  36.900000\n## [10,]  41.71000  91.110000\nbc.d(x, y, \"^\")\n## , , 1\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 5.501000e+02 4.111000e+02 3.591000e+02 6.281000e+02 5.891000e+02\n##  [2,] 5.055210e+03 9.179556e+05 9.882348e+05 1.429596e+05 1.083681e+04\n##  [3,] 5.890928e+07 2.442578e+08 8.502155e+06 1.281003e+08 9.057934e+07\n##  [4,] 6.247805e+08 1.132430e+11 2.940498e+10 1.139474e+07 8.016283e+10\n##  [5,] 2.587660e+14 2.731487e+12 2.779619e+14 5.661449e+13 3.769252e+13\n##  [6,] 3.241919e+14 1.974644e+17 3.774158e+17 6.432425e+17 3.469548e+16\n##  [7,] 1.425507e+16 1.084416e+18 1.393666e+19 9.562412e+19 1.607801e+17\n##  [8,] 2.674832e+18 7.134354e+21 3.975681e+23 4.702525e+07 2.298287e+23\n##  [9,] 7.129227e+26 5.639776e+21 9.395866e+26 3.224884e+19 8.978589e+26\n## [10,] 5.477666e+27 4.382898e+17 3.690809e+27 1.177485e+22 6.989451e+25\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.321000e+02 8.081000e+02 7.591000e+02 2.521000e+02\n##  [2,] 1.452372e+05 5.156676e+05 1.109556e+05 2.491008e+05\n##  [3,] 1.281003e+08 4.951014e+08 2.193653e+08 6.028240e+07\n##  [4,] 8.016283e+10 1.089803e+10 4.725281e+11 1.163989e+11\n##  [5,] 2.673553e+14 2.862915e+02 2.146506e+14 4.418001e+12\n##  [6,] 2.414306e+17 1.352237e+16 6.599775e+15 6.103203e+11\n##  [7,] 1.644638e+19 1.207683e+19 8.743454e+13 2.157848e+19\n##  [8,] 1.730442e+23 5.946857e+23 8.040069e+23 5.796248e+23\n##  [9,] 1.199882e+26 1.851238e+26 3.071213e+23 4.248989e+24\n## [10,] 2.574329e+24 2.725460e+29 5.008320e+24 1.780118e+24\n## \n## , , 2\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.231000e+02 2.021000e+02 9.010000e+01 1.710000e+01 1.761000e+02\n##  [2,] 9.294888e+05 2.324204e+05 3.341996e+05 9.256364e+05 1.162810e+03\n##  [3,] 5.448304e+07 1.106611e+08 4.549340e+08 5.160426e+08 3.729318e+07\n##  [4,] 2.203007e+11 8.779167e+09 2.087332e+10 3.889763e+10 6.164970e+11\n##  [5,] 7.850273e+05 3.238072e+14 1.767682e+14 4.934900e+11 3.532218e+14\n##  [6,] 1.519399e+08 6.991688e+17 4.429276e+13 2.507169e+10 1.016664e+15\n##  [7,] 1.374775e+18 1.167542e+18 4.292893e+15 9.362980e+18 4.854911e+19\n##  [8,] 3.648692e+22 3.975681e+23 2.714319e+22 1.127302e+12 1.459366e+21\n##  [9,] 1.213619e+26 1.071789e+20 1.547303e+20 1.887334e+24 6.551565e+26\n## [10,] 3.771826e+29 5.685617e+29 1.088597e+29 4.080874e+20 1.161583e+15\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 3.851000e+02 1.031000e+02 4.211000e+02 3.201000e+02\n##  [2,] 6.660192e+05 4.165681e+04 1.467656e+05 5.762328e+05\n##  [3,] 8.124274e+08 2.722238e+08 4.987667e+07 3.796607e+08\n##  [4,] 6.931194e+10 2.180816e+09 3.373245e+11 2.514076e+11\n##  [5,] 9.905360e+14 1.952244e+13 3.217837e+14 3.255244e+13\n##  [6,] 1.150033e+16 1.137705e+17 7.543335e+17 1.052039e+16\n##  [7,] 1.529797e+18 5.754834e+20 4.646600e+17 3.208412e+20\n##  [8,] 4.089331e+20 3.285136e+23 1.853020e+07 7.726299e+22\n##  [9,] 6.321695e+23 2.552842e+24 2.375681e+15 6.308808e+14\n## [10,] 2.574186e+29 2.523113e+21 1.433645e+28 3.813614e+29\n## \n## , , 3\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 4.941000e+02 3.511000e+02 1.581000e+02 1.910000e+01 3.501000e+02\n##  [2,] 9.672100e+02 2.510010e+03 3.159564e+05 9.982008e+05 1.901832e+05\n##  [3,] 3.358473e+08 1.775991e+08 5.666735e+07 7.414093e+07 1.171255e+07\n##  [4,] 5.247136e+11 7.198253e+11 2.388676e+11 4.634750e+11 5.296632e+11\n##  [5,] 1.681901e+14 6.943772e+12 4.209574e+14 4.013153e+14 2.131946e+14\n##  [6,] 5.353502e+17 8.768171e+15 5.872342e+17 1.539652e+17 4.137205e+16\n##  [7,] 7.167646e+15 1.105800e+20 3.288513e+20 1.476539e+18 8.321158e+17\n##  [8,] 1.790000e+20 2.967220e+23 7.464086e+23 1.211552e+23 6.419428e+23\n##  [9,] 3.419317e+24 8.036573e+24 6.368478e+26 1.168043e+22 4.738995e+21\n## [10,] 7.147887e+28 5.449514e+29 3.035188e+22 1.342963e+29 1.060808e+25\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.641000e+02 9.541000e+02 2.251000e+02 6.621000e+02\n##  [2,] 6.355441e+04 8.228304e+05 2.134521e+04 1.962801e+04\n##  [3,] 6.382774e+05 3.021117e+05 1.564936e+06 5.000211e+03\n##  [4,] 9.632358e+10 3.914767e+07 6.823757e+10 9.077730e+11\n##  [5,] 3.340782e+14 9.085421e+09 5.650250e+14 1.894823e+11\n##  [6,] 5.575855e+15 1.405960e+17 7.402137e+17 7.017329e+14\n##  [7,] 9.095120e+05 1.071749e+19 1.383389e+10 4.181144e+17\n##  [8,] 9.461148e+23 2.106866e+20 5.387364e+22 1.008028e+16\n##  [9,] 2.346190e+23 5.036455e+23 1.553444e+26 1.469565e+20\n## [10,] 3.425408e+24 1.189847e+21 1.016602e+21 1.505001e+27\n## \n## , , 4\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 8.431000e+02 8.641000e+02 4.181000e+02 2.621000e+02 7.811000e+02\n##  [2,] 9.430352e+05 1.376410e+03 1.460004e+05 4.666256e+05 1.311164e+05\n##  [3,] 8.254655e+06 1.298597e+06 3.404373e+07 4.913558e+08 6.598824e+07\n##  [4,] 4.349487e+11 7.430444e+10 5.639110e+08 5.089739e+09 1.464100e+00\n##  [5,] 1.025153e+14 7.336348e+11 2.220506e+14 6.881948e+11 8.591768e+14\n##  [6,] 7.496021e+17 8.884664e+15 8.232303e+17 3.980641e+15 6.028047e+17\n##  [7,] 2.559577e+20 3.104216e+20 2.517674e+14 8.726617e+16 1.165400e+11\n##  [8,] 6.686571e+22 1.302406e+19 1.190743e+13 1.392431e+22 5.690340e+10\n##  [9,] 2.102952e+25 1.133248e+26 6.531781e+19 7.896450e+26 3.305371e+24\n## [10,] 8.096000e+29 7.519367e+26 7.824077e+23 4.017714e+28 1.618185e+21\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 4.451000e+02 6.610000e+01 2.310000e+01 6.991000e+02\n##  [2,] 3.734432e+05 1.681000e+01 1.981140e+05 6.355441e+04\n##  [3,] 1.602207e+07 7.341149e+08 3.431470e+08 4.324355e+04\n##  [4,] 8.665005e+09 3.788847e+09 2.052666e+11 3.668145e+09\n##  [5,] 3.575981e+12 1.577359e+13 9.276873e+14 1.948392e+09\n##  [6,] 4.354448e+15 9.535263e+17 3.921022e+15 2.506573e+14\n##  [7,] 7.761655e+19 1.165400e+11 1.759632e+18 2.005874e+19\n##  [8,] 2.227082e+19 4.874720e+23 1.319564e+18 1.430900e+22\n##  [9,] 3.277712e+18 2.833281e+24 2.429508e+22 2.687938e+25\n## [10,] 2.217074e+26 2.994632e+28 6.724899e+29 4.017714e+28\n## \n## , , 5\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.351000e+02 1.100000e+00 2.781000e+02 2.410000e+01 6.581000e+02\n##  [2,] 8.173968e+05 8.083808e+05 2.758921e+04 6.661561e+04 2.906288e+05\n##  [3,] 2.464217e+04 2.809190e+06 7.513373e+08 8.466235e+07 6.886993e+08\n##  [4,] 1.948517e+09 5.401925e+10 9.924216e+11 4.437639e+09 5.447220e+11\n##  [5,] 6.022200e+13 2.914071e+12 8.329337e+14 8.591768e+14 6.975260e+13\n##  [6,] 9.709578e+17 3.964505e+17 3.319351e+17 8.576612e+01 1.846229e+16\n##  [7,] 9.376766e+19 7.999550e+19 1.044791e+18 4.424931e+11 9.196155e+20\n##  [8,] 7.123403e+19 1.964895e+17 9.705768e+22 4.879606e+19 3.131304e+18\n##  [9,] 1.328649e+26 9.857430e+20 5.610065e+25 2.932665e+24 1.658569e+15\n## [10,] 2.232534e+27 7.208132e+22 9.962705e+16 6.162678e+11 5.737194e+26\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 1.931000e+02 6.041000e+02 9.551000e+02 4.581000e+02\n##  [2,] 1.954524e+05 1.303932e+05 5.853780e+05 1.168561e+04\n##  [3,] 1.033364e+06 9.118576e+07 2.576988e+06 9.996195e+07\n##  [4,] 2.556953e+11 5.811197e+09 9.358681e+10 5.357244e+10\n##  [5,] 4.413613e+14 1.324117e+13 5.015798e+14 9.558027e+09\n##  [6,] 5.909151e+16 9.477741e+17 4.102148e+15 1.873204e+15\n##  [7,] 1.742418e+20 2.856325e+20 2.131854e+19 2.387303e+18\n##  [8,] 9.701111e+20 1.597254e+23 1.128137e+21 9.086721e+23\n##  [9,] 1.043872e+23 4.040552e+25 2.092105e+23 3.477588e+24\n## [10,] 6.240041e+26 2.711885e+21 5.742720e+20 1.689559e+29\n## \n## , , 6\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 1.991000e+02 2.501000e+02 3.631000e+02 4.451000e+02 1.451000e+02\n##  [2,] 8.101800e+05 8.532241e+04 9.006001e+04 9.623610e+03 1.815612e+05\n##  [3,] 1.183708e+05 1.738345e+08 6.121763e+08 9.530544e+08 2.727090e+04\n##  [4,] 4.180616e+11 1.322992e+11 2.864898e+08 9.648724e+11 1.796073e+07\n##  [5,] 8.733644e+13 1.669880e+13 9.229882e+14 7.493035e+11 1.948392e+09\n##  [6,] 6.877267e+14 2.206550e+12 1.956619e+16 3.417133e+15 5.157107e+16\n##  [7,] 3.795210e+11 1.956411e+20 3.342861e+20 5.582712e+20 5.931485e+20\n##  [8,] 5.640805e+22 1.125988e+23 9.273049e+16 4.163621e+22 1.694572e+15\n##  [9,] 9.865544e+25 1.954173e+26 5.310832e+26 2.978860e+26 6.719345e+23\n## [10,] 1.547081e+28 6.104709e+14 8.262905e+29 7.461019e+24 1.376157e+29\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 6.301000e+02 1.991000e+02 6.031000e+02 2.711000e+02\n##  [2,] 3.148332e+05 1.147041e+04 1.407000e+05 2.089404e+05\n##  [3,] 5.319980e+07 4.496311e+08 1.110449e+07 4.461189e+08\n##  [4,] 9.340944e+11 1.556378e+11 5.492124e+10 9.726843e+11\n##  [5,] 5.335242e+12 3.453636e+13 2.889026e+14 1.361245e+14\n##  [6,] 1.108601e+17 1.621533e+16 1.408483e+14 9.241910e+15\n##  [7,] 4.844842e+17 3.993409e+20 3.930102e+20 5.142169e+11\n##  [8,] 8.421726e+18 1.944904e+22 2.674832e+18 4.163621e+22\n##  [9,] 2.102085e+24 6.735407e+16 2.459431e+21 2.129477e+26\n## [10,] 1.490318e+25 7.961411e+24 5.386160e+27 1.836280e+29\n## \n## , , 7\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 7.061000e+02 6.241000e+02 1.671000e+02 2.431000e+02 3.521000e+02\n##  [2,] 4.557600e+05 3.261552e+05 6.709248e+05 3.541440e+05 2.571504e+05\n##  [3,] 5.007553e+08 3.372958e+07 7.638026e+08 5.886912e+08 5.314410e+02\n##  [4,] 8.550361e+04 6.904497e+08 5.912076e+10 5.679094e+11 8.509356e+10\n##  [5,] 1.952244e+13 4.346232e+13 3.118172e+14 3.629345e+11 9.611192e+14\n##  [6,] 2.755896e+14 1.426567e+12 1.348472e+17 2.663000e+17 1.392101e+13\n##  [7,] 3.482111e+20 2.676254e+14 8.482908e+17 2.838527e+16 6.635967e+20\n##  [8,] 1.430900e+22 3.225878e+14 7.474582e+22 7.348865e+21 1.969264e+19\n##  [9,] 6.466772e+21 8.676220e+24 7.896450e+26 8.499657e+26 1.572459e+24\n## [10,] 7.208132e+22 3.689484e+29 1.101732e+28 6.801463e+27 7.366415e+26\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 8.061000e+02 4.001000e+02 8.510000e+01 5.241000e+02\n##  [2,] 1.666681e+04 5.791210e+03 8.781564e+05 4.008156e+05\n##  [3,] 1.738345e+08 9.530544e+08 8.850125e+08 9.328612e+08\n##  [4,] 1.853020e+11 2.436846e+10 3.743764e+08 6.718982e+04\n##  [5,] 1.816971e+09 5.941074e+14 6.175447e+14 1.587977e+14\n##  [6,] 6.340083e+14 4.164050e+15 5.006813e+16 2.566131e+16\n##  [7,] 2.192546e+20 1.393666e+19 1.306294e+19 6.124317e+12\n##  [8,] 8.713874e+22 2.590545e+19 1.215274e+21 6.738015e+11\n##  [9,] 5.837181e+21 1.241514e+26 5.928572e+22 4.286718e+22\n## [10,] 1.106403e+22 9.757054e+21 1.888973e+27 7.216270e+26\n## \n## , , 8\n## \n##               [,1]         [,2]         [,3]         [,4]         [,5]\n##  [1,] 5.881000e+02 8.410000e+01 6.611000e+02 2.131000e+02 1.641000e+02\n##  [2,] 2.392188e+05 1.083068e+05 6.163820e+05 4.637610e+03 9.026900e+05\n##  [3,] 8.685237e+08 1.194390e+06 5.491533e+07 7.513373e+08 1.852905e+08\n##  [4,] 1.835960e+10 1.333653e+09 1.163989e+11 8.137487e+10 5.124916e+11\n##  [5,] 3.223084e+13 4.394579e+11 8.906254e+14 3.838739e+08 8.680699e+14\n##  [6,] 2.482247e+16 5.576381e+16 2.567066e+14 8.539001e+15 1.016664e+15\n##  [7,] 1.286492e+17 1.284487e+16 1.100764e+19 8.749695e+20 7.922533e+11\n##  [8,] 1.261009e+21 5.625670e+16 4.194951e+23 1.568403e+21 1.130027e+14\n##  [9,] 8.809447e+24 4.321807e+17 2.222262e+26 6.422997e+25 4.728965e+23\n## [10,] 5.564139e+28 3.982100e+26 3.769423e+25 9.126392e+28 5.203710e+28\n##               [,6]         [,7]         [,8]         [,9]\n##  [1,] 9.031000e+02 7.721000e+02 4.351000e+02 9.771000e+02\n##  [2,] 9.333492e+05 8.300161e+04 1.232010e+03 9.217920e+05\n##  [3,] 8.011873e+07 4.271279e+08 3.610962e+08 7.152505e+07\n##  [4,] 1.485249e+10 1.945064e+11 7.198253e+11 1.315703e+08\n##  [5,] 9.708461e+14 9.562851e+14 7.149741e+14 5.661449e+13\n##  [6,] 7.342237e+16 1.905444e+15 1.319331e+16 1.810086e+15\n##  [7,] 6.067004e+20 1.716583e+15 1.853138e+18 6.276479e+09\n##  [8,] 6.738015e+11 1.023775e+23 8.332821e+19 3.255547e+18\n##  [9,] 5.880162e+20 4.680205e+26 2.616486e+25 4.913827e+22\n## [10,] 3.424728e+20 6.383123e+29 1.593683e+26 3.941490e+29\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.d(x, y, \"&lt;\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"&gt;\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.d(x, y, \"&lt;=\")\n## , , 1\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 2\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 3\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 4\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 5\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 6\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 7\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## \n## , , 8\n## \n##        [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n##  [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n##  [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\nbc.d(x, y, \"&gt;=\")\n## , , 1\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n## \n## , , 2\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 3\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 4\n## \n##       [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n## \n## , , 5\n## \n##       [,1] [,2] [,3]  [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 6\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 7\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## \n## , , 8\n## \n##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n##  [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n##  [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.list.html",
    "href": "man/outer/bc.list.html",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n## , , 1\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n## \n## , , 2\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2"
  },
  {
    "objectID": "man/outer/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "href": "man/outer/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n## , , 1\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n## \n## , , 2\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2"
  },
  {
    "objectID": "Readme.html#overview",
    "href": "Readme.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "Readme.html#why-use-broadcast",
    "href": "Readme.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "Readme.html#documentation",
    "href": "Readme.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\n\nInstallation:\nBroadcasting Explained:\nExamples of Practical Applications:\nComparisons & Benchmarks:"
  },
  {
    "objectID": "vignettes/b_installation.html",
    "href": "vignettes/b_installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install ‘broadcast’ from GitHub, one may run the following code in ‘R’:\n\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n‘broadcast’ is not a large package per-sé, but it does contain a large amount of compiled code (‘C’ and ‘C++’). Compilation of the package may be slow on some operating systems, especially Linux systems; please be patient. On my own personal laptop (Windows 11), installation takes about 2 minutes.\nIf installation is too slow, one may try to speed up the installation using multi-threading, for example like so:\n\n\nnthreads &lt;- 8L # specify number of threads\nSys.setenv(MAKEFLAGS = paste0(\"-j\", nthreads)) # may speed up installation\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n \nTo attach the package - thus expose its functions to the namespace - please use the following:\n\n\nlibrary(broadcast)\n\n \nTo open the introduction help page of the ‘broadcast’ package, please use any of the following:\n\n\n?broadcast::broadcast\n?broadcast::broadcast_help\n?broadcast::`broadcast-package`"
  },
  {
    "objectID": "vignettes/d_practical_applications.html",
    "href": "vignettes/d_practical_applications.html",
    "title": "Practical Applications",
    "section": "",
    "text": "Introduction\nBroadcasting comes up frequent enough in real world problems. This articles gives a few examples of these.\n \n\n\nVector quantization\nThis first example is taken from Numpy’s own documentation.\nThe basic operation in Vector Quantization (VQ) finds the closest point in a set of points, called codes in VQ jargon, to a given point, called the observation. In the very simple, two-dimensional case shown below, the values in observation describe the weight and height of an athlete to be classified. The codes represent different classes of athletes. Finding the closest point requires calculating the distance between observation and each of the codes. The shortest distance provides the best match. In this example, codes[0] is the closest class indicating that the athlete is likely a basketball player.\n\n\nobservation &lt;- array(c(111.0, 188.0), dim = c(1, 2))\ncodes &lt;- array(\n  c(102.0, 203.0,\n    132.0, 193.0,\n    45.0, 155.0,\n    57.0, 173.0),\n  dim = c(4, 2)\n)\n\ndiff &lt;- bc.num(codes, observation, \"-\")\ndist &lt;- apply(diff^2, 2L, sum) |&gt; sqrt()\nwhich.min(dist); dist[which.min(dist)]\n#&gt; [1] 1\n#&gt; [1] 125.3395\n\n \n\n\nFind most resembling string\nIf you have 2 vectors of strings, and you want to find which pair of strings (one string from each vector), you’ll need to find the string distance of all possible combinations.\nThis can be done very fast and very conveniently with ‘broadcast’, using the following code:\n\nx &lt;- array(month.name)\ny &lt;- array(month.abb, c(1, 12))\n\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(x, y)\nprint(out)\n#&gt;           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n#&gt; January     4   7   5   6   5   5   5   6   7   7   7   7\n#&gt; February    7   5   6   7   6   7   7   7   7   8   8   7\n#&gt; March       4   5   2   4   3   5   5   5   5   4   5   4\n#&gt; April       5   5   4   2   5   5   4   4   5   5   5   5\n#&gt; May         2   3   1   3   0   3   3   3   3   3   3   3\n#&gt; June        2   4   4   4   4   1   2   3   4   4   4   4\n#&gt; July        3   4   4   4   3   2   1   3   4   4   4   4\n#&gt; August      6   6   6   5   6   5   5   3   6   5   6   6\n#&gt; September   9   7   8   7   9   9   9   9   6   8   9   8\n#&gt; October     7   6   6   6   7   7   7   7   6   4   6   6\n#&gt; November    8   6   7   7   8   8   8   8   7   8   5   7\n#&gt; December    8   6   7   7   8   8   8   8   7   7   8   5"
  }
]