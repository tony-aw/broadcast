[
  {
    "objectID": "vignettes/e_benchmarks.html",
    "href": "vignettes/e_benchmarks.html",
    "title": "Benchmarks with Numpy+reticulate",
    "section": "",
    "text": "Introduction\nIn this article, the speed of ‘broadcast’ is compared to the speed of ‘Numpy’ via {reticulate}.\n \n\n\nKeeping comparisons fair\nTo keep the comparisons between ‘broadcast’ and ‘Numpy’+‘reticulate’ fair, a number of measures have been taken:\n\nconversion from Numpy to ‘R’ is DISABLED; this allows for comparing the speed more fairly. When conversion would be enabled, precious time would be wasted to convert from Numpy structures to comparable ‘R’ structures.\ngarbage collection is disabled in reticulate’s Python. In ‘R’, only benchmarks with no garbage collection, or level 0 garbage collection, is used. I feel this keeps the comparisons relatively fair (but it’s not perfect).\n‘R’ has more support for missing values than ‘Numpy’, which also leads to a difference in speed. But both ‘R’ and ‘Numpy’ handle missing values equally in decimal numbers ( 64bit floats in Numpy and 64bit doubles in ‘R’ ), through the NaN construct. Therefore, only operations on decimal numbers are compared.\n\n \n\n\nMany Orthogonal Arrays\n8 pairs of decimal number arrays are created in both ‘R’ and ‘Numpy’. They all have a length of (approximately) 9*10^6 elements. Each pair will have a different number of dimensions, from 2 to 9 (hence 8 pairs of arrays). I.e. a pair of 2d arrays, a pair of 3d arrays, etc.\nThese pairs of arrays are fully orthogonal, thus the maximum amount of broadcasting will be employed.\nFor each pair of array the outer sum is computed using ‘broadcast’ and ‘Numpy’. This computation is repeated 100 times, and the median result is taken.\nThus we get the following code:\n\n# set-up ====\nlibrary(broadcast)\nlibrary(tinycodet)\nimport_as(~rt, \"reticulate\")\nnp &lt;- rt$import(\"numpy\", convert = FALSE)\ngc &lt;- rt$import(\"gc\", convert = FALSE)\nget_times &lt;- function(obj, j) {\n  nms &lt;- names(res$expression)\n  j &lt;- which(nms == j)\n  idx &lt;- rowSums(obj$gc[[j]][, 2:3]) == 0\n  times &lt;- obj$time[[j]][idx]\n  return(times)\n}\ngc$disable()\n\n# loop\nmedian_bc &lt;- median_np &lt;- q1_bc &lt;- q1_np &lt;- q3_bc &lt;- q3_np &lt;- vector(\"numeric\", 8)\ncounter &lt;- 1L\ntarget_len &lt;- 9e6\n\nfor(i in 2:9) {\n  print(i)\n  n &lt;- round(target_len^(1/i)) |&gt; as.integer()\n  len &lt;- n^i\n  cat(\"i = \", i, \"\\n\")\n  cat(\"n = \", n, \"\\n\")\n  cat(\"len = \", len, \"\\n\")\n  x.dims &lt;- rep(c(n, 1L), i - 1)[1:i]\n  y.dims &lt;- rep(c(1L, n), i - 1)[1:i]\n  a.dims &lt;- rt$r_to_py(as.list(x.dims))\n  b.dims &lt;- rt$r_to_py(as.list(y.dims))\n  \n  npa &lt;- np$random$random_sample(a.dims)\n  npb &lt;- np$random$random_sample(b.dims)\n  a &lt;- array(runif(100), x.dims)\n  b &lt;- array(runif(100), y.dims)\n  \n  res &lt;- bench::mark(\n    broadcast = bc.num(a, b, \"+\"),\n    `numpy (NO conversion to R)` = npa + npb,\n    check = FALSE,\n    min_iterations = 100\n  )\n  bc_all &lt;- get_times(res, \"broadcast\")\n  np_all &lt;- get_times(res, \"numpy (NO conversion to R)\")\n  median_bc[counter] &lt;- median(bc_all)\n  median_np[counter] &lt;- median(np_all)\n  q1_bc[counter] &lt;- quantile(bc_all, 0.25)\n  q3_bc[counter] &lt;- quantile(bc_all, 0.75)\n  q1_np[counter] &lt;- quantile(np_all, 0.25)\n  q3_np[counter] &lt;- quantile(np_all, 0.75)\n  \n  counter &lt;- counter + 1L\n}\n\nUsing {tinyplot}, the median, first quartile, and third quartile of the bench-marked computation times are presented in the following graph:\n\n\n\n\n\n \n\n\nLarge non-orthogonal arrays comparisons\nHow about arrays that are not fully orthogonal, but still require a lot of broadcasting in pari-wise computations?\nHere is the benchmark:\n\n\nlibrary(broadcast)\nlibrary(tinycodet)\nimport_as(~rt, \"reticulate\")\nnp &lt;- rt$import(\"numpy\", convert = FALSE)\ngc &lt;- rt$import(\"gc\", convert = FALSE)\ngc$disable()\n\nn &lt;- 26L\nnpa &lt;- np$random$rand(n, 1L, n, 1L, n)\nnpb &lt;- np$random$rand(n, n, 1L, n, 1L)\n\na.dim &lt;- c(n, rep(c(1L, n), 2))\nb.dim &lt;- c(n, rep(c(n, 1L), 2))\na &lt;- array(rnorm(100), a.dim)\nb &lt;- array(rnorm(100), b.dim)\n\nbm_numpy_large &lt;- bench::mark(\n  broadcast = bc.num(a, b, \"+\"),\n  `numpy (no conversion to R)` = npa + npb,\n  check = FALSE,\n  min_iterations = 200,\n)\nsummary(bm_numpy_large)\nggplot2::autoplot(bm_numpy_large)\n\n\n#&gt; # A tibble: 2 × 6\n#&gt;   expression                      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt;                 &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 broadcast                    16.6ms   17.6ms      55.4    90.6MB     27.3\n#&gt; 2 numpy (no conversion to R)   25.4ms   30.9ms      32.4        0B      0"
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#example-case",
    "href": "vignettes/c_broadcasting_explained.html#example-case",
    "title": "Broadcasting Explained",
    "section": "2.1 Example case",
    "text": "2.1 Example case\nLet’s start with a simple example.\nConsider 2 orthogonal 1d arrays, namely the column vector x and the row vector y:\n\nx &lt;- array(1:5, c(5, 1))\ny &lt;- array(1:5*10, c(1, 5))\nprint(x)\n#&gt;      [,1]\n#&gt; [1,]    1\n#&gt; [2,]    2\n#&gt; [3,]    3\n#&gt; [4,]    4\n#&gt; [5,]    5\nprint(y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   10   20   30   40   50\n\nSuppose one wishes to compute the outer sum of these 2 vectors.\nThis won’t work in base ‘R’:\n\nx + y\nError in x + y : non-conformable arrays\n\nWhen computing the outer sum of these orthogonal vectors, both vectors need to be recycled to equal size in order to compute the outer computation.\nI.e. x needs its single column to be recycled (in this case) 5 times, and y needs its single row to be recycled 5 times, creating 2 conformable matrices.\n‘R’ provides linear vector recycling, but not recycling of array dimensions. Instead, in base ‘R’ we need to replicate (and thus copy) the array dimensions. This can be done manually, or using outer() |&gt; drop():\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55"
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#what-is-the-problem",
    "href": "vignettes/c_broadcasting_explained.html#what-is-the-problem",
    "title": "Broadcasting Explained",
    "section": "2.2 What is the problem?",
    "text": "2.2 What is the problem?\nWhen x and y are small arrays, like in the above example, there is hardly a problem; but when x and y become larger, the 3 matrices (x is replicated to a matrix, y is replicated to a matrix, and the result is also matrix) also become larger.\nIf the 3 matrices become too large, you may require more memory than is available in your current system, resulting in a message like the following:\n\n&gt; Error: cannot allocate vector of size\n\nThe problem isn’t limited to available memory. As the object sizes increase, the speed decreases. And let’s not forget that computational inefficiency in general is also bad for the environment."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#introducing-broadcasting",
    "href": "vignettes/c_broadcasting_explained.html#introducing-broadcasting",
    "title": "Broadcasting Explained",
    "section": "2.3 Introducing Broadcasting",
    "text": "2.3 Introducing Broadcasting\nIn an operation like outer(x, y, \"+\"), x and y are replicated to become the same size. The thing is, physical replication - and thus copying - of the dimensions of x and y should not be necessary; they only need to be recycled virtually.\nVirtual recycling does not actually physically replicate x and y. Instead, nested loops in ‘C’ and ‘C++’ are used to simulate a recycled array.\nThis is similar to how ‘R’ recycles regular vectors.\nVirtual recycling requires no additional memory (apart from allocating the final end result); it is much faster and much more memory efficient than using the outer() function or something similar.\nAnd that is what broadcasting does: broadcasting provides fast virtual recycling of array dimensions in the context of operations involving 2 (or more) arrays without allocating additional memory.\nIn the earlier example, we used:\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nTo compute the outer sum using broadcasting through the ‘broadcast’ package, we can do the following:\n\nlibrary(broadcast)\n\nbc.num(x, y, \"+\")\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nThe result is the same (as it should). But as the size of the resulting array increases, the broadcasted functions become more and more efficient in terms of both speed and memory, in comparison with base ‘R’ approaches.\nBenchmarks can be found on the website."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#conformability",
    "href": "vignettes/c_broadcasting_explained.html#conformability",
    "title": "Broadcasting Explained",
    "section": "4.1 Conformability",
    "text": "4.1 Conformability\nBroadcasted operations only work when 2 arrays are conformable for broadcasting.\nConsider again 2 arrays x and y, and their dimensions given by dim(x) and dim(y), respectively.\n‘broadcast’ goes through dim(x) and dim(y), from left (i.e. first dimension / rows) to right (i.e. the last dimension), and checks for each axis i if at least one of the following conditions is TRUE:\n\ndim(x)[i] and dim(y)[i] are equal;\neither dim(x)[i] or dim(y)[i] is 1;\neither dim(x)[i] or dim(y)[i] is non-existing.\n\nif at least one of the above conditions is true for each and every one of the dimensions of x and y, the 2 arrays are compatible for broadcasted operations. If not, they are not compatible, and attempting to perform a broadcasted operations results in an error.\nTo illustrate, let’s check 2 arrays to see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 1))\n\n\n\n\n\n\ndim(x)\ndim(y)\ncompatible\nreason\n\n\n\n\n10\n10\nTRUE\nequal\n\n\n1\n5\nTRUE\neither is 1\n\n\n9\n1\nTRUE\neither is 1\n\n\n6\nNA\nTRUE\neither is missing\n\n\n\n\n\n\n\nAs shown in the data.frame above, all dimensions of x and y are compatible.\nTherefore, broadcasted binary operations involving x and y can be performed.\n \nNow let’s look at another 2 arrays, and see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 2))\n\n\n\n\n\n\ndim(x)\ndim(y)\ncompatible\nreason\n\n\n\n\n10\n10\nTRUE\nequal\n\n\n1\n5\nTRUE\neither is 1\n\n\n9\n2\nFALSE\nnot equal & neither is 1/missing\n\n\n6\nNA\nTRUE\neither is missing\n\n\n\n\n\n\n\nOne of the dimensions, namely the third dimension, is not compatible. Therefore, these 2 arrays are not conformable for broadcasted operations."
  },
  {
    "objectID": "vignettes/c_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "href": "vignettes/c_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "title": "Broadcasting Explained",
    "section": "4.2 Which dimensions are broadcasted",
    "text": "4.2 Which dimensions are broadcasted\nIn the context of an operation involving exactly 2 arrays, this sub-section explains which dimensions of which array is broadcasted, and which dimension of which array is left as-is.\nThere are 3 scenarios relevant for this explanation.\n \nScenario 1:\nFor some dimension i, dim(x)[i] and dim(y)[i] are equal.\nIn this scenario, no broadcasting needs to occur on that dimension for either array.\n \nScenario 2:\nFor some dimension i, suppose dim(x)[i] == 1 and dim(y)[i] &gt; 1.\nThen dimension dim(x)[i] is broadcasted to size dim(y)[i].\nSimilarly, if dim(x)[i] &gt; 1 and dim(y)[i] == 1, dimension dim(y)[i] is broadcasted to size dim(x)[i].\n \nScenario 3:\nFinally, suppose for some dimension i, dim(x)[i] &gt; 1, and dim(y)[i] is non-existing.\nI.e., x has more dimensions than y.\nIn this case, the missing dimension in y is replaced with a dimensions of size 1, and scenario 2 is used.\nSimilarly, if dim(y)[i] &gt; 1 and dim(x)[i] is non-existing, the missing dimension in x is replaced with a dimension of size 1 and we get back to scenario 2.\nIt does not matter how much difference there is between the number of dimensions of x and the number of dimensions of y: any number of missing dimensions will be replaced with 1, as long as the total number of dimensions for each array does not exceed 16.\n \nIllustration\nTo illustrate, let’s check 2 conformable arrays, and see which dimension of which array is broadcasted by how much\n\nx &lt;- array(rnorm(10), c(10, 1, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 1, 5, 1))\n\n\n\n\n\n\ni\ndim(x)\ndim(y)\nbroadcasted\nreason\nnote\n\n\n\n\n1\n10\n10\nneither\ndims equal\n\n\n\n2\n1\n1\nneither\ndims equal\n\n\n\n3\n1\n5\nx\ndim(x)[i] == 1\ndim(x)[i] recycled to size 5\n\n\n4\n9\n1\ny\ndim(y)[i] == 1\ndim(y)[i] recycled to size 9\n\n\n5\n6\nNA\ny\ndim(y)[i] is missing\ndim(y) extended by 1"
  },
  {
    "objectID": "vignettes/a_readme.html#overview",
    "href": "vignettes/a_readme.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "vignettes/a_readme.html#why-use-broadcast",
    "href": "vignettes/a_readme.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "vignettes/a_readme.html#documentation",
    "href": "vignettes/a_readme.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/outer/bc.str.html",
    "href": "man/outer/bc.str.html",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of typee character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n\n, , 1\n\n      [,1] [,2]\n [1,] \"aa\" \"ka\"\n [2,] \"bb\" \"lb\"\n [3,] \"cc\" \"mc\"\n [4,] \"dd\" \"nd\"\n [5,] \"ee\" \"oe\"\n [6,] \"ff\" \"pf\"\n [7,] \"gg\" \"qg\"\n [8,] \"hh\" \"rh\"\n [9,] \"ii\" \"si\"\n[10,] \"jj\" \"tj\"\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.str(array(letters), array(letters), \"!=\")\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n\n          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\nJanuary     4   7   5   6   5   5   5   6   7   7   7   7\nFebruary    7   5   6   7   6   7   7   7   7   8   8   7\nMarch       4   5   2   4   3   5   5   5   5   4   5   4\nApril       5   5   4   2   5   5   4   4   5   5   5   5\nMay         2   3   1   3   0   3   3   3   3   3   3   3\nJune        2   4   4   4   4   1   2   3   4   4   4   4\nJuly        3   4   4   4   3   2   1   3   4   4   4   4\nAugust      6   6   6   5   6   5   5   3   6   5   6   6\nSeptember   9   7   8   7   9   9   9   9   6   8   9   8\nOctober     7   6   6   6   7   7   7   7   6   4   6   6\nNovember    8   6   7   7   8   8   8   8   7   8   5   7\nDecember    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/outer/bc.str.html#broadcasted-string-operations",
    "href": "man/outer/bc.str.html#broadcasted-string-operations",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of typee character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n\n, , 1\n\n      [,1] [,2]\n [1,] \"aa\" \"ka\"\n [2,] \"bb\" \"lb\"\n [3,] \"cc\" \"mc\"\n [4,] \"dd\" \"nd\"\n [5,] \"ee\" \"oe\"\n [6,] \"ff\" \"pf\"\n [7,] \"gg\" \"qg\"\n [8,] \"hh\" \"rh\"\n [9,] \"ii\" \"si\"\n[10,] \"jj\" \"tj\"\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n\n [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.str(array(letters), array(letters), \"!=\")\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n\n          Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\nJanuary     4   7   5   6   5   5   5   6   7   7   7   7\nFebruary    7   5   6   7   6   7   7   7   7   8   8   7\nMarch       4   5   2   4   3   5   5   5   5   4   5   4\nApril       5   5   4   2   5   5   4   4   5   5   5   5\nMay         2   3   1   3   0   3   3   3   3   3   3   3\nJune        2   4   4   4   4   1   2   3   4   4   4   4\nJuly        3   4   4   4   3   2   1   3   4   4   4   4\nAugust      6   6   6   5   6   5   5   3   6   5   6   6\nSeptember   9   7   8   7   9   9   9   9   6   8   9   8\nOctober     7   6   6   6   7   7   7   7   6   4   6   6\nNovember    8   6   7   7   8   8   8   8   7   8   5   7\nDecember    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/outer/bc.i.html",
    "href": "man/outer/bc.i.html",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.i(x, y, \"+\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  820  829  413  411  724  266  877  845  880\n [2,]  257   41  997  738  441   50  416  735  395\n [3,]  211  936  876   98  594  806  303  896   36\n [4,]   45   95  291  442  688  437  395  187  545\n [5,]  961  137  674  431  162  705  320  263  889\n [6,]  385  713  365  783  320  441  328  492  315\n [7,]  956   54  656  891  480  218  325  638  935\n [8,]  273  977  164  402  217  527  889  341  203\n [9,]  965  567  669  205  166  640  457  579  885\n[10,]  429  593  320  875  794  269 1000  602  703\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  461  223   58  439  850  125  927  976  284\n [2,]  963  479  509  552  463  547  234  434  292\n [3,]  105  426   70  359  142  521  368  222  693\n [4,]  470  991  585  179   30  825  523  514  549\n [5,]  371  836  706  683  318  320   33  234  270\n [6,]  897  677  935  206  581  181  805  797  317\n [7,]  597  261   11  109  230  909  268  157  273\n [8,]  204  475  109  298  356  168  323   30  155\n [9,]  111  565  493  503  583  909  469  196   90\n[10,]  490  634  342  832  867  562  281   28   96\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  339  433  488  862  874  492  439  762  379\n [2,]  648  593  156  266   76  658  508  740  506\n [3,]  519  756  602  194  975  753  953  915  237\n [4,]   56  574  657  862  187  514  758  338  451\n [5,]   91  254  309  175  916  602  379  761  249\n [6,]  779   87  530  548  852  918  398  344  651\n [7,]  853  750  652  768  145  484  739  816  865\n [8,]  471  799  884  427  372  321  932   36  712\n [9,]  957  414   66  279  473  133  289  761  835\n[10,]   54  203  489 1000  928  270  915  262  787\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  896  697   52  935   50  280  579  754  614\n [2,]  206  190  253  187  267   94  212  969   89\n [3,]  977  723  217  987  160  955  202  570  117\n [4,]  680  625  616  660  413  355  198  491  838\n [5,]  414  625   86  511  480  781  358  876  671\n [6,]  266  701  741  609  469  702  258  300  645\n [7,]  139  648  971  496  720  349  742  587  922\n [8,]  535  616  142  157  827  451   11  606  885\n [9,]  570  865  173   23  852  414  543  439  376\n[10,]  800  307  110  346  244  802  693  152  980\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  277  369  918  471  637  829   97  921  620\n [2,]  751  442  259  257  735  861  406  662  618\n [3,]  461  966  334  686  931  845  417   29  950\n [4,]  481  782  332  635  409   21  662  833  617\n [5,]  117  612  415  284  448   77 1001  492  677\n [6,]  425  863  297  291  717  712  911  329   39\n [7,]  305  805  413  302  705  624  805  949  987\n [8,]  793  768  141  967  826   79  945   99  585\n [9,]  870  463  617  801  281  878  997  460  618\n[10,]  315  461  536  458   59  744  191  596  927\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  812  478  690  736  634  726  620  844  994\n [2,]  862  143  128  168  726  134  901  510  702\n [3,]  798  823  151   55  459   45  622  548  642\n [4,]  313  508  859  371  477   33  508  467  412\n [5,]  771  404  755  775  362  743   29  321  748\n [6,]  776  577  883   55  981  757  718  956  900\n [7,]  752  825  758  822  190   68  136  565  990\n [8,]   14  282  521  489  493  481   72  512   17\n [9,]  326  126  281  270  275  263  511  456  463\n[10,]  643  670  931  904  890  182  589  386  410\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  799  920  900  912  707  750  866  312  430\n [2,]  389  116  374  189  513  710  161  767   73\n [3,]  466  639  353  797  642  973  288  505  767\n [4,]   12 1003  909  367  652  636  479  515  733\n [5,]  820  532  498  942  504  655   70  386  142\n [6,]  643  480  191   59   54  510  458  121  605\n [7,]  591  474  800  939  693  285  728   26  317\n [8,]  525  449  468  361  984  510  366  162  539\n [9,]  191  219  180  445  731  178  509  968  227\n[10,]  845  600  850  506  754  274  790  428  166\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  308  286  100  273  399  733  408  975  243\n [2,]  964   84   77  812    5  120  132  684  170\n [3,]  766   24  230  746    9  375  338  621  119\n [4,]  871  602  837  520  785  183  444  348  294\n [5,]  912  929 1002  776  827  752  982  189  733\n [6,]  731  366  138  932  360   94  597   97  330\n [7,]  205  933  264   45  139  874  953  825  287\n [8,]  577  291  425  832  764  772  449  613  975\n [9,]   48  841  614  483   22  952  408  241  887\n[10,]  407  801  448  143  384  840  862  373   72\n\nbc.i(x, y, \"-\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  818  827  411  409  722  264  875  843  878\n [2,]  253   37  993  734  437   46  412  731  391\n [3,]  205  930  870   92  588  800  297  890   30\n [4,]   37   87  283  434  680  429  387  179  537\n [5,]  951  127  664  421  152  695  310  253  879\n [6,]  373  701  353  771  308  429  316  480  303\n [7,]  942   40  642  877  466  204  311  624  921\n [8,]  257  961  148  386  201  511  873  325  187\n [9,]  947  549  651  187  148  622  439  561  867\n[10,]  409  573  300  855  774  249  980  582  683\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  459  221   56  437  848  123  925  974  282\n [2,]  959  475  505  548  459  543  230  430  288\n [3,]   99  420   64  353  136  515  362  216  687\n [4,]  462  983  577  171   22  817  515  506  541\n [5,]  361  826  696  673  308  310   23  224  260\n [6,]  885  665  923  194  569  169  793  785  305\n [7,]  583  247   -3   95  216  895  254  143  259\n [8,]  188  459   93  282  340  152  307   14  139\n [9,]   93  547  475  485  565  891  451  178   72\n[10,]  470  614  322  812  847  542  261    8   76\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  337  431  486  860  872  490  437  760  377\n [2,]  644  589  152  262   72  654  504  736  502\n [3,]  513  750  596  188  969  747  947  909  231\n [4,]   48  566  649  854  179  506  750  330  443\n [5,]   81  244  299  165  906  592  369  751  239\n [6,]  767   75  518  536  840  906  386  332  639\n [7,]  839  736  638  754  131  470  725  802  851\n [8,]  455  783  868  411  356  305  916   20  696\n [9,]  939  396   48  261  455  115  271  743  817\n[10,]   34  183  469  980  908  250  895  242  767\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  894  695   50  933   48  278  577  752  612\n [2,]  202  186  249  183  263   90  208  965   85\n [3,]  971  717  211  981  154  949  196  564  111\n [4,]  672  617  608  652  405  347  190  483  830\n [5,]  404  615   76  501  470  771  348  866  661\n [6,]  254  689  729  597  457  690  246  288  633\n [7,]  125  634  957  482  706  335  728  573  908\n [8,]  519  600  126  141  811  435   -5  590  869\n [9,]  552  847  155    5  834  396  525  421  358\n[10,]  780  287   90  326  224  782  673  132  960\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  275  367  916  469  635  827   95  919  618\n [2,]  747  438  255  253  731  857  402  658  614\n [3,]  455  960  328  680  925  839  411   23  944\n [4,]  473  774  324  627  401   13  654  825  609\n [5,]  107  602  405  274  438   67  991  482  667\n [6,]  413  851  285  279  705  700  899  317   27\n [7,]  291  791  399  288  691  610  791  935  973\n [8,]  777  752  125  951  810   63  929   83  569\n [9,]  852  445  599  783  263  860  979  442  600\n[10,]  295  441  516  438   39  724  171  576  907\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  810  476  688  734  632  724  618  842  992\n [2,]  858  139  124  164  722  130  897  506  698\n [3,]  792  817  145   49  453   39  616  542  636\n [4,]  305  500  851  363  469   25  500  459  404\n [5,]  761  394  745  765  352  733   19  311  738\n [6,]  764  565  871   43  969  745  706  944  888\n [7,]  738  811  744  808  176   54  122  551  976\n [8,]   -2  266  505  473  477  465   56  496    1\n [9,]  308  108  263  252  257  245  493  438  445\n[10,]  623  650  911  884  870  162  569  366  390\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  797  918  898  910  705  748  864  310  428\n [2,]  385  112  370  185  509  706  157  763   69\n [3,]  460  633  347  791  636  967  282  499  761\n [4,]    4  995  901  359  644  628  471  507  725\n [5,]  810  522  488  932  494  645   60  376  132\n [6,]  631  468  179   47   42  498  446  109  593\n [7,]  577  460  786  925  679  271  714   12  303\n [8,]  509  433  452  345  968  494  350  146  523\n [9,]  173  201  162  427  713  160  491  950  209\n[10,]  825  580  830  486  734  254  770  408  146\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  306  284   98  271  397  731  406  973  241\n [2,]  960   80   73  808    1  116  128  680  166\n [3,]  760   18  224  740    3  369  332  615  113\n [4,]  863  594  829  512  777  175  436  340  286\n [5,]  902  919  992  766  817  742  972  179  723\n [6,]  719  354  126  920  348   82  585   85  318\n [7,]  191  919  250   31  125  860  939  811  273\n [8,]  561  275  409  816  748  756  433  597  959\n [9,]   30  823  596  465    4  934  390  223  869\n[10,]  387  781  428  123  364  820  842  353   52\n\nbc.i(x, y, \"*\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  819  828  412  410  723  265  876  844  879\n [2,]  510   78 1990 1472  878   96  828 1466  786\n [3,]  624 2799 2619  285 1773 2409  900 2679   99\n [4,]  164  364 1148 1752 2736 1732 1564  732 2164\n [5,] 4780  660 3345 2130  785 3500 1575 1290 4420\n [6,] 2274 4242 2154 4662 1884 2610 1932 2916 1854\n [7,] 6643  329 4543 6188 3311 1477 2226 4417 6496\n [8,] 2120 7752 1248 3152 1672 4152 7048 2664 1560\n [9,] 8604 5022 5940 1764 1413 5679 4032 5130 7884\n[10,] 4190 5830 3100 8650 7840 2590 9900 5920 6930\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  460  222   57  438  849  124  926  975  283\n [2,] 1922  954 1014 1100  922 1090  464  864  580\n [3,]  306 1269  201 1068  417 1554 1095  657 2070\n [4,] 1864 3948 2324  700  104 3284 2076 2040 2180\n [5,] 1830 4155 3505 3390 1565 1575  140 1145 1325\n [6,] 5346 4026 5574 1200 3450 1050 4794 4746 1866\n [7,] 4130 1778   28  714 1561 6314 1827 1050 1862\n [8,] 1568 3736  808 2320 2784 1280 2520  176 1176\n [9,]  918 5004 4356 4446 5166 8100 4140 1683  729\n[10,] 4800 6240 3320 8220 8570 5520 2710  180  860\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  338  432  487  861  873  491  438  761  378\n [2,] 1292 1182  308  528  148 1312 1012 1476 1008\n [3,] 1548 2259 1797  573 2916 2250 2850 2736  702\n [4,]  208 2280 2612 3432  732 2040 3016 1336 1788\n [5,]  430 1245 1520  850 4555 2985 1870 3780 1220\n [6,] 4638  486 3144 3252 5076 5472 2352 2028 3870\n [7,] 5922 5201 4515 5327  966 3339 5124 5663 6006\n [8,] 3704 6328 7008 3352 2912 2504 7392  224 5632\n [9,] 8532 3645  513 2430 4176 1116 2520 6768 7434\n[10,]  440 1930 4790 9900 9180 2600 9050 2520 7770\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  895  696   51  934   49  279  578  753  613\n [2,]  408  376  502  370  530  184  420 1934  174\n [3,] 2922 2160  642 2952  471 2856  597 1701  342\n [4,] 2704 2484 2448 2624 1636 1404  776 1948 3336\n [5,] 2045 3100  405 2530 2375 3880 1765 4355 3330\n [6,] 1560 4170 4410 3618 2778 4176 1512 1764 3834\n [7,]  924 4487 6748 3423 4991 2394 5145 4060 6405\n [8,] 4216 4864 1072 1192 6552 3544   24 4784 7016\n [9,] 5049 7704 1476  126 7587 3645 4806 3870 3303\n[10,] 7900 2970 1000 3360 2340 7920 6830 1420 9700\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  276  368  917  470  636  828   96  920  619\n [2,] 1498  880  514  510 1466 1718  808 1320 1232\n [3,] 1374 2889  993 2049 2784 2526 1242   78 2841\n [4,] 1908 3112 1312 2524 1620   68 2632 3316 2452\n [5,]  560 3035 2050 1395 2215  360 4980 2435 3360\n [6,] 2514 5142 1746 1710 4266 4236 5430 1938  198\n [7,] 2086 5586 2842 2065 4886 4319 5586 6594 6860\n [8,] 6280 6080 1064 7672 6544  568 7496  728 4616\n [9,] 7749 4086 5472 7128 2448 7821 8892 4059 5481\n[10,] 3050 4510 5260 4480  490 7340 1810 5860 9170\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  811  477  689  735  633  725  619  843  993\n [2,] 1720  282  252  332 1448  264 1798 1016 1400\n [3,] 2385 2460  444  156 1368  126 1857 1635 1917\n [4,] 1236 2016 3420 1468 1892  116 2016 1852 1632\n [5,] 3830 1995 3750 3850 1785 3690  120 1580 3715\n [6,] 4620 3426 5262  294 5850 4506 4272 5700 5364\n [7,] 5215 5726 5257 5705 1281  427  903 3906 6881\n [8,]   48 2192 4104 3848 3880 3784  512 4032   72\n [9,] 2853 1053 2448 2349 2394 2286 4518 4023 4086\n[10,] 6330 6600 9210 8940 8800 1720 5790 3760 4000\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  798  919  899  911  706  749  865  311  429\n [2,]  774  228  744  374 1022 1416  318 1530  142\n [3,] 1389 1908 1050 2382 1917 2910  855 1506 2292\n [4,]   32 3996 3620 1452 2592 2528 1900 2044 2916\n [5,] 4075 2635 2465 4685 2495 3250  325 1905  685\n [6,] 3822 2844 1110  318  288 3024 2712  690 3594\n [7,] 4088 3269 5551 6524 4802 1946 5047  133 2170\n [8,] 4136 3528 3680 2824 7808 4016 2864 1232 4248\n [9,] 1638 1890 1539 3924 6498 1521 4500 8631 1962\n[10,] 8350 5900 8400 4960 7440 2640 7800 4180 1560\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  307  285   99  272  398  732  407  974  242\n [2,] 1924  164  150 1620    6  236  260 1364  336\n [3,] 2289   63  681 2229   18 1116 1005 1854  348\n [4,] 3468 2392 3332 2064 3124  716 1760 1376 1160\n [5,] 4535 4620 4985 3855 4110 3735 4885  920 3640\n [6,] 4350 2160  792 5556 2124  528 3546  546 1944\n [7,] 1386 6482 1799  266  924 6069 6622 5726 1960\n [8,] 4552 2264 3336 6592 6048 6112 3528 4840 7736\n [9,]  351 7488 5445 4266  117 8487 3591 2088 7902\n[10,] 3970 7910 4380 1330 3740 8300 8520 3630  620\n\nbc.i(x, y, \"gcd\") # greatest common divisor\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    1    1    2    1    2    2    1    1\n [3,]    1    3    3    1    3    1    3    1    3\n [4,]    1    1    1    2    4    1    1    1    1\n [5,]    1    1    1    1    1    5    5    1    1\n [6,]    1    1    1    3    2    3    2    6    3\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    1    1    4    2    1    1    1    1    1\n [9,]    1    9    3    1    1    1    1    3    3\n[10,]    1    1   10    5    2    1   10    2    1\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    1    1    2    1    1    2    2    2\n [3,]    3    3    1    1    1    1    1    3    3\n [4,]    2    1    1    1    2    1    1    2    1\n [5,]    1    1    1    1    1    5    1    1    5\n [6,]    3    1    1    2    1    1    1    1    1\n [7,]    1    1    1    1    1    1    1    1    7\n [8,]    4    1    1    2    4    8    1    2    1\n [9,]    3    1    1    1    1    9    1    1    9\n[10,]   10    2    2    2    1    2    1    2    2\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    1    2    2    2    2    2    2    2\n [3,]    3    3    1    1    3    3    1    3    3\n [4,]    4    2    1    2    1    2    2    2    1\n [5,]    1    1    1    5    1    1    1    1    1\n [6,]    1    3    2    2    6    6    2    2    3\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    1    1    4    1    4    1    4    4    8\n [9,]    3    9    3    9    1    1    1    1    1\n[10,]    2    1    1   10    2   10    5    2    1\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    2    1    1    1    2    2    1    1\n [3,]    1    3    1    3    1    1    1    3    3\n [4,]    4    1    4    4    1    1    2    1    2\n [5,]    1    5    1    1    5    1    1    1    1\n [6,]    2    1    3    3    1    6    6    6    3\n [7,]    1    1    1    1    1    1    7    1    1\n [8,]    1    8    2    1    1    1    1    2    1\n [9,]    3    1    1    1    3    9    3    1    1\n[10,]   10    1   10    2    2    2    1    2   10\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    2    1    1    1    1    2    2    2\n [3,]    1    3    1    1    1    1    3    1    1\n [4,]    1    2    4    1    1    1    2    1    1\n [5,]    1    1    5    1    1    1    1    1    1\n [6,]    1    1    3    3    3    2    1    1    3\n [7,]    1    7    7    1    1    1    7    1    7\n [8,]    1    8    1    1    2    1    1    1    1\n [9,]    3    1    1    9    1    1    1    1    3\n[10,]    5    1    2    2    1    2    1    2    1\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    1    2    2    2    2    1    2    2\n [3,]    3    1    1    1    3    3    1    1    3\n [4,]    1    4    1    1    1    1    4    1    4\n [5,]    1    1    5    5    1    1    1    1    1\n [6,]    2    1    1    1    3    1    2    2    6\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    2    2    1    1    1    1    8    8    1\n [9,]    1    9    1    9    1    1    1    3    1\n[10,]    1   10    1    2   10    2    1    2   10\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    2    2    1    1    2    1    1    1\n [3,]    1    3    1    1    3    1    3    1    1\n [4,]    4    1    1    1    4    4    1    1    1\n [5,]    5    1    1    1    1    5    5    1    1\n [6,]    1    6    1    1    6    6    2    1    1\n [7,]    1    1    1    1    7    1    7    1    1\n [8,]    1    1    4    1    8    2    2    2    1\n [9,]    1    3    9    1    1    1    1    1    1\n[10,]    5   10   10    2    2    2   10    2    2\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    2    1    2    1    2    2    2    2\n [3,]    1    3    1    1    3    3    1    3    1\n [4,]    1    2    1    4    1    1    4    4    2\n [5,]    1    1    1    1    1    1    1    1    1\n [6,]    1    6    6    2    6    2    3    1    6\n [7,]    1    1    1    1    1    1    1    1    7\n [8,]    1    1    1    8    4    4    1    1    1\n [9,]    3    1    1    3    1    1    3    1    1\n[10,]    1    1    2    1    2   10    2    1    2\n\nbc.i(x, y, \"^\")\n\n, , 1\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.190000e+02          828 4.120000e+02 4.100000e+02 7.230000e+02\n [2,] 6.502500e+04         1521 9.900250e+05 5.416960e+05 1.927210e+05\n [3,] 8.998912e+06    812166237 6.653386e+08 8.573750e+05 2.064251e+08\n [4,] 2.825761e+06     68574961 6.784652e+09 3.680412e+10 2.188892e+11\n [5,] 7.985267e+14  40074642432 1.340080e+14 1.402969e+13 9.538899e+10\n [6,] 2.963707e+15          Inf 2.140754e+15          Inf 9.584686e+14\n [7,]          Inf 506623120463          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.650000e+02 8.760000e+02 8.440000e+02 8.790000e+02\n [2,] 2.304000e+03 1.713960e+05 5.372890e+05 1.544490e+05\n [3,] 5.177816e+08 2.700000e+07 7.121220e+08 3.593700e+04\n [4,] 3.515213e+10 2.337260e+10 1.121513e+09 8.566217e+10\n [5,] 1.680700e+14 3.101364e+12 1.143138e+12 5.398354e+14\n [6,] 6.775409e+15 1.114642e+15          Inf 8.704641e+14\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 2\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 4.600000e+02 2.220000e+02 5.700000e+01 4.380000e+02 8.490000e+02\n [2,] 9.235210e+05 2.275290e+05 2.570490e+05 3.025000e+05 2.125210e+05\n [3,] 1.061208e+06 7.568697e+07 3.007630e+05 4.511802e+07 2.685619e+06\n [4,] 4.715673e+10 9.490052e+11 1.139474e+11 9.378906e+08 4.569760e+05\n [5,] 6.567581e+12 3.962827e+14 1.692739e+14 1.432678e+14 3.004151e+12\n [6,]          Inf          Inf          Inf 6.400000e+13          Inf\n [7,]          Inf          Inf 1.638400e+04 1.148686e+14          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]        [,7]         [,8]         [,9]\n [1,] 1.240000e+02         926 9.750000e+02 2.830000e+02\n [2,] 2.970250e+05       53824 1.866240e+05 8.410000e+04\n [3,] 1.389918e+08    48627125 1.050346e+07 3.285090e+08\n [4,] 4.543313e+11 72555348321 6.765201e+10 8.822385e+10\n [5,] 3.101364e+12    17210368 6.297634e+11 1.306861e+12\n [6,] 2.872290e+13         Inf          Inf 9.048203e+14\n [7,]          Inf         Inf 1.708594e+15          Inf\n [8,]          Inf         Inf 5.487587e+10          Inf\n [9,]          Inf         Inf          Inf          Inf\n[10,]          Inf         Inf 3.570467e+12          Inf\n\n, , 3\n\n            [,1]         [,2]         [,3]         [,4]         [,5]\n [1,]        338          432 4.870000e+02          861 8.730000e+02\n [2,]     417316       349281 2.371600e+04        69696 5.476000e+03\n [3,]  137388096    426957777 2.149218e+08      6967871 9.183300e+08\n [4,]    7311616 105560010000 1.818246e+11 541937434896 1.121513e+09\n [5,] 4704270176 957186876249 2.596378e+12 141985700000 6.274684e+14\n [6,]        Inf 282429536481          Inf          Inf          Inf\n [7,]        Inf          Inf          Inf          Inf 9.531332e+14\n [8,]        Inf          Inf          Inf          Inf          Inf\n [9,]        Inf          Inf 6.351462e+15          Inf          Inf\n[10,]        Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 4.910000e+02 4.380000e+02 7.610000e+02          378\n [2,] 4.303360e+05 2.560360e+05 5.446440e+05       254016\n [3,] 4.218750e+08 8.573750e+08 7.585505e+08     12812904\n [4,] 6.765201e+10 3.232104e+11 1.244474e+10  39923636481\n [5,] 7.583534e+13 7.317420e+12 2.469500e+14 864866612224\n [6,]          Inf 3.628410e+15 1.491077e+15          Inf\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf 3.778020e+11          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 4\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.950000e+02 6.960000e+02           51 9.340000e+02 4.900000e+01\n [2,] 4.161600e+04 3.534400e+04        63001 3.422500e+04 7.022500e+04\n [3,] 9.240104e+08 3.732480e+08      9800344 9.527639e+08 3.869893e+06\n [4,] 2.088271e+11 1.487190e+11 140283207936 1.851891e+11 2.798293e+10\n [5,] 1.144502e+13 9.161328e+13   3486784401 3.317054e+13 2.418065e+13\n [6,] 3.089158e+14          Inf          Inf          Inf          Inf\n [7,] 6.982606e+14          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf 2.066105e+10          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.790000e+02 5.780000e+02 7.530000e+02 6.130000e+02\n [2,] 8.464000e+03 4.410000e+04 9.350890e+05 7.569000e+03\n [3,] 8.628014e+08 7.880599e+06 1.822843e+08 1.481544e+06\n [4,] 1.517849e+10 1.416468e+09 5.624913e+10 4.837981e+11\n [5,] 2.813900e+14 5.481173e+12 5.012920e+14 1.310301e+14\n [6,]          Inf 2.560963e+14 6.457791e+14          Inf\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf 6.561000e+03          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 5\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 2.760000e+02 3.680000e+02 9.170000e+02 4.700000e+02 6.360000e+02\n [2,] 5.610010e+05 1.936000e+05 6.604900e+04 6.502500e+04 5.372890e+05\n [3,] 9.607191e+07 8.930563e+08 3.626469e+07 3.186120e+08 7.991788e+08\n [4,] 5.176945e+10 3.663687e+11 1.157432e+10 1.585322e+11 2.690420e+10\n [5,] 1.762342e+10 8.240308e+13 1.158562e+13 1.690523e+12 1.706156e+13\n [6,] 5.411082e+15          Inf 6.072366e+14 5.358820e+14          Inf\n [7,]          Inf          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 8.280000e+02 9.600000e+01 9.200000e+02 6.190000e+02\n [2,] 7.378810e+05 1.632160e+05 4.356000e+05 3.794560e+05\n [3,] 5.969477e+08 7.095794e+07 1.757600e+04 8.492781e+08\n [4,] 8.352100e+04 1.874578e+11 4.723002e+11 1.412023e+11\n [5,] 1.934918e+09 9.801594e+14 2.739333e+13 1.370397e+14\n [6,]          Inf          Inf 1.135573e+15 1.291468e+09\n [7,]          Inf          Inf          Inf          Inf\n [8,] 6.457535e+14          Inf 4.702525e+15          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 6\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.110000e+02 4.770000e+02 6.890000e+02 7.350000e+02 6.330000e+02\n [2,] 7.396000e+05 1.988100e+04 1.587600e+04 2.755600e+04 5.241760e+05\n [3,] 5.024599e+08 5.513680e+08 3.241792e+06 1.406080e+05 9.481882e+07\n [4,] 9.116621e+09 6.452413e+10 5.343976e+11 1.814113e+10 5.005467e+10\n [5,] 2.637205e+14 1.011264e+13 2.373047e+14 2.706784e+14 5.798839e+12\n [6,]          Inf          Inf          Inf 1.384129e+10          Inf\n [7,]          Inf          Inf          Inf          Inf 6.873179e+15\n [8,] 1.679616e+06          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.250000e+02 6.190000e+02 8.430000e+02 9.930000e+02\n [2,] 1.742400e+04 8.082010e+05 2.580640e+05 4.900000e+05\n [3,] 7.408800e+04 2.371767e+08 1.618786e+08 2.609171e+08\n [4,] 7.072810e+05 6.452413e+10 4.595407e+10 2.771026e+10\n [5,] 2.189182e+14 7.962624e+06 3.150906e+12 2.264353e+14\n [6,]          Inf          Inf          Inf          Inf\n [7,] 3.142743e+12 5.944673e+14          Inf          Inf\n [8,]          Inf 2.814750e+14          Inf 4.304672e+07\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 7\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 7.980000e+02 9.190000e+02 8.990000e+02 9.110000e+02 7.060000e+02\n [2,] 1.497690e+05 1.299600e+04 1.383840e+05 3.496900e+04 2.611210e+05\n [3,] 9.925285e+07 2.572595e+08 4.287500e+07 5.005662e+08 2.609171e+08\n [4,] 4.096000e+03 9.960060e+11 6.708020e+11 1.736307e+10 1.763194e+11\n [5,] 3.595738e+14 4.064930e+13 2.912290e+13 7.222673e+14 3.093875e+13\n [6,]          Inf          Inf 4.008948e+13 2.216436e+10 1.223059e+10\n [7,]          Inf          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.490000e+02 8.650000e+02 3.110000e+02          429\n [2,] 5.012640e+05 2.528100e+04 5.852250e+05         5041\n [3,] 9.126730e+08 2.314912e+07 1.265060e+08    445943744\n [4,] 1.595395e+11 5.090664e+10 6.818418e+10 282429536481\n [5,] 1.160291e+14 1.160291e+09 8.028324e+12  48261724457\n [6,]          Inf 8.527674e+15 2.313061e+12          Inf\n [7,]          Inf          Inf 8.938717e+08          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 8\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.070000e+02 2.850000e+02 9.900000e+01 2.720000e+02 3.980000e+02\n [2,] 9.254440e+05 6.724000e+03 5.625000e+03 6.561000e+05 9.000000e+00\n [3,] 4.441949e+08 9.261000e+03 1.169708e+07 4.101724e+08 2.160000e+02\n [4,] 5.650364e+11 1.278806e+11 4.814819e+11 7.089226e+10 3.720524e+11\n [5,] 6.138135e+14 6.735345e+14 9.850897e+14 2.724406e+14 3.752832e+14\n [6,]          Inf 2.176782e+15 5.289853e+12          Inf 1.967975e+15\n [7,]          Inf          Inf          Inf 1.144156e+11 6.982606e+14\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,] 2.087284e+14          Inf          Inf          Inf 1.060450e+10\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.320000e+02 4.070000e+02          974 2.420000e+02\n [2,] 1.392400e+04 1.690000e+04       465124 2.822400e+04\n [3,] 5.147885e+07 3.759537e+07    236029032 1.560896e+06\n [4,] 1.026626e+09 3.748096e+10  14003408896 7.072810e+09\n [5,] 2.325964e+14 8.901697e+14 210906087424 2.044829e+14\n [6,] 4.644041e+11          Inf 567869252041 1.156831e+15\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\nbc.i(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.i(x, y, \"&lt;\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"&gt;\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.i(x, y, \"&lt;=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"&gt;=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "href": "man/outer/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.i(x, y, \"+\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  820  829  413  411  724  266  877  845  880\n [2,]  257   41  997  738  441   50  416  735  395\n [3,]  211  936  876   98  594  806  303  896   36\n [4,]   45   95  291  442  688  437  395  187  545\n [5,]  961  137  674  431  162  705  320  263  889\n [6,]  385  713  365  783  320  441  328  492  315\n [7,]  956   54  656  891  480  218  325  638  935\n [8,]  273  977  164  402  217  527  889  341  203\n [9,]  965  567  669  205  166  640  457  579  885\n[10,]  429  593  320  875  794  269 1000  602  703\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  461  223   58  439  850  125  927  976  284\n [2,]  963  479  509  552  463  547  234  434  292\n [3,]  105  426   70  359  142  521  368  222  693\n [4,]  470  991  585  179   30  825  523  514  549\n [5,]  371  836  706  683  318  320   33  234  270\n [6,]  897  677  935  206  581  181  805  797  317\n [7,]  597  261   11  109  230  909  268  157  273\n [8,]  204  475  109  298  356  168  323   30  155\n [9,]  111  565  493  503  583  909  469  196   90\n[10,]  490  634  342  832  867  562  281   28   96\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  339  433  488  862  874  492  439  762  379\n [2,]  648  593  156  266   76  658  508  740  506\n [3,]  519  756  602  194  975  753  953  915  237\n [4,]   56  574  657  862  187  514  758  338  451\n [5,]   91  254  309  175  916  602  379  761  249\n [6,]  779   87  530  548  852  918  398  344  651\n [7,]  853  750  652  768  145  484  739  816  865\n [8,]  471  799  884  427  372  321  932   36  712\n [9,]  957  414   66  279  473  133  289  761  835\n[10,]   54  203  489 1000  928  270  915  262  787\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  896  697   52  935   50  280  579  754  614\n [2,]  206  190  253  187  267   94  212  969   89\n [3,]  977  723  217  987  160  955  202  570  117\n [4,]  680  625  616  660  413  355  198  491  838\n [5,]  414  625   86  511  480  781  358  876  671\n [6,]  266  701  741  609  469  702  258  300  645\n [7,]  139  648  971  496  720  349  742  587  922\n [8,]  535  616  142  157  827  451   11  606  885\n [9,]  570  865  173   23  852  414  543  439  376\n[10,]  800  307  110  346  244  802  693  152  980\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  277  369  918  471  637  829   97  921  620\n [2,]  751  442  259  257  735  861  406  662  618\n [3,]  461  966  334  686  931  845  417   29  950\n [4,]  481  782  332  635  409   21  662  833  617\n [5,]  117  612  415  284  448   77 1001  492  677\n [6,]  425  863  297  291  717  712  911  329   39\n [7,]  305  805  413  302  705  624  805  949  987\n [8,]  793  768  141  967  826   79  945   99  585\n [9,]  870  463  617  801  281  878  997  460  618\n[10,]  315  461  536  458   59  744  191  596  927\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  812  478  690  736  634  726  620  844  994\n [2,]  862  143  128  168  726  134  901  510  702\n [3,]  798  823  151   55  459   45  622  548  642\n [4,]  313  508  859  371  477   33  508  467  412\n [5,]  771  404  755  775  362  743   29  321  748\n [6,]  776  577  883   55  981  757  718  956  900\n [7,]  752  825  758  822  190   68  136  565  990\n [8,]   14  282  521  489  493  481   72  512   17\n [9,]  326  126  281  270  275  263  511  456  463\n[10,]  643  670  931  904  890  182  589  386  410\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  799  920  900  912  707  750  866  312  430\n [2,]  389  116  374  189  513  710  161  767   73\n [3,]  466  639  353  797  642  973  288  505  767\n [4,]   12 1003  909  367  652  636  479  515  733\n [5,]  820  532  498  942  504  655   70  386  142\n [6,]  643  480  191   59   54  510  458  121  605\n [7,]  591  474  800  939  693  285  728   26  317\n [8,]  525  449  468  361  984  510  366  162  539\n [9,]  191  219  180  445  731  178  509  968  227\n[10,]  845  600  850  506  754  274  790  428  166\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  308  286  100  273  399  733  408  975  243\n [2,]  964   84   77  812    5  120  132  684  170\n [3,]  766   24  230  746    9  375  338  621  119\n [4,]  871  602  837  520  785  183  444  348  294\n [5,]  912  929 1002  776  827  752  982  189  733\n [6,]  731  366  138  932  360   94  597   97  330\n [7,]  205  933  264   45  139  874  953  825  287\n [8,]  577  291  425  832  764  772  449  613  975\n [9,]   48  841  614  483   22  952  408  241  887\n[10,]  407  801  448  143  384  840  862  373   72\n\nbc.i(x, y, \"-\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  818  827  411  409  722  264  875  843  878\n [2,]  253   37  993  734  437   46  412  731  391\n [3,]  205  930  870   92  588  800  297  890   30\n [4,]   37   87  283  434  680  429  387  179  537\n [5,]  951  127  664  421  152  695  310  253  879\n [6,]  373  701  353  771  308  429  316  480  303\n [7,]  942   40  642  877  466  204  311  624  921\n [8,]  257  961  148  386  201  511  873  325  187\n [9,]  947  549  651  187  148  622  439  561  867\n[10,]  409  573  300  855  774  249  980  582  683\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  459  221   56  437  848  123  925  974  282\n [2,]  959  475  505  548  459  543  230  430  288\n [3,]   99  420   64  353  136  515  362  216  687\n [4,]  462  983  577  171   22  817  515  506  541\n [5,]  361  826  696  673  308  310   23  224  260\n [6,]  885  665  923  194  569  169  793  785  305\n [7,]  583  247   -3   95  216  895  254  143  259\n [8,]  188  459   93  282  340  152  307   14  139\n [9,]   93  547  475  485  565  891  451  178   72\n[10,]  470  614  322  812  847  542  261    8   76\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  337  431  486  860  872  490  437  760  377\n [2,]  644  589  152  262   72  654  504  736  502\n [3,]  513  750  596  188  969  747  947  909  231\n [4,]   48  566  649  854  179  506  750  330  443\n [5,]   81  244  299  165  906  592  369  751  239\n [6,]  767   75  518  536  840  906  386  332  639\n [7,]  839  736  638  754  131  470  725  802  851\n [8,]  455  783  868  411  356  305  916   20  696\n [9,]  939  396   48  261  455  115  271  743  817\n[10,]   34  183  469  980  908  250  895  242  767\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  894  695   50  933   48  278  577  752  612\n [2,]  202  186  249  183  263   90  208  965   85\n [3,]  971  717  211  981  154  949  196  564  111\n [4,]  672  617  608  652  405  347  190  483  830\n [5,]  404  615   76  501  470  771  348  866  661\n [6,]  254  689  729  597  457  690  246  288  633\n [7,]  125  634  957  482  706  335  728  573  908\n [8,]  519  600  126  141  811  435   -5  590  869\n [9,]  552  847  155    5  834  396  525  421  358\n[10,]  780  287   90  326  224  782  673  132  960\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  275  367  916  469  635  827   95  919  618\n [2,]  747  438  255  253  731  857  402  658  614\n [3,]  455  960  328  680  925  839  411   23  944\n [4,]  473  774  324  627  401   13  654  825  609\n [5,]  107  602  405  274  438   67  991  482  667\n [6,]  413  851  285  279  705  700  899  317   27\n [7,]  291  791  399  288  691  610  791  935  973\n [8,]  777  752  125  951  810   63  929   83  569\n [9,]  852  445  599  783  263  860  979  442  600\n[10,]  295  441  516  438   39  724  171  576  907\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  810  476  688  734  632  724  618  842  992\n [2,]  858  139  124  164  722  130  897  506  698\n [3,]  792  817  145   49  453   39  616  542  636\n [4,]  305  500  851  363  469   25  500  459  404\n [5,]  761  394  745  765  352  733   19  311  738\n [6,]  764  565  871   43  969  745  706  944  888\n [7,]  738  811  744  808  176   54  122  551  976\n [8,]   -2  266  505  473  477  465   56  496    1\n [9,]  308  108  263  252  257  245  493  438  445\n[10,]  623  650  911  884  870  162  569  366  390\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  797  918  898  910  705  748  864  310  428\n [2,]  385  112  370  185  509  706  157  763   69\n [3,]  460  633  347  791  636  967  282  499  761\n [4,]    4  995  901  359  644  628  471  507  725\n [5,]  810  522  488  932  494  645   60  376  132\n [6,]  631  468  179   47   42  498  446  109  593\n [7,]  577  460  786  925  679  271  714   12  303\n [8,]  509  433  452  345  968  494  350  146  523\n [9,]  173  201  162  427  713  160  491  950  209\n[10,]  825  580  830  486  734  254  770  408  146\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  306  284   98  271  397  731  406  973  241\n [2,]  960   80   73  808    1  116  128  680  166\n [3,]  760   18  224  740    3  369  332  615  113\n [4,]  863  594  829  512  777  175  436  340  286\n [5,]  902  919  992  766  817  742  972  179  723\n [6,]  719  354  126  920  348   82  585   85  318\n [7,]  191  919  250   31  125  860  939  811  273\n [8,]  561  275  409  816  748  756  433  597  959\n [9,]   30  823  596  465    4  934  390  223  869\n[10,]  387  781  428  123  364  820  842  353   52\n\nbc.i(x, y, \"*\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  819  828  412  410  723  265  876  844  879\n [2,]  510   78 1990 1472  878   96  828 1466  786\n [3,]  624 2799 2619  285 1773 2409  900 2679   99\n [4,]  164  364 1148 1752 2736 1732 1564  732 2164\n [5,] 4780  660 3345 2130  785 3500 1575 1290 4420\n [6,] 2274 4242 2154 4662 1884 2610 1932 2916 1854\n [7,] 6643  329 4543 6188 3311 1477 2226 4417 6496\n [8,] 2120 7752 1248 3152 1672 4152 7048 2664 1560\n [9,] 8604 5022 5940 1764 1413 5679 4032 5130 7884\n[10,] 4190 5830 3100 8650 7840 2590 9900 5920 6930\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  460  222   57  438  849  124  926  975  283\n [2,] 1922  954 1014 1100  922 1090  464  864  580\n [3,]  306 1269  201 1068  417 1554 1095  657 2070\n [4,] 1864 3948 2324  700  104 3284 2076 2040 2180\n [5,] 1830 4155 3505 3390 1565 1575  140 1145 1325\n [6,] 5346 4026 5574 1200 3450 1050 4794 4746 1866\n [7,] 4130 1778   28  714 1561 6314 1827 1050 1862\n [8,] 1568 3736  808 2320 2784 1280 2520  176 1176\n [9,]  918 5004 4356 4446 5166 8100 4140 1683  729\n[10,] 4800 6240 3320 8220 8570 5520 2710  180  860\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  338  432  487  861  873  491  438  761  378\n [2,] 1292 1182  308  528  148 1312 1012 1476 1008\n [3,] 1548 2259 1797  573 2916 2250 2850 2736  702\n [4,]  208 2280 2612 3432  732 2040 3016 1336 1788\n [5,]  430 1245 1520  850 4555 2985 1870 3780 1220\n [6,] 4638  486 3144 3252 5076 5472 2352 2028 3870\n [7,] 5922 5201 4515 5327  966 3339 5124 5663 6006\n [8,] 3704 6328 7008 3352 2912 2504 7392  224 5632\n [9,] 8532 3645  513 2430 4176 1116 2520 6768 7434\n[10,]  440 1930 4790 9900 9180 2600 9050 2520 7770\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  895  696   51  934   49  279  578  753  613\n [2,]  408  376  502  370  530  184  420 1934  174\n [3,] 2922 2160  642 2952  471 2856  597 1701  342\n [4,] 2704 2484 2448 2624 1636 1404  776 1948 3336\n [5,] 2045 3100  405 2530 2375 3880 1765 4355 3330\n [6,] 1560 4170 4410 3618 2778 4176 1512 1764 3834\n [7,]  924 4487 6748 3423 4991 2394 5145 4060 6405\n [8,] 4216 4864 1072 1192 6552 3544   24 4784 7016\n [9,] 5049 7704 1476  126 7587 3645 4806 3870 3303\n[10,] 7900 2970 1000 3360 2340 7920 6830 1420 9700\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  276  368  917  470  636  828   96  920  619\n [2,] 1498  880  514  510 1466 1718  808 1320 1232\n [3,] 1374 2889  993 2049 2784 2526 1242   78 2841\n [4,] 1908 3112 1312 2524 1620   68 2632 3316 2452\n [5,]  560 3035 2050 1395 2215  360 4980 2435 3360\n [6,] 2514 5142 1746 1710 4266 4236 5430 1938  198\n [7,] 2086 5586 2842 2065 4886 4319 5586 6594 6860\n [8,] 6280 6080 1064 7672 6544  568 7496  728 4616\n [9,] 7749 4086 5472 7128 2448 7821 8892 4059 5481\n[10,] 3050 4510 5260 4480  490 7340 1810 5860 9170\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  811  477  689  735  633  725  619  843  993\n [2,] 1720  282  252  332 1448  264 1798 1016 1400\n [3,] 2385 2460  444  156 1368  126 1857 1635 1917\n [4,] 1236 2016 3420 1468 1892  116 2016 1852 1632\n [5,] 3830 1995 3750 3850 1785 3690  120 1580 3715\n [6,] 4620 3426 5262  294 5850 4506 4272 5700 5364\n [7,] 5215 5726 5257 5705 1281  427  903 3906 6881\n [8,]   48 2192 4104 3848 3880 3784  512 4032   72\n [9,] 2853 1053 2448 2349 2394 2286 4518 4023 4086\n[10,] 6330 6600 9210 8940 8800 1720 5790 3760 4000\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  798  919  899  911  706  749  865  311  429\n [2,]  774  228  744  374 1022 1416  318 1530  142\n [3,] 1389 1908 1050 2382 1917 2910  855 1506 2292\n [4,]   32 3996 3620 1452 2592 2528 1900 2044 2916\n [5,] 4075 2635 2465 4685 2495 3250  325 1905  685\n [6,] 3822 2844 1110  318  288 3024 2712  690 3594\n [7,] 4088 3269 5551 6524 4802 1946 5047  133 2170\n [8,] 4136 3528 3680 2824 7808 4016 2864 1232 4248\n [9,] 1638 1890 1539 3924 6498 1521 4500 8631 1962\n[10,] 8350 5900 8400 4960 7440 2640 7800 4180 1560\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  307  285   99  272  398  732  407  974  242\n [2,] 1924  164  150 1620    6  236  260 1364  336\n [3,] 2289   63  681 2229   18 1116 1005 1854  348\n [4,] 3468 2392 3332 2064 3124  716 1760 1376 1160\n [5,] 4535 4620 4985 3855 4110 3735 4885  920 3640\n [6,] 4350 2160  792 5556 2124  528 3546  546 1944\n [7,] 1386 6482 1799  266  924 6069 6622 5726 1960\n [8,] 4552 2264 3336 6592 6048 6112 3528 4840 7736\n [9,]  351 7488 5445 4266  117 8487 3591 2088 7902\n[10,] 3970 7910 4380 1330 3740 8300 8520 3630  620\n\nbc.i(x, y, \"gcd\") # greatest common divisor\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    1    1    2    1    2    2    1    1\n [3,]    1    3    3    1    3    1    3    1    3\n [4,]    1    1    1    2    4    1    1    1    1\n [5,]    1    1    1    1    1    5    5    1    1\n [6,]    1    1    1    3    2    3    2    6    3\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    1    1    4    2    1    1    1    1    1\n [9,]    1    9    3    1    1    1    1    3    3\n[10,]    1    1   10    5    2    1   10    2    1\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    1    1    2    1    1    2    2    2\n [3,]    3    3    1    1    1    1    1    3    3\n [4,]    2    1    1    1    2    1    1    2    1\n [5,]    1    1    1    1    1    5    1    1    5\n [6,]    3    1    1    2    1    1    1    1    1\n [7,]    1    1    1    1    1    1    1    1    7\n [8,]    4    1    1    2    4    8    1    2    1\n [9,]    3    1    1    1    1    9    1    1    9\n[10,]   10    2    2    2    1    2    1    2    2\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    1    2    2    2    2    2    2    2\n [3,]    3    3    1    1    3    3    1    3    3\n [4,]    4    2    1    2    1    2    2    2    1\n [5,]    1    1    1    5    1    1    1    1    1\n [6,]    1    3    2    2    6    6    2    2    3\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    1    1    4    1    4    1    4    4    8\n [9,]    3    9    3    9    1    1    1    1    1\n[10,]    2    1    1   10    2   10    5    2    1\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    2    1    1    1    2    2    1    1\n [3,]    1    3    1    3    1    1    1    3    3\n [4,]    4    1    4    4    1    1    2    1    2\n [5,]    1    5    1    1    5    1    1    1    1\n [6,]    2    1    3    3    1    6    6    6    3\n [7,]    1    1    1    1    1    1    7    1    1\n [8,]    1    8    2    1    1    1    1    2    1\n [9,]    3    1    1    1    3    9    3    1    1\n[10,]   10    1   10    2    2    2    1    2   10\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    2    1    1    1    1    2    2    2\n [3,]    1    3    1    1    1    1    3    1    1\n [4,]    1    2    4    1    1    1    2    1    1\n [5,]    1    1    5    1    1    1    1    1    1\n [6,]    1    1    3    3    3    2    1    1    3\n [7,]    1    7    7    1    1    1    7    1    7\n [8,]    1    8    1    1    2    1    1    1    1\n [9,]    3    1    1    9    1    1    1    1    3\n[10,]    5    1    2    2    1    2    1    2    1\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    1    2    2    2    2    1    2    2\n [3,]    3    1    1    1    3    3    1    1    3\n [4,]    1    4    1    1    1    1    4    1    4\n [5,]    1    1    5    5    1    1    1    1    1\n [6,]    2    1    1    1    3    1    2    2    6\n [7,]    1    1    1    1    1    1    1    1    1\n [8,]    2    2    1    1    1    1    8    8    1\n [9,]    1    9    1    9    1    1    1    3    1\n[10,]    1   10    1    2   10    2    1    2   10\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    1    2    2    1    1    2    1    1    1\n [3,]    1    3    1    1    3    1    3    1    1\n [4,]    4    1    1    1    4    4    1    1    1\n [5,]    5    1    1    1    1    5    5    1    1\n [6,]    1    6    1    1    6    6    2    1    1\n [7,]    1    1    1    1    7    1    7    1    1\n [8,]    1    1    4    1    8    2    2    2    1\n [9,]    1    3    9    1    1    1    1    1    1\n[10,]    5   10   10    2    2    2   10    2    2\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]    1    1    1    1    1    1    1    1    1\n [2,]    2    2    1    2    1    2    2    2    2\n [3,]    1    3    1    1    3    3    1    3    1\n [4,]    1    2    1    4    1    1    4    4    2\n [5,]    1    1    1    1    1    1    1    1    1\n [6,]    1    6    6    2    6    2    3    1    6\n [7,]    1    1    1    1    1    1    1    1    7\n [8,]    1    1    1    8    4    4    1    1    1\n [9,]    3    1    1    3    1    1    3    1    1\n[10,]    1    1    2    1    2   10    2    1    2\n\nbc.i(x, y, \"^\")\n\n, , 1\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.190000e+02          828 4.120000e+02 4.100000e+02 7.230000e+02\n [2,] 6.502500e+04         1521 9.900250e+05 5.416960e+05 1.927210e+05\n [3,] 8.998912e+06    812166237 6.653386e+08 8.573750e+05 2.064251e+08\n [4,] 2.825761e+06     68574961 6.784652e+09 3.680412e+10 2.188892e+11\n [5,] 7.985267e+14  40074642432 1.340080e+14 1.402969e+13 9.538899e+10\n [6,] 2.963707e+15          Inf 2.140754e+15          Inf 9.584686e+14\n [7,]          Inf 506623120463          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.650000e+02 8.760000e+02 8.440000e+02 8.790000e+02\n [2,] 2.304000e+03 1.713960e+05 5.372890e+05 1.544490e+05\n [3,] 5.177816e+08 2.700000e+07 7.121220e+08 3.593700e+04\n [4,] 3.515213e+10 2.337260e+10 1.121513e+09 8.566217e+10\n [5,] 1.680700e+14 3.101364e+12 1.143138e+12 5.398354e+14\n [6,] 6.775409e+15 1.114642e+15          Inf 8.704641e+14\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 2\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 4.600000e+02 2.220000e+02 5.700000e+01 4.380000e+02 8.490000e+02\n [2,] 9.235210e+05 2.275290e+05 2.570490e+05 3.025000e+05 2.125210e+05\n [3,] 1.061208e+06 7.568697e+07 3.007630e+05 4.511802e+07 2.685619e+06\n [4,] 4.715673e+10 9.490052e+11 1.139474e+11 9.378906e+08 4.569760e+05\n [5,] 6.567581e+12 3.962827e+14 1.692739e+14 1.432678e+14 3.004151e+12\n [6,]          Inf          Inf          Inf 6.400000e+13          Inf\n [7,]          Inf          Inf 1.638400e+04 1.148686e+14          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]        [,7]         [,8]         [,9]\n [1,] 1.240000e+02         926 9.750000e+02 2.830000e+02\n [2,] 2.970250e+05       53824 1.866240e+05 8.410000e+04\n [3,] 1.389918e+08    48627125 1.050346e+07 3.285090e+08\n [4,] 4.543313e+11 72555348321 6.765201e+10 8.822385e+10\n [5,] 3.101364e+12    17210368 6.297634e+11 1.306861e+12\n [6,] 2.872290e+13         Inf          Inf 9.048203e+14\n [7,]          Inf         Inf 1.708594e+15          Inf\n [8,]          Inf         Inf 5.487587e+10          Inf\n [9,]          Inf         Inf          Inf          Inf\n[10,]          Inf         Inf 3.570467e+12          Inf\n\n, , 3\n\n            [,1]         [,2]         [,3]         [,4]         [,5]\n [1,]        338          432 4.870000e+02          861 8.730000e+02\n [2,]     417316       349281 2.371600e+04        69696 5.476000e+03\n [3,]  137388096    426957777 2.149218e+08      6967871 9.183300e+08\n [4,]    7311616 105560010000 1.818246e+11 541937434896 1.121513e+09\n [5,] 4704270176 957186876249 2.596378e+12 141985700000 6.274684e+14\n [6,]        Inf 282429536481          Inf          Inf          Inf\n [7,]        Inf          Inf          Inf          Inf 9.531332e+14\n [8,]        Inf          Inf          Inf          Inf          Inf\n [9,]        Inf          Inf 6.351462e+15          Inf          Inf\n[10,]        Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 4.910000e+02 4.380000e+02 7.610000e+02          378\n [2,] 4.303360e+05 2.560360e+05 5.446440e+05       254016\n [3,] 4.218750e+08 8.573750e+08 7.585505e+08     12812904\n [4,] 6.765201e+10 3.232104e+11 1.244474e+10  39923636481\n [5,] 7.583534e+13 7.317420e+12 2.469500e+14 864866612224\n [6,]          Inf 3.628410e+15 1.491077e+15          Inf\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf 3.778020e+11          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 4\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.950000e+02 6.960000e+02           51 9.340000e+02 4.900000e+01\n [2,] 4.161600e+04 3.534400e+04        63001 3.422500e+04 7.022500e+04\n [3,] 9.240104e+08 3.732480e+08      9800344 9.527639e+08 3.869893e+06\n [4,] 2.088271e+11 1.487190e+11 140283207936 1.851891e+11 2.798293e+10\n [5,] 1.144502e+13 9.161328e+13   3486784401 3.317054e+13 2.418065e+13\n [6,] 3.089158e+14          Inf          Inf          Inf          Inf\n [7,] 6.982606e+14          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf 2.066105e+10          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.790000e+02 5.780000e+02 7.530000e+02 6.130000e+02\n [2,] 8.464000e+03 4.410000e+04 9.350890e+05 7.569000e+03\n [3,] 8.628014e+08 7.880599e+06 1.822843e+08 1.481544e+06\n [4,] 1.517849e+10 1.416468e+09 5.624913e+10 4.837981e+11\n [5,] 2.813900e+14 5.481173e+12 5.012920e+14 1.310301e+14\n [6,]          Inf 2.560963e+14 6.457791e+14          Inf\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf 6.561000e+03          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 5\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 2.760000e+02 3.680000e+02 9.170000e+02 4.700000e+02 6.360000e+02\n [2,] 5.610010e+05 1.936000e+05 6.604900e+04 6.502500e+04 5.372890e+05\n [3,] 9.607191e+07 8.930563e+08 3.626469e+07 3.186120e+08 7.991788e+08\n [4,] 5.176945e+10 3.663687e+11 1.157432e+10 1.585322e+11 2.690420e+10\n [5,] 1.762342e+10 8.240308e+13 1.158562e+13 1.690523e+12 1.706156e+13\n [6,] 5.411082e+15          Inf 6.072366e+14 5.358820e+14          Inf\n [7,]          Inf          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 8.280000e+02 9.600000e+01 9.200000e+02 6.190000e+02\n [2,] 7.378810e+05 1.632160e+05 4.356000e+05 3.794560e+05\n [3,] 5.969477e+08 7.095794e+07 1.757600e+04 8.492781e+08\n [4,] 8.352100e+04 1.874578e+11 4.723002e+11 1.412023e+11\n [5,] 1.934918e+09 9.801594e+14 2.739333e+13 1.370397e+14\n [6,]          Inf          Inf 1.135573e+15 1.291468e+09\n [7,]          Inf          Inf          Inf          Inf\n [8,] 6.457535e+14          Inf 4.702525e+15          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 6\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.110000e+02 4.770000e+02 6.890000e+02 7.350000e+02 6.330000e+02\n [2,] 7.396000e+05 1.988100e+04 1.587600e+04 2.755600e+04 5.241760e+05\n [3,] 5.024599e+08 5.513680e+08 3.241792e+06 1.406080e+05 9.481882e+07\n [4,] 9.116621e+09 6.452413e+10 5.343976e+11 1.814113e+10 5.005467e+10\n [5,] 2.637205e+14 1.011264e+13 2.373047e+14 2.706784e+14 5.798839e+12\n [6,]          Inf          Inf          Inf 1.384129e+10          Inf\n [7,]          Inf          Inf          Inf          Inf 6.873179e+15\n [8,] 1.679616e+06          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.250000e+02 6.190000e+02 8.430000e+02 9.930000e+02\n [2,] 1.742400e+04 8.082010e+05 2.580640e+05 4.900000e+05\n [3,] 7.408800e+04 2.371767e+08 1.618786e+08 2.609171e+08\n [4,] 7.072810e+05 6.452413e+10 4.595407e+10 2.771026e+10\n [5,] 2.189182e+14 7.962624e+06 3.150906e+12 2.264353e+14\n [6,]          Inf          Inf          Inf          Inf\n [7,] 3.142743e+12 5.944673e+14          Inf          Inf\n [8,]          Inf 2.814750e+14          Inf 4.304672e+07\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 7\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 7.980000e+02 9.190000e+02 8.990000e+02 9.110000e+02 7.060000e+02\n [2,] 1.497690e+05 1.299600e+04 1.383840e+05 3.496900e+04 2.611210e+05\n [3,] 9.925285e+07 2.572595e+08 4.287500e+07 5.005662e+08 2.609171e+08\n [4,] 4.096000e+03 9.960060e+11 6.708020e+11 1.736307e+10 1.763194e+11\n [5,] 3.595738e+14 4.064930e+13 2.912290e+13 7.222673e+14 3.093875e+13\n [6,]          Inf          Inf 4.008948e+13 2.216436e+10 1.223059e+10\n [7,]          Inf          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.490000e+02 8.650000e+02 3.110000e+02          429\n [2,] 5.012640e+05 2.528100e+04 5.852250e+05         5041\n [3,] 9.126730e+08 2.314912e+07 1.265060e+08    445943744\n [4,] 1.595395e+11 5.090664e+10 6.818418e+10 282429536481\n [5,] 1.160291e+14 1.160291e+09 8.028324e+12  48261724457\n [6,]          Inf 8.527674e+15 2.313061e+12          Inf\n [7,]          Inf          Inf 8.938717e+08          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\n, , 8\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.070000e+02 2.850000e+02 9.900000e+01 2.720000e+02 3.980000e+02\n [2,] 9.254440e+05 6.724000e+03 5.625000e+03 6.561000e+05 9.000000e+00\n [3,] 4.441949e+08 9.261000e+03 1.169708e+07 4.101724e+08 2.160000e+02\n [4,] 5.650364e+11 1.278806e+11 4.814819e+11 7.089226e+10 3.720524e+11\n [5,] 6.138135e+14 6.735345e+14 9.850897e+14 2.724406e+14 3.752832e+14\n [6,]          Inf 2.176782e+15 5.289853e+12          Inf 1.967975e+15\n [7,]          Inf          Inf          Inf 1.144156e+11 6.982606e+14\n [8,]          Inf          Inf          Inf          Inf          Inf\n [9,] 2.087284e+14          Inf          Inf          Inf 1.060450e+10\n[10,]          Inf          Inf          Inf          Inf          Inf\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.320000e+02 4.070000e+02          974 2.420000e+02\n [2,] 1.392400e+04 1.690000e+04       465124 2.822400e+04\n [3,] 5.147885e+07 3.759537e+07    236029032 1.560896e+06\n [4,] 1.026626e+09 3.748096e+10  14003408896 7.072810e+09\n [5,] 2.325964e+14 8.901697e+14 210906087424 2.044829e+14\n [6,] 4.644041e+11          Inf 567869252041 1.156831e+15\n [7,]          Inf          Inf          Inf          Inf\n [8,]          Inf          Inf          Inf          Inf\n [9,]          Inf          Inf          Inf          Inf\n[10,]          Inf          Inf          Inf          Inf\n\nbc.i(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.i(x, y, \"&lt;\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"&gt;\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.i(x, y, \"&lt;=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.i(x, y, \"&gt;=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6]  [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE  TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] FALSE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]  TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.cplx.html",
    "href": "man/outer/bc.cplx.html",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(10,1,1))\n\nbc.cplx(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\nbc.cplx(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n\n, , 1\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 2\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 3\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 4\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 5\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 6\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 7\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 8\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n\n [1]    NA    NA    NA FALSE FALSE    NA    NA FALSE    NA FALSE    NA    NA\n[13]    NA    NA    NA    NA    NA    NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n\n [1]   NA TRUE   NA   NA   NA TRUE   NA   NA TRUE   NA   NA   NA   NA   NA   NA\n[16]   NA TRUE   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n\n                           x                      y                 out\n [1,] -1.2086499+0.54284080i        Inf-2.90955206i -Inf+Infi -Inf+Infi\n [2,]        NaN-       Infi                     NA  NaN+NaNi        NA\n [3,]  1.0730228-0.06704865i        NaN+       NaNi  NaN+NaNi        NA\n [4,]                     NA  1.2159473+0.78733871i        NA        NA\n [5,]                     NA        NaN+       Infi -Inf+NaNi        NA\n [6,]  0.7105323+1.42356592i                     NA        NA        NA\n [7,]                     NA -1.4847499+0.40709863i        NA        NA\n [8,]        NaN+       NaNi  0.1416762-1.55603378i  NaN+NaNi        NA\n [9,]                     NA        NaN+       NaNi  NaN+NaNi        NA\n[10,] -0.1399463+0.57850931i                     NA        NA        NA\n[11,]        NaN+0.56309973i       -Inf+0.85872364i  NaN-Infi        NA\n[12,] -1.2505976+0.02426459i       -Inf-1.34705475i  Inf-Infi  Inf-Infi\n[13,]        NaN-       Infi        NaN-       Infi -Inf+NaNi        NA\n[14,]        Inf+0.94729350i -0.1676375-1.33519524i -Inf-Infi -Inf-Infi\n[15,]        NaN+       NaNi  1.2668081-0.01150671i  NaN+NaNi        NA\n[16,]        NaN-1.78089237i        NaN+0.12212965i  NaN+NaNi        NA\n[17,]  0.5453288+0.15589387i        NaN-       Infi  Inf-Infi        NA\n[18,]        NaN+       Infi        NaN+       Infi -Inf+NaNi        NA"
  },
  {
    "objectID": "man/outer/bc.cplx.html#broadcasted-complex-numeric-operations",
    "href": "man/outer/bc.cplx.html#broadcasted-complex-numeric-operations",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(10,1,1))\n\nbc.cplx(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE    NA    NA FALSE    NA    NA FALSE FALSE\n [2,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [3,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [4,]    NA FALSE FALSE    NA FALSE    NA FALSE    NA    NA\n [5,] FALSE    NA    NA FALSE FALSE FALSE FALSE    NA    NA\n [6,] FALSE    NA FALSE    NA FALSE    NA    NA    NA FALSE\n [7,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n [8,] FALSE    NA FALSE    NA    NA    NA FALSE FALSE    NA\n [9,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n[10,]    NA    NA    NA    NA    NA    NA    NA    NA    NA\n\nbc.cplx(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE   NA   NA TRUE   NA   NA TRUE TRUE\n [2,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [3,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [4,]   NA TRUE TRUE   NA TRUE   NA TRUE   NA   NA\n [5,] TRUE   NA   NA TRUE TRUE TRUE TRUE   NA   NA\n [6,] TRUE   NA TRUE   NA TRUE   NA   NA   NA TRUE\n [7,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n [8,] TRUE   NA TRUE   NA   NA   NA TRUE TRUE   NA\n [9,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n[10,]   NA   NA   NA   NA   NA   NA   NA   NA   NA\n\nbc.cplx(x, y, \"+\")\n\n, , 1\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 2\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 3\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 4\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 5\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 6\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 7\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\n, , 8\n\n                      [,1]                 [,2]                 [,3]\n [1,]       Inf-0.6664202i 1.072912+1.51456499i                   NA\n [2,]                   NA                   NA                   NA\n [3,]                   NA                   NA                   NA\n [4,]                   NA      NaN+0.00858912i       Inf+1.6643902i\n [5,]      -Inf-0.1183014i                   NA                   NA\n [6,]       Inf+0.6480531i                   NA       Inf-2.1992892i\n [7,]                   NA                   NA                   NA\n [8,] -0.870398-2.6055882i                   NA -1.599856-0.9486314i\n [9,]                   NA                   NA                   NA\n[10,]                   NA                   NA                   NA\n                [,4]                 [,5]          [,6]            [,7]\n [1,]             NA -1.048498+1.2161732i            NA              NA\n [2,]             NA                   NA            NA              NA\n [3,]             NA                   NA            NA              NA\n [4,]             NA       Inf-1.1829521i            NA  Inf+0.4740047i\n [5,] -Inf-1.367779i      -Inf+0.5149185i NaN-2.000895i -Inf+0.1800904i\n [6,]             NA       Inf-0.5423324i            NA              NA\n [7,]             NA                   NA            NA              NA\n [8,]             NA                   NA            NA -Inf-1.4140469i\n [9,]             NA                   NA            NA              NA\n[10,]             NA                   NA            NA              NA\n                      [,8]                 [,9]\n [1,] 0.9644261-0.0333046i -0.3816206+1.849393i\n [2,]                   NA                   NA\n [3,]                   NA                   NA\n [4,]                   NA                   NA\n [5,]                   NA                   NA\n [6,]                   NA        NaN-1.007748i\n [7,]                   NA                   NA\n [8,] 0.6218089+0.2417541i                   NA\n [9,]                   NA                   NA\n[10,]                   NA                   NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n\n [1]    NA    NA    NA FALSE FALSE    NA    NA FALSE    NA FALSE    NA    NA\n[13]    NA    NA    NA    NA    NA    NA\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n\n [1]   NA TRUE   NA   NA   NA TRUE   NA   NA TRUE   NA   NA   NA   NA   NA   NA\n[16]   NA TRUE   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n\n                           x                      y                 out\n [1,] -1.2086499+0.54284080i        Inf-2.90955206i -Inf+Infi -Inf+Infi\n [2,]        NaN-       Infi                     NA  NaN+NaNi        NA\n [3,]  1.0730228-0.06704865i        NaN+       NaNi  NaN+NaNi        NA\n [4,]                     NA  1.2159473+0.78733871i        NA        NA\n [5,]                     NA        NaN+       Infi -Inf+NaNi        NA\n [6,]  0.7105323+1.42356592i                     NA        NA        NA\n [7,]                     NA -1.4847499+0.40709863i        NA        NA\n [8,]        NaN+       NaNi  0.1416762-1.55603378i  NaN+NaNi        NA\n [9,]                     NA        NaN+       NaNi  NaN+NaNi        NA\n[10,] -0.1399463+0.57850931i                     NA        NA        NA\n[11,]        NaN+0.56309973i       -Inf+0.85872364i  NaN-Infi        NA\n[12,] -1.2505976+0.02426459i       -Inf-1.34705475i  Inf-Infi  Inf-Infi\n[13,]        NaN-       Infi        NaN-       Infi -Inf+NaNi        NA\n[14,]        Inf+0.94729350i -0.1676375-1.33519524i -Inf-Infi -Inf-Infi\n[15,]        NaN+       NaNi  1.2668081-0.01150671i  NaN+NaNi        NA\n[16,]        NaN-1.78089237i        NaN+0.12212965i  NaN+NaNi        NA\n[17,]  0.5453288+0.15589387i        NaN-       Infi  Inf-Infi        NA\n[18,]        NaN+       Infi        NaN+       Infi -Inf+NaNi        NA"
  },
  {
    "objectID": "man/other/typecast.html",
    "href": "man/other/typecast.html",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n\n    January February March April  May\nJan    TRUE     TRUE FALSE  TRUE TRUE\nFeb    TRUE     TRUE  TRUE  TRUE TRUE\nMar    TRUE     TRUE  TRUE  TRUE TRUE\nApr    TRUE     TRUE  TRUE  TRUE TRUE\nMay    TRUE     TRUE  TRUE  TRUE TRUE\nJun    TRUE     TRUE  TRUE  TRUE TRUE\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_int(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_dbl(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_chr(x)\n\n    January February March April May \nJan \"6\"     \"21\"     \"0\"   \"16\"  \"24\"\nFeb \"18\"    \"13\"     \"8\"   \"10\"  \"12\"\nMar \"23\"    \"22\"     \"17\"  \"3\"   \"28\"\nApr \"7\"     \"5\"      \"26\"  \"2\"   \"14\"\nMay \"27\"    \"19\"     \"1\"   \"9\"   \"15\"\nJun \"11\"    \"20\"     \"25\"  \"4\"   \"-1\"\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_cplx(x)\n\n    January February March April   May\nJan    6+0i    21+0i  0+0i 16+0i 24+0i\nFeb   18+0i    13+0i  8+0i 10+0i 12+0i\nMar   23+0i    22+0i 17+0i  3+0i 28+0i\nApr    7+0i     5+0i 26+0i  2+0i 14+0i\nMay   27+0i    19+0i  1+0i  9+0i 15+0i\nJun   11+0i    20+0i 25+0i  4+0i -1+0i\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_raw(x)\n\n    January February March April May\nJan      06       15    00    10  18\nFeb      12       0d    08    0a  0c\nMar      17       16    11    03  1c\nApr      07       05    1a    02  0e\nMay      1b       13    01    09  0f\nJun      0b       14    19    04  00\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n\n  January  February     March     April       May      June      July    August \n      Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \nSeptember   October  November  December \n      Sep       Oct       Nov       Dec \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n\n  January  February     March     April       May      June      July    August \n    FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \nSeptember   October  November  December \n     TRUE      TRUE      TRUE      TRUE \n\nas_int(x)\n\n  January  February     March     April       May      June      July    August \n        1         2         3         4         5         6         7         8 \nSeptember   October  November  December \n        9        10        11        12 \n\nas_dbl(x)\n\n  January  February     March     April       May      June      July    August \n        1         2         3         4         5         6         7         8 \nSeptember   October  November  December \n        9        10        11        12 \n\nas_chr(x)\n\n  January  February     March     April       May      June      July    August \n    \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \nSeptember   October  November  December \n    \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\" \n\nas_cplx(x)\n\n  January  February     March     April       May      June      July    August \n 1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\nSeptember   October  November  December \n 9+0i 10+0i 11+0i 12+0i\n\nas_raw(x)\n\n  January  February     March     April       May      June      July    August \n       01        02        03        04        05        06        07        08 \nSeptember   October  November  December \n       09        0a        0b        0c"
  },
  {
    "objectID": "man/other/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "href": "man/other/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n\n    January February March April  May\nJan    TRUE     TRUE FALSE  TRUE TRUE\nFeb    TRUE     TRUE  TRUE  TRUE TRUE\nMar    TRUE     TRUE  TRUE  TRUE TRUE\nApr    TRUE     TRUE  TRUE  TRUE TRUE\nMay    TRUE     TRUE  TRUE  TRUE TRUE\nJun    TRUE     TRUE  TRUE  TRUE TRUE\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_int(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_dbl(x)\n\n    January February March April May\nJan       6       21     0    16  24\nFeb      18       13     8    10  12\nMar      23       22    17     3  28\nApr       7        5    26     2  14\nMay      27       19     1     9  15\nJun      11       20    25     4  -1\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_chr(x)\n\n    January February March April May \nJan \"6\"     \"21\"     \"0\"   \"16\"  \"24\"\nFeb \"18\"    \"13\"     \"8\"   \"10\"  \"12\"\nMar \"23\"    \"22\"     \"17\"  \"3\"   \"28\"\nApr \"7\"     \"5\"      \"26\"  \"2\"   \"14\"\nMay \"27\"    \"19\"     \"1\"   \"9\"   \"15\"\nJun \"11\"    \"20\"     \"25\"  \"4\"   \"-1\"\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_cplx(x)\n\n    January February March April   May\nJan    6+0i    21+0i  0+0i 16+0i 24+0i\nFeb   18+0i    13+0i  8+0i 10+0i 12+0i\nMar   23+0i    22+0i 17+0i  3+0i 28+0i\nApr    7+0i     5+0i 26+0i  2+0i 14+0i\nMay   27+0i    19+0i  1+0i  9+0i 15+0i\nJun   11+0i    20+0i 25+0i  4+0i -1+0i\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_raw(x)\n\n    January February March April May\nJan      06       15    00    10  18\nFeb      12       0d    08    0a  0c\nMar      17       16    11    03  1c\nApr      07       05    1a    02  0e\nMay      1b       13    01    09  0f\nJun      0b       14    19    04  00\nattr(,\"names\")\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n\n  January  February     March     April       May      June      July    August \n      Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \nSeptember   October  November  December \n      Sep       Oct       Nov       Dec \nLevels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n\n  January  February     March     April       May      June      July    August \n    FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \nSeptember   October  November  December \n     TRUE      TRUE      TRUE      TRUE \n\nas_int(x)\n\n  January  February     March     April       May      June      July    August \n        1         2         3         4         5         6         7         8 \nSeptember   October  November  December \n        9        10        11        12 \n\nas_dbl(x)\n\n  January  February     March     April       May      June      July    August \n        1         2         3         4         5         6         7         8 \nSeptember   October  November  December \n        9        10        11        12 \n\nas_chr(x)\n\n  January  February     March     April       May      June      July    August \n    \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \nSeptember   October  November  December \n    \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\" \n\nas_cplx(x)\n\n  January  February     March     April       May      June      July    August \n 1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\nSeptember   October  November  December \n 9+0i 10+0i 11+0i 12+0i\n\nas_raw(x)\n\n  January  February     March     April       May      June      July    August \n       01        02        03        04        05        06        07        08 \nSeptember   October  November  December \n       09        0a        0b        0c"
  },
  {
    "objectID": "man/other/bc_dim.html",
    "href": "man/other/bc_dim.html",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n\n[1] TRUE TRUE TRUE\n\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n\n[1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/other/bc_dim.html#predict-broadcasted-dimensions",
    "href": "man/other/bc_dim.html#predict-broadcasted-dimensions",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n\n[1] TRUE TRUE TRUE\n\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n\n[1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/generic/bc_ifelse.html",
    "href": "man/generic/bc_ifelse.html",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n\n, , 1\n\n      [,1]         [,2]        \n [1,] character,12 character,12\n [2,] character,12 character,12\n [3,] character,12 character,12\n [4,] character,26 character,26\n [5,] character,12 character,12\n [6,] character,12 character,12\n [7,] character,12 character,12\n [8,] character,12 character,12\n [9,] character,26 character,26\n[10,] character,12 character,12\n\n, , 2\n\n      [,1]         [,2]        \n [1,] character,12 character,12\n [2,] character,12 character,12\n [3,] character,12 character,12\n [4,] character,26 character,26\n [5,] character,12 character,12\n [6,] character,12 character,12\n [7,] character,12 character,12\n [8,] character,12 character,12\n [9,] character,26 character,26\n[10,] character,12 character,12"
  },
  {
    "objectID": "man/generic/bc_ifelse.html#broadcasted-ifelse",
    "href": "man/generic/bc_ifelse.html#broadcasted-ifelse",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n\n, , 1\n\n      [,1]         [,2]        \n [1,] character,12 character,12\n [2,] character,12 character,12\n [3,] character,12 character,12\n [4,] character,26 character,26\n [5,] character,12 character,12\n [6,] character,12 character,12\n [7,] character,12 character,12\n [8,] character,12 character,12\n [9,] character,26 character,26\n[10,] character,12 character,12\n\n, , 2\n\n      [,1]         [,2]        \n [1,] character,12 character,12\n [2,] character,12 character,12\n [3,] character,12 character,12\n [4,] character,26 character,26\n [5,] character,12 character,12\n [6,] character,12 character,12\n [7,] character,12 character,12\n [8,] character,12 character,12\n [9,] character,26 character,26\n[10,] character,12 character,12"
  },
  {
    "objectID": "man/bind/bind.html",
    "href": "man/bind/bind.html",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Allows for recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  This function is only available if the ‘data.table’ package is installed.  Returns a data.table.  Faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\nNote that the naming convention of the binding implementations here is \"bind_\" followed by the resulting class (abbreviated).  I.e. bind_mat returns a matrix, but can bind both matrices and vectors.  And bind_array returns an array, but can bind both arrays and matrices.  And bind_dt returns a data.table, but can bind not only data.tables, but also most other data.frame-like objects.  \n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  revalong,\n  max_bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrevalong\n\n\nfor bind_array() only.  Same as along, but counting backwards.  I.e. revalong = 0 is equivalent to along = N+1, and revalong = N+1 is equivalent to along = 0;  with N = max(lst.ndim(input)).\n\n\n\n\nmax_bc\n\n\ninteger, for bind_array only.  Specify here the number of dimensions that are allowed to be broadcasted when binding arrays.  If max_bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to rbindlist.  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, along = 2L)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, along = 3L) # bind on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, revalong = 2L)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, revalong = 3L) # bind on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n\n     empty 1 empty 2 empty 3\n\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n\n  A            B            C                  \na logical,3    logical,3    logical,3    1 5 9 \nb integer,10   integer,10   integer,10   2 6 10\nc numeric,10   numeric,10   numeric,10   3 7 11\nd character,26 character,26 character,26 4 8 12\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n\n      x.a    x.b   y.a    y.b\n    &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n 1:     1    Jan     1    Jan\n 2:     2    Feb     2    Feb\n 3:     3    Mar     3    Mar\n 4:     4    Apr     4    Apr\n 5:     5    May     5    May\n 6:     6    Jun     6    Jun\n 7:     7    Jul     7    Jul\n 8:     8    Aug     8    Aug\n 9:     9    Sep     9    Sep\n10:    10    Oct    10    Oct\n11:    11    Nov    11    Nov\n12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n\n        a      b\n    &lt;int&gt; &lt;char&gt;\n 1:     1    Jan\n 2:     2    Feb\n 3:     3    Mar\n 4:     4    Apr\n 5:     5    May\n 6:     6    Jun\n 7:     7    Jul\n 8:     8    Aug\n 9:     9    Sep\n10:    10    Oct\n11:    11    Nov\n12:    12    Dec\n13:     1    Jan\n14:     2    Feb\n15:     3    Mar\n16:     4    Apr\n17:     5    May\n18:     6    Jun\n19:     7    Jul\n20:     8    Aug\n21:     9    Sep\n22:    10    Oct\n23:    11    Nov\n24:    12    Dec\n        a      b"
  },
  {
    "objectID": "man/bind/bind.html#dimensional-binding-of-objects",
    "href": "man/bind/bind.html#dimensional-binding-of-objects",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Allows for recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  This function is only available if the ‘data.table’ package is installed.  Returns a data.table.  Faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\nNote that the naming convention of the binding implementations here is \"bind_\" followed by the resulting class (abbreviated).  I.e. bind_mat returns a matrix, but can bind both matrices and vectors.  And bind_array returns an array, but can bind both arrays and matrices.  And bind_dt returns a data.table, but can bind not only data.tables, but also most other data.frame-like objects.  \n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  revalong,\n  max_bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrevalong\n\n\nfor bind_array() only.  Same as along, but counting backwards.  I.e. revalong = 0 is equivalent to along = N+1, and revalong = N+1 is equivalent to along = 0;  with N = max(lst.ndim(input)).\n\n\n\n\nmax_bc\n\n\ninteger, for bind_array only.  Specify here the number of dimensions that are allowed to be broadcasted when binding arrays.  If max_bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to rbindlist.  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, along = 2L)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, along = 3L) # bind on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, revalong = 2L)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, revalong = 3L) # bind on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n\n     empty 1 empty 2 empty 3\n\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n\n  A            B            C                  \na logical,3    logical,3    logical,3    1 5 9 \nb integer,10   integer,10   integer,10   2 6 10\nc numeric,10   numeric,10   numeric,10   3 7 11\nd character,26 character,26 character,26 4 8 12\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n\n      x.a    x.b   y.a    y.b\n    &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n 1:     1    Jan     1    Jan\n 2:     2    Feb     2    Feb\n 3:     3    Mar     3    Mar\n 4:     4    Apr     4    Apr\n 5:     5    May     5    May\n 6:     6    Jun     6    Jun\n 7:     7    Jul     7    Jul\n 8:     8    Aug     8    Aug\n 9:     9    Sep     9    Sep\n10:    10    Oct    10    Oct\n11:    11    Nov    11    Nov\n12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n\n        a      b\n    &lt;int&gt; &lt;char&gt;\n 1:     1    Jan\n 2:     2    Feb\n 3:     3    Mar\n 4:     4    Apr\n 5:     5    May\n 6:     6    Jun\n 7:     7    Jul\n 8:     8    Aug\n 9:     9    Sep\n10:    10    Oct\n11:    11    Nov\n12:    12    Dec\n13:     1    Jan\n14:     2    Feb\n15:     3    Mar\n16:     4    Apr\n17:     5    May\n18:     6    Jun\n19:     7    Jul\n20:     8    Aug\n21:     9    Sep\n22:    10    Oct\n23:    11    Nov\n24:    12    Dec\n        a      b"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html",
    "href": "man/aaa00_broadcast_help.html",
    "title": "broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe broadcasted implementations include, but are not limited to, the following:\n\n\nA more efficient and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nRelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=; can also take into account Machine precision);\n\n\nArithmetic operations (like +, -, *, /, \"gcd\", ^, pmin(), pmax());\n\n\nBoolean combiner operations (like &, |, xor(), \"nand\");\n\n\nString distance, (in)equality, and concatenation operations;\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function; The broadcasted implementations strive to minimize computation time and memory usage (which is not just good for computer efficiency, but also for the environment).\n\n\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "href": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "title": "broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe broadcasted implementations include, but are not limited to, the following:\n\n\nA more efficient and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nRelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=; can also take into account Machine precision);\n\n\nArithmetic operations (like +, -, *, /, \"gcd\", ^, pmin(), pmax());\n\n\nBoolean combiner operations (like &, |, xor(), \"nand\");\n\n\nString distance, (in)equality, and concatenation operations;\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function; The broadcasted implementations strive to minimize computation time and memory usage (which is not just good for computer efficiency, but also for the environment).\n\n\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "about/NEWS.html",
    "href": "about/NEWS.html",
    "title": "Changelog",
    "section": "",
    "text": "…still testing…"
  },
  {
    "objectID": "about/LICENSE.html",
    "href": "about/LICENSE.html",
    "title": "License",
    "section": "",
    "text": "1.1. “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular Contributor.\n1.4. “Covered Software” means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source Code Form.\n1.7. “Larger Work” means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for making modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n\n\n\n2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n\n\n\n3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n\n\n\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n\n\n\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n\n                                                                 *\n\nDisclaimer of Warranty *\n\n————————- *\n                                                                 *\nCovered Software is provided under this License on an “as is” *\nbasis, without warranty of any kind, either expressed, implied, or *\nstatutory, including, without limitation, warranties that the *\nCovered Software is free of defects, merchantable, fit for a *\nparticular purpose or non-infringing. The entire risk as to the *\nquality and performance of the Covered Software is with You. *\nShould any Covered Software prove defective in any respect, You *\n(not any Contributor) assume the cost of any necessary servicing, *\nrepair, or correction. This disclaimer of warranty constitutes an *\nessential part of this License. No use of any Covered Software is *\nauthorized under this License except under this disclaimer. *\n                                                                 *\n\n\n\n\n                                                                 *\n\nLimitation of Liability *\n\n————————– *\n                                                                 *\nUnder no circumstances and under no legal theory, whether tort *\n(including negligence), contract, or otherwise, shall any *\nContributor, or anyone who distributes Covered Software as *\npermitted above, be liable to You for any direct, indirect, *\nspecial, incidental, or consequential damages of any character *\nincluding, without limitation, damages for lost profits, loss of *\ngoodwill, work stoppage, computer failure or malfunction, or any *\nand all other commercial damages or losses, even if such party *\nshall have been informed of the possibility of such damages. This *\nlimitation of liability shall not apply to liability for death or *\npersonal injury resulting from such party’s negligence to the *\nextent applicable law prohibits such limitation. Some *\njurisdictions do not allow the exclusion or limitation of *\nincidental or consequential damages, so this exclusion and *\nlimitation may not apply to You. *\n                                                                 *\n\n\n\n\n\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n\n\n\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n\n\n\n10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\n\n\n\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\nYou may add additional accurate notices of copyright ownership.\n\n\n\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0."
  },
  {
    "objectID": "about/LICENSE.html#definitions",
    "href": "about/LICENSE.html#definitions",
    "title": "License",
    "section": "",
    "text": "1.1. “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular Contributor.\n1.4. “Covered Software” means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source Code Form.\n1.7. “Larger Work” means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for making modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity."
  },
  {
    "objectID": "about/LICENSE.html#license-grants-and-conditions",
    "href": "about/LICENSE.html#license-grants-and-conditions",
    "title": "License",
    "section": "",
    "text": "2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\n\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\n\nfor any code that a Contributor has removed from Covered Software; or\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1."
  },
  {
    "objectID": "about/LICENSE.html#responsibilities",
    "href": "about/LICENSE.html#responsibilities",
    "title": "License",
    "section": "",
    "text": "3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\n\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction."
  },
  {
    "objectID": "about/LICENSE.html#inability-to-comply-due-to-statute-or-regulation",
    "href": "about/LICENSE.html#inability-to-comply-due-to-statute-or-regulation",
    "title": "License",
    "section": "",
    "text": "If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it."
  },
  {
    "objectID": "about/LICENSE.html#termination",
    "href": "about/LICENSE.html#termination",
    "title": "License",
    "section": "",
    "text": "5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n\n\n                                                                 *\n\nDisclaimer of Warranty *\n\n————————- *\n                                                                 *\nCovered Software is provided under this License on an “as is” *\nbasis, without warranty of any kind, either expressed, implied, or *\nstatutory, including, without limitation, warranties that the *\nCovered Software is free of defects, merchantable, fit for a *\nparticular purpose or non-infringing. The entire risk as to the *\nquality and performance of the Covered Software is with You. *\nShould any Covered Software prove defective in any respect, You *\n(not any Contributor) assume the cost of any necessary servicing, *\nrepair, or correction. This disclaimer of warranty constitutes an *\nessential part of this License. No use of any Covered Software is *\nauthorized under this License except under this disclaimer. *\n                                                                 *\n\n\n\n\n                                                                 *\n\nLimitation of Liability *\n\n————————– *\n                                                                 *\nUnder no circumstances and under no legal theory, whether tort *\n(including negligence), contract, or otherwise, shall any *\nContributor, or anyone who distributes Covered Software as *\npermitted above, be liable to You for any direct, indirect, *\nspecial, incidental, or consequential damages of any character *\nincluding, without limitation, damages for lost profits, loss of *\ngoodwill, work stoppage, computer failure or malfunction, or any *\nand all other commercial damages or losses, even if such party *\nshall have been informed of the possibility of such damages. This *\nlimitation of liability shall not apply to liability for death or *\npersonal injury resulting from such party’s negligence to the *\nextent applicable law prohibits such limitation. Some *\njurisdictions do not allow the exclusion or limitation of *\nincidental or consequential damages, so this exclusion and *\nlimitation may not apply to You. *\n                                                                 *"
  },
  {
    "objectID": "about/LICENSE.html#litigation",
    "href": "about/LICENSE.html#litigation",
    "title": "License",
    "section": "",
    "text": "Any litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims."
  },
  {
    "objectID": "about/LICENSE.html#miscellaneous",
    "href": "about/LICENSE.html#miscellaneous",
    "title": "License",
    "section": "",
    "text": "This License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor."
  },
  {
    "objectID": "about/LICENSE.html#versions-of-the-license",
    "href": "about/LICENSE.html#versions-of-the-license",
    "title": "License",
    "section": "",
    "text": "10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached."
  },
  {
    "objectID": "about/LICENSE.html#exhibit-a---source-code-form-license-notice",
    "href": "about/LICENSE.html#exhibit-a---source-code-form-license-notice",
    "title": "License",
    "section": "",
    "text": "This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\nYou may add additional accurate notices of copyright ownership."
  },
  {
    "objectID": "about/LICENSE.html#exhibit-b---incompatible-with-secondary-licenses-notice",
    "href": "about/LICENSE.html#exhibit-b---incompatible-with-secondary-licenses-notice",
    "title": "License",
    "section": "",
    "text": "This Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "index.html#why-use-broadcast",
    "href": "index.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/bind/aaa01_broadcast_bind.html",
    "href": "man/bind/aaa01_broadcast_bind.html",
    "title": "broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of rbind/cbind.  bind_mat() differs from rbind/cbind in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10).\n\n\nbind The primary differences is that   \n\n\n\n\n\n…"
  },
  {
    "objectID": "man/bind/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "href": "man/bind/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "title": "broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of rbind/cbind.  bind_mat() differs from rbind/cbind in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10).\n\n\nbind The primary differences is that   \n\n\n\n\n\n…"
  },
  {
    "objectID": "man/generic/bcapply.html",
    "href": "man/generic/bcapply.html",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n\n, , 1\n\n      [,1]   [,2]  \n [1,] list,2 list,2\n [2,] list,2 list,2\n [3,] list,2 list,2\n [4,] list,2 list,2\n [5,] list,2 list,2\n [6,] list,2 list,2\n [7,] list,2 list,2\n [8,] list,2 list,2\n [9,] list,2 list,2\n[10,] list,2 list,2\n\n, , 2\n\n      [,1]   [,2]  \n [1,] list,2 list,2\n [2,] list,2 list,2\n [3,] list,2 list,2\n [4,] list,2 list,2\n [5,] list,2 list,2\n [6,] list,2 list,2\n [7,] list,2 list,2\n [8,] list,2 list,2\n [9,] list,2 list,2\n[10,] list,2 list,2"
  },
  {
    "objectID": "man/generic/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "href": "man/generic/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n\n, , 1\n\n      [,1]   [,2]  \n [1,] list,2 list,2\n [2,] list,2 list,2\n [3,] list,2 list,2\n [4,] list,2 list,2\n [5,] list,2 list,2\n [6,] list,2 list,2\n [7,] list,2 list,2\n [8,] list,2 list,2\n [9,] list,2 list,2\n[10,] list,2 list,2\n\n, , 2\n\n      [,1]   [,2]  \n [1,] list,2 list,2\n [2,] list,2 list,2\n [3,] list,2 list,2\n [4,] list,2 list,2\n [5,] list,2 list,2\n [6,] list,2 list,2\n [7,] list,2 list,2\n [8,] list,2 list,2\n [9,] list,2 list,2\n[10,] list,2 list,2"
  },
  {
    "objectID": "man/other/array_replicate.html",
    "href": "man/other/array_replicate.html",
    "title": "array_replicate",
    "section": "",
    "text": "The array_replicate() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The array_replicate() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\narray_replicate(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n\n  A B C\na 1 4 7\nb 2 5 8\nc 3 6 9\nattr(,\"names\")\n[1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\narray_replicate(x, c(3,3,2)) # replicate to larger size\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"
  },
  {
    "objectID": "man/other/array_replicate.html#replicate-array-dimensions",
    "href": "man/other/array_replicate.html#replicate-array-dimensions",
    "title": "array_replicate",
    "section": "",
    "text": "The array_replicate() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The array_replicate() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\narray_replicate(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n\n  A B C\na 1 4 7\nb 2 5 8\nc 3 6 9\nattr(,\"names\")\n[1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\narray_replicate(x, c(3,3,2)) # replicate to larger size\n\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9"
  },
  {
    "objectID": "man/other/properties.html",
    "href": "man/other/properties.html",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  len() is an alias for length.  lst.len() is an alias for lengths.   These functions were all designed to be efficient.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nAn integer scalar\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, along = 2L)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, along = 3L) # bind on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, revalong = 2L)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, revalong = 3L) # bind on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n\n     empty 1 empty 2 empty 3\n\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n\n  A            B            C                  \na logical,3    logical,3    logical,3    1 5 9 \nb integer,10   integer,10   integer,10   2 6 10\nc numeric,10   numeric,10   numeric,10   3 7 11\nd character,26 character,26 character,26 4 8 12\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n\n      x.a    x.b   y.a    y.b\n    &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n 1:     1    Jan     1    Jan\n 2:     2    Feb     2    Feb\n 3:     3    Mar     3    Mar\n 4:     4    Apr     4    Apr\n 5:     5    May     5    May\n 6:     6    Jun     6    Jun\n 7:     7    Jul     7    Jul\n 8:     8    Aug     8    Aug\n 9:     9    Sep     9    Sep\n10:    10    Oct    10    Oct\n11:    11    Nov    11    Nov\n12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n\n        a      b\n    &lt;int&gt; &lt;char&gt;\n 1:     1    Jan\n 2:     2    Feb\n 3:     3    Mar\n 4:     4    Apr\n 5:     5    May\n 6:     6    Jun\n 7:     7    Jul\n 8:     8    Aug\n 9:     9    Sep\n10:    10    Oct\n11:    11    Nov\n12:    12    Dec\n13:     1    Jan\n14:     2    Feb\n15:     3    Mar\n16:     4    Apr\n17:     5    May\n18:     6    Jun\n19:     7    Jul\n20:     8    Aug\n21:     9    Sep\n22:    10    Oct\n23:    11    Nov\n24:    12    Dec\n        a      b"
  },
  {
    "objectID": "man/other/properties.html#small-property-functions",
    "href": "man/other/properties.html#small-property-functions",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  len() is an alias for length.  lst.len() is an alias for lengths.   These functions were all designed to be efficient.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nAn integer scalar\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, along = 2L)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, along = 3L) # bind on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 0L) # binds on new dimension after last\n\n, , x\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n, , y\n\n  A B C \na 1 5 9 \nb 2 6 10\nc 3 7 11\nd 4 8 12\n\nbind_array(input, revalong = 1L) # binds on last dimension (i.e. columns)\n\n  A            B            C            y.1 y.2 y.3\na logical,3    logical,3    logical,3    1   5   9  \nb integer,10   integer,10   integer,10   2   6   10 \nc numeric,10   numeric,10   numeric,10   3   7   11 \nd character,26 character,26 character,26 4   8   12 \n\nbind_array(input, revalong = 2L)\n\n    A            B            C           \na   logical,3    logical,3    logical,3   \nb   integer,10   integer,10   integer,10  \nc   numeric,10   numeric,10   numeric,10  \nd   character,26 character,26 character,26\ny.1 1            5            9           \ny.2 2            6            10          \ny.3 3            7            11          \ny.4 4            8            12          \n\nbind_array(input, revalong = 3L) # bind on new dimension before first\n\n, , 1\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 1         2          3          4           \n\n, , 2\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 5         6          7          8           \n\n, , 3\n\n  a         b          c          d           \nx logical,3 integer,10 numeric,10 character,26\ny 9         10         11         12          \n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n\n     empty 1 empty 2 empty 3\n\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n\n  A            B            C           \na logical,3    logical,3    logical,3   \nb integer,10   integer,10   integer,10  \nc numeric,10   numeric,10   numeric,10  \nd character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n\n  A            B            C                  \na logical,3    logical,3    logical,3    1 5 9 \nb integer,10   integer,10   integer,10   2 6 10\nc numeric,10   numeric,10   numeric,10   3 7 11\nd character,26 character,26 character,26 4 8 12\n\n################################################################################\n\n# bind_dt ====\n\n\nx &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\ny &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n\nbind_dt(list(x = x, y = y), 2L) # column bind\n\n      x.a    x.b   y.a    y.b\n    &lt;int&gt; &lt;char&gt; &lt;int&gt; &lt;char&gt;\n 1:     1    Jan     1    Jan\n 2:     2    Feb     2    Feb\n 3:     3    Mar     3    Mar\n 4:     4    Apr     4    Apr\n 5:     5    May     5    May\n 6:     6    Jun     6    Jun\n 7:     7    Jul     7    Jul\n 8:     8    Aug     8    Aug\n 9:     9    Sep     9    Sep\n10:    10    Oct    10    Oct\n11:    11    Nov    11    Nov\n12:    12    Dec    12    Dec\n\nbind_dt(list(x = x, y = y), 1L) # row bind\n\n        a      b\n    &lt;int&gt; &lt;char&gt;\n 1:     1    Jan\n 2:     2    Feb\n 3:     3    Mar\n 4:     4    Apr\n 5:     5    May\n 6:     6    Jun\n 7:     7    Jul\n 8:     8    Aug\n 9:     9    Sep\n10:    10    Oct\n11:    11    Nov\n12:    12    Dec\n13:     1    Jan\n14:     2    Feb\n15:     3    Mar\n16:     4    Apr\n17:     5    May\n18:     6    Jun\n19:     7    Jul\n20:     8    Aug\n21:     9    Sep\n22:    10    Oct\n23:    11    Nov\n24:    12    Dec\n        a      b"
  },
  {
    "objectID": "man/outer/bc.b.html",
    "href": "man/outer/bc.b.html",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.b(x, y, \"&\")\n\n, , 1\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE   NA FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE\n [2,]  TRUE   NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n [3,]    NA   NA    NA  TRUE  TRUE    NA FALSE  TRUE FALSE\n [4,]  TRUE   NA FALSE FALSE FALSE    NA FALSE FALSE FALSE\n [5,] FALSE   NA FALSE    NA FALSE FALSE    NA FALSE    NA\n [6,]  TRUE TRUE    NA    NA  TRUE  TRUE    NA  TRUE  TRUE\n [7,]    NA   NA    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE\n [8,]  TRUE   NA FALSE  TRUE FALSE  TRUE  TRUE    NA  TRUE\n [9,]    NA   NA    NA    NA FALSE    NA  TRUE    NA FALSE\n[10,]  TRUE   NA    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE FALSE    NA  TRUE  TRUE    NA  TRUE\n [2,]    NA FALSE  TRUE    NA    NA  TRUE  TRUE FALSE  TRUE\n [3,] FALSE FALSE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n [4,] FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE    NA\n [5,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n [6,] FALSE    NA  TRUE    NA    NA    NA    NA  TRUE FALSE\n [7,] FALSE FALSE FALSE    NA    NA  TRUE    NA FALSE    NA\n [8,] FALSE    NA    NA    NA  TRUE  TRUE FALSE FALSE    NA\n [9,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n[10,]  TRUE  TRUE    NA  TRUE  TRUE FALSE    NA    NA  TRUE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE\n [2,] FALSE    NA    NA    NA FALSE  TRUE    NA FALSE FALSE\n [3,]  TRUE    NA  TRUE  TRUE FALSE  TRUE    NA  TRUE    NA\n [4,]  TRUE    NA FALSE FALSE    NA FALSE  TRUE    NA FALSE\n [5,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE\n [6,]  TRUE  TRUE    NA FALSE FALSE    NA    NA FALSE  TRUE\n [7,]    NA    NA    NA FALSE    NA  TRUE  TRUE    NA    NA\n [8,]  TRUE FALSE  TRUE  TRUE FALSE    NA    NA FALSE    NA\n [9,] FALSE  TRUE FALSE    NA    NA  TRUE FALSE FALSE FALSE\n[10,]    NA    NA    NA  TRUE FALSE FALSE    NA  TRUE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE FALSE FALSE    NA    NA  TRUE FALSE\n [2,]  TRUE FALSE    NA    NA    NA  TRUE    NA FALSE  TRUE\n [3,]    NA    NA    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n [4,]    NA FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n [5,]    NA    NA FALSE    NA FALSE  TRUE    NA    NA    NA\n [6,]    NA    NA    NA FALSE FALSE FALSE  TRUE  TRUE  TRUE\n [7,]  TRUE FALSE FALSE    NA FALSE  TRUE    NA  TRUE  TRUE\n [8,]    NA  TRUE  TRUE    NA    NA FALSE FALSE  TRUE    NA\n [9,]  TRUE    NA  TRUE FALSE FALSE    NA  TRUE  TRUE  TRUE\n[10,] FALSE  TRUE    NA FALSE  TRUE    NA    NA  TRUE  TRUE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n [2,] FALSE FALSE FALSE    NA FALSE  TRUE    NA FALSE FALSE\n [3,] FALSE    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA\n [4,]  TRUE FALSE FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n [5,]  TRUE    NA  TRUE    NA  TRUE FALSE FALSE  TRUE    NA\n [6,]  TRUE FALSE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n [7,]    NA    NA    NA  TRUE    NA    NA  TRUE  TRUE    NA\n [8,] FALSE    NA FALSE FALSE    NA  TRUE  TRUE    NA FALSE\n [9,] FALSE    NA FALSE    NA    NA  TRUE  TRUE    NA FALSE\n[10,] FALSE FALSE FALSE    NA    NA    NA  TRUE    NA  TRUE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE    NA  TRUE FALSE FALSE    NA    NA  TRUE\n [2,] FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA  TRUE\n [3,]    NA    NA FALSE  TRUE  TRUE FALSE    NA    NA  TRUE\n [4,]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n [5,]    NA  TRUE  TRUE FALSE FALSE FALSE    NA FALSE FALSE\n [6,] FALSE  TRUE    NA    NA    NA    NA FALSE    NA FALSE\n [7,]    NA  TRUE    NA  TRUE    NA  TRUE    NA    NA  TRUE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE    NA FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE  TRUE\n[10,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA  TRUE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE\n [2,]    NA FALSE  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE\n [3,]    NA  TRUE    NA  TRUE    NA FALSE  TRUE    NA FALSE\n [4,] FALSE    NA    NA FALSE FALSE  TRUE  TRUE    NA  TRUE\n [5,]  TRUE FALSE    NA FALSE FALSE FALSE FALSE FALSE FALSE\n [6,]    NA FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n [7,] FALSE  TRUE    NA    NA FALSE    NA  TRUE FALSE FALSE\n [8,] FALSE FALSE  TRUE FALSE  TRUE FALSE    NA    NA  TRUE\n [9,]  TRUE FALSE  TRUE  TRUE    NA  TRUE    NA FALSE  TRUE\n[10,] FALSE    NA FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] [,9]\n [1,]    NA  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE   NA\n [2,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA TRUE\n [3,] FALSE FALSE  TRUE    NA    NA    NA    NA    NA TRUE\n [4,]    NA FALSE  TRUE FALSE  TRUE  TRUE    NA FALSE TRUE\n [5,]  TRUE FALSE FALSE FALSE FALSE    NA  TRUE  TRUE TRUE\n [6,] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE TRUE\n [7,] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE    NA TRUE\n [8,]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE   NA\n [9,]    NA  TRUE  TRUE    NA    NA  TRUE FALSE FALSE   NA\n[10,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE    NA TRUE\n\nbc.b(x, y, \"|\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.b(x, y, \"xor\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA  TRUE FALSE FALSE FALSE    NA  TRUE FALSE\n [2,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n [3,]    NA    NA    NA FALSE FALSE    NA  TRUE FALSE  TRUE\n [4,] FALSE    NA  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE\n [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA  TRUE    NA\n [6,] FALSE FALSE    NA    NA FALSE FALSE    NA FALSE FALSE\n [7,]    NA    NA    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE\n [8,] FALSE    NA  TRUE FALSE  TRUE FALSE FALSE    NA FALSE\n [9,]    NA    NA    NA    NA  TRUE    NA FALSE    NA  TRUE\n[10,] FALSE    NA    NA FALSE  TRUE    NA FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE  TRUE    NA FALSE FALSE    NA FALSE\n [2,]    NA  TRUE FALSE    NA    NA FALSE FALSE  TRUE FALSE\n [3,]  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n [4,]  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE    NA\n [5,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n [6,]  TRUE    NA FALSE    NA    NA    NA    NA FALSE  TRUE\n [7,]  TRUE  TRUE  TRUE    NA    NA FALSE    NA  TRUE    NA\n [8,]  TRUE    NA    NA    NA FALSE FALSE  TRUE  TRUE    NA\n [9,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n[10,] FALSE FALSE    NA FALSE FALSE  TRUE    NA    NA FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE\n [2,]  TRUE    NA    NA    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,] FALSE    NA FALSE FALSE  TRUE FALSE    NA FALSE    NA\n [4,] FALSE    NA  TRUE  TRUE    NA  TRUE FALSE    NA  TRUE\n [5,] FALSE FALSE FALSE FALSE    NA FALSE  TRUE    NA  TRUE\n [6,] FALSE FALSE    NA  TRUE  TRUE    NA    NA  TRUE FALSE\n [7,]    NA    NA    NA  TRUE    NA FALSE FALSE    NA    NA\n [8,] FALSE  TRUE FALSE FALSE  TRUE    NA    NA  TRUE    NA\n [9,]  TRUE FALSE  TRUE    NA    NA FALSE  TRUE  TRUE  TRUE\n[10,]    NA    NA    NA FALSE  TRUE  TRUE    NA FALSE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE  TRUE  TRUE    NA    NA FALSE  TRUE\n [2,] FALSE  TRUE    NA    NA    NA FALSE    NA  TRUE FALSE\n [3,]    NA    NA    NA    NA FALSE FALSE FALSE    NA FALSE\n [4,]    NA  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n [5,]    NA    NA  TRUE    NA  TRUE FALSE    NA    NA    NA\n [6,]    NA    NA    NA  TRUE  TRUE  TRUE FALSE FALSE FALSE\n [7,] FALSE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE FALSE\n [8,]    NA FALSE FALSE    NA    NA  TRUE  TRUE FALSE    NA\n [9,] FALSE    NA FALSE  TRUE  TRUE    NA FALSE FALSE FALSE\n[10,]  TRUE FALSE    NA  TRUE FALSE    NA    NA FALSE FALSE\n\n, , 5\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n [2,]  TRUE TRUE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,]  TRUE   NA    NA FALSE FALSE    NA  TRUE FALSE    NA\n [4,] FALSE TRUE  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n [5,] FALSE   NA FALSE    NA FALSE  TRUE  TRUE FALSE    NA\n [6,] FALSE TRUE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n [7,]    NA   NA    NA FALSE    NA    NA FALSE FALSE    NA\n [8,]  TRUE   NA  TRUE  TRUE    NA FALSE FALSE    NA  TRUE\n [9,]  TRUE   NA  TRUE    NA    NA FALSE FALSE    NA  TRUE\n[10,]  TRUE TRUE  TRUE    NA    NA    NA FALSE    NA FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9]\n [1,]  TRUE FALSE    NA FALSE  TRUE  TRUE    NA   NA FALSE\n [2,]  TRUE FALSE    NA FALSE    NA  TRUE    NA   NA FALSE\n [3,]    NA    NA  TRUE FALSE FALSE  TRUE    NA   NA FALSE\n [4,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE   NA FALSE\n [5,]    NA FALSE FALSE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [6,]  TRUE FALSE    NA    NA    NA    NA  TRUE   NA  TRUE\n [7,]    NA FALSE    NA FALSE    NA FALSE    NA   NA FALSE\n [8,] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [9,]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA TRUE FALSE\n[10,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE   NA FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n [2,]    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE\n [3,]    NA FALSE    NA FALSE    NA  TRUE FALSE    NA  TRUE\n [4,]  TRUE    NA    NA  TRUE  TRUE FALSE FALSE    NA FALSE\n [5,] FALSE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [6,]    NA  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n [7,]  TRUE FALSE    NA    NA  TRUE    NA FALSE  TRUE  TRUE\n [8,]  TRUE  TRUE FALSE  TRUE FALSE  TRUE    NA    NA FALSE\n [9,] FALSE  TRUE FALSE FALSE    NA FALSE    NA  TRUE FALSE\n[10,]  TRUE    NA  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]    NA FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE    NA\n [2,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA FALSE\n [3,]  TRUE  TRUE FALSE    NA    NA    NA    NA    NA FALSE\n [4,]    NA  TRUE FALSE  TRUE FALSE FALSE    NA  TRUE FALSE\n [5,] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE FALSE FALSE\n [6,]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE    NA FALSE\n [8,] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE    NA\n [9,]    NA FALSE FALSE    NA    NA FALSE  TRUE  TRUE    NA\n[10,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE    NA FALSE\n\nbc.b(x, y, \"nand\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.b(x, y, \"==\")\n\n, , 1\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE   NA FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE\n [2,]  TRUE   NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n [3,]    NA   NA    NA  TRUE  TRUE    NA FALSE  TRUE FALSE\n [4,]  TRUE   NA FALSE FALSE FALSE    NA FALSE FALSE FALSE\n [5,] FALSE   NA FALSE    NA FALSE FALSE    NA FALSE    NA\n [6,]  TRUE TRUE    NA    NA  TRUE  TRUE    NA  TRUE  TRUE\n [7,]    NA   NA    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE\n [8,]  TRUE   NA FALSE  TRUE FALSE  TRUE  TRUE    NA  TRUE\n [9,]    NA   NA    NA    NA FALSE    NA  TRUE    NA FALSE\n[10,]  TRUE   NA    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE FALSE    NA  TRUE  TRUE    NA  TRUE\n [2,]    NA FALSE  TRUE    NA    NA  TRUE  TRUE FALSE  TRUE\n [3,] FALSE FALSE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n [4,] FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE    NA\n [5,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n [6,] FALSE    NA  TRUE    NA    NA    NA    NA  TRUE FALSE\n [7,] FALSE FALSE FALSE    NA    NA  TRUE    NA FALSE    NA\n [8,] FALSE    NA    NA    NA  TRUE  TRUE FALSE FALSE    NA\n [9,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n[10,]  TRUE  TRUE    NA  TRUE  TRUE FALSE    NA    NA  TRUE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE\n [2,] FALSE    NA    NA    NA FALSE  TRUE    NA FALSE FALSE\n [3,]  TRUE    NA  TRUE  TRUE FALSE  TRUE    NA  TRUE    NA\n [4,]  TRUE    NA FALSE FALSE    NA FALSE  TRUE    NA FALSE\n [5,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE\n [6,]  TRUE  TRUE    NA FALSE FALSE    NA    NA FALSE  TRUE\n [7,]    NA    NA    NA FALSE    NA  TRUE  TRUE    NA    NA\n [8,]  TRUE FALSE  TRUE  TRUE FALSE    NA    NA FALSE    NA\n [9,] FALSE  TRUE FALSE    NA    NA  TRUE FALSE FALSE FALSE\n[10,]    NA    NA    NA  TRUE FALSE FALSE    NA  TRUE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE FALSE FALSE    NA    NA  TRUE FALSE\n [2,]  TRUE FALSE    NA    NA    NA  TRUE    NA FALSE  TRUE\n [3,]    NA    NA    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n [4,]    NA FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n [5,]    NA    NA FALSE    NA FALSE  TRUE    NA    NA    NA\n [6,]    NA    NA    NA FALSE FALSE FALSE  TRUE  TRUE  TRUE\n [7,]  TRUE FALSE FALSE    NA FALSE  TRUE    NA  TRUE  TRUE\n [8,]    NA  TRUE  TRUE    NA    NA FALSE FALSE  TRUE    NA\n [9,]  TRUE    NA  TRUE FALSE FALSE    NA  TRUE  TRUE  TRUE\n[10,] FALSE  TRUE    NA FALSE  TRUE    NA    NA  TRUE  TRUE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n [2,] FALSE FALSE FALSE    NA FALSE  TRUE    NA FALSE FALSE\n [3,] FALSE    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA\n [4,]  TRUE FALSE FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n [5,]  TRUE    NA  TRUE    NA  TRUE FALSE FALSE  TRUE    NA\n [6,]  TRUE FALSE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n [7,]    NA    NA    NA  TRUE    NA    NA  TRUE  TRUE    NA\n [8,] FALSE    NA FALSE FALSE    NA  TRUE  TRUE    NA FALSE\n [9,] FALSE    NA FALSE    NA    NA  TRUE  TRUE    NA FALSE\n[10,] FALSE FALSE FALSE    NA    NA    NA  TRUE    NA  TRUE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE    NA  TRUE FALSE FALSE    NA    NA  TRUE\n [2,] FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA  TRUE\n [3,]    NA    NA FALSE  TRUE  TRUE FALSE    NA    NA  TRUE\n [4,]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n [5,]    NA  TRUE  TRUE FALSE FALSE FALSE    NA FALSE FALSE\n [6,] FALSE  TRUE    NA    NA    NA    NA FALSE    NA FALSE\n [7,]    NA  TRUE    NA  TRUE    NA  TRUE    NA    NA  TRUE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE    NA FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE  TRUE\n[10,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA  TRUE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE\n [2,]    NA FALSE  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE\n [3,]    NA  TRUE    NA  TRUE    NA FALSE  TRUE    NA FALSE\n [4,] FALSE    NA    NA FALSE FALSE  TRUE  TRUE    NA  TRUE\n [5,]  TRUE FALSE    NA FALSE FALSE FALSE FALSE FALSE FALSE\n [6,]    NA FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n [7,] FALSE  TRUE    NA    NA FALSE    NA  TRUE FALSE FALSE\n [8,] FALSE FALSE  TRUE FALSE  TRUE FALSE    NA    NA  TRUE\n [9,]  TRUE FALSE  TRUE  TRUE    NA  TRUE    NA FALSE  TRUE\n[10,] FALSE    NA FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] [,9]\n [1,]    NA  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE   NA\n [2,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA TRUE\n [3,] FALSE FALSE  TRUE    NA    NA    NA    NA    NA TRUE\n [4,]    NA FALSE  TRUE FALSE  TRUE  TRUE    NA FALSE TRUE\n [5,]  TRUE FALSE FALSE FALSE FALSE    NA  TRUE  TRUE TRUE\n [6,] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE TRUE\n [7,] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE    NA TRUE\n [8,]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE   NA\n [9,]    NA  TRUE  TRUE    NA    NA  TRUE FALSE FALSE   NA\n[10,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE    NA TRUE\n\nbc.b(x, y, \"!=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA  TRUE FALSE FALSE FALSE    NA  TRUE FALSE\n [2,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n [3,]    NA    NA    NA FALSE FALSE    NA  TRUE FALSE  TRUE\n [4,] FALSE    NA  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE\n [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA  TRUE    NA\n [6,] FALSE FALSE    NA    NA FALSE FALSE    NA FALSE FALSE\n [7,]    NA    NA    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE\n [8,] FALSE    NA  TRUE FALSE  TRUE FALSE FALSE    NA FALSE\n [9,]    NA    NA    NA    NA  TRUE    NA FALSE    NA  TRUE\n[10,] FALSE    NA    NA FALSE  TRUE    NA FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE  TRUE    NA FALSE FALSE    NA FALSE\n [2,]    NA  TRUE FALSE    NA    NA FALSE FALSE  TRUE FALSE\n [3,]  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n [4,]  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE    NA\n [5,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n [6,]  TRUE    NA FALSE    NA    NA    NA    NA FALSE  TRUE\n [7,]  TRUE  TRUE  TRUE    NA    NA FALSE    NA  TRUE    NA\n [8,]  TRUE    NA    NA    NA FALSE FALSE  TRUE  TRUE    NA\n [9,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n[10,] FALSE FALSE    NA FALSE FALSE  TRUE    NA    NA FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE\n [2,]  TRUE    NA    NA    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,] FALSE    NA FALSE FALSE  TRUE FALSE    NA FALSE    NA\n [4,] FALSE    NA  TRUE  TRUE    NA  TRUE FALSE    NA  TRUE\n [5,] FALSE FALSE FALSE FALSE    NA FALSE  TRUE    NA  TRUE\n [6,] FALSE FALSE    NA  TRUE  TRUE    NA    NA  TRUE FALSE\n [7,]    NA    NA    NA  TRUE    NA FALSE FALSE    NA    NA\n [8,] FALSE  TRUE FALSE FALSE  TRUE    NA    NA  TRUE    NA\n [9,]  TRUE FALSE  TRUE    NA    NA FALSE  TRUE  TRUE  TRUE\n[10,]    NA    NA    NA FALSE  TRUE  TRUE    NA FALSE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE  TRUE  TRUE    NA    NA FALSE  TRUE\n [2,] FALSE  TRUE    NA    NA    NA FALSE    NA  TRUE FALSE\n [3,]    NA    NA    NA    NA FALSE FALSE FALSE    NA FALSE\n [4,]    NA  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n [5,]    NA    NA  TRUE    NA  TRUE FALSE    NA    NA    NA\n [6,]    NA    NA    NA  TRUE  TRUE  TRUE FALSE FALSE FALSE\n [7,] FALSE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE FALSE\n [8,]    NA FALSE FALSE    NA    NA  TRUE  TRUE FALSE    NA\n [9,] FALSE    NA FALSE  TRUE  TRUE    NA FALSE FALSE FALSE\n[10,]  TRUE FALSE    NA  TRUE FALSE    NA    NA FALSE FALSE\n\n, , 5\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n [2,]  TRUE TRUE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,]  TRUE   NA    NA FALSE FALSE    NA  TRUE FALSE    NA\n [4,] FALSE TRUE  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n [5,] FALSE   NA FALSE    NA FALSE  TRUE  TRUE FALSE    NA\n [6,] FALSE TRUE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n [7,]    NA   NA    NA FALSE    NA    NA FALSE FALSE    NA\n [8,]  TRUE   NA  TRUE  TRUE    NA FALSE FALSE    NA  TRUE\n [9,]  TRUE   NA  TRUE    NA    NA FALSE FALSE    NA  TRUE\n[10,]  TRUE TRUE  TRUE    NA    NA    NA FALSE    NA FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9]\n [1,]  TRUE FALSE    NA FALSE  TRUE  TRUE    NA   NA FALSE\n [2,]  TRUE FALSE    NA FALSE    NA  TRUE    NA   NA FALSE\n [3,]    NA    NA  TRUE FALSE FALSE  TRUE    NA   NA FALSE\n [4,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE   NA FALSE\n [5,]    NA FALSE FALSE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [6,]  TRUE FALSE    NA    NA    NA    NA  TRUE   NA  TRUE\n [7,]    NA FALSE    NA FALSE    NA FALSE    NA   NA FALSE\n [8,] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [9,]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA TRUE FALSE\n[10,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE   NA FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n [2,]    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE\n [3,]    NA FALSE    NA FALSE    NA  TRUE FALSE    NA  TRUE\n [4,]  TRUE    NA    NA  TRUE  TRUE FALSE FALSE    NA FALSE\n [5,] FALSE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [6,]    NA  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n [7,]  TRUE FALSE    NA    NA  TRUE    NA FALSE  TRUE  TRUE\n [8,]  TRUE  TRUE FALSE  TRUE FALSE  TRUE    NA    NA FALSE\n [9,] FALSE  TRUE FALSE FALSE    NA FALSE    NA  TRUE FALSE\n[10,]  TRUE    NA  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]    NA FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE    NA\n [2,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA FALSE\n [3,]  TRUE  TRUE FALSE    NA    NA    NA    NA    NA FALSE\n [4,]    NA  TRUE FALSE  TRUE FALSE FALSE    NA  TRUE FALSE\n [5,] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE FALSE FALSE\n [6,]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE    NA FALSE\n [8,] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE    NA\n [9,]    NA FALSE FALSE    NA    NA FALSE  TRUE  TRUE    NA\n[10,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE    NA FALSE"
  },
  {
    "objectID": "man/outer/bc.b.html#broadcasted-boolean-operations",
    "href": "man/outer/bc.b.html#broadcasted-boolean-operations",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.b(x, y, \"&\")\n\n, , 1\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE   NA FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE\n [2,]  TRUE   NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n [3,]    NA   NA    NA  TRUE  TRUE    NA FALSE  TRUE FALSE\n [4,]  TRUE   NA FALSE FALSE FALSE    NA FALSE FALSE FALSE\n [5,] FALSE   NA FALSE    NA FALSE FALSE    NA FALSE    NA\n [6,]  TRUE TRUE    NA    NA  TRUE  TRUE    NA  TRUE  TRUE\n [7,]    NA   NA    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE\n [8,]  TRUE   NA FALSE  TRUE FALSE  TRUE  TRUE    NA  TRUE\n [9,]    NA   NA    NA    NA FALSE    NA  TRUE    NA FALSE\n[10,]  TRUE   NA    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE FALSE    NA  TRUE  TRUE    NA  TRUE\n [2,]    NA FALSE  TRUE    NA    NA  TRUE  TRUE FALSE  TRUE\n [3,] FALSE FALSE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n [4,] FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE    NA\n [5,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n [6,] FALSE    NA  TRUE    NA    NA    NA    NA  TRUE FALSE\n [7,] FALSE FALSE FALSE    NA    NA  TRUE    NA FALSE    NA\n [8,] FALSE    NA    NA    NA  TRUE  TRUE FALSE FALSE    NA\n [9,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n[10,]  TRUE  TRUE    NA  TRUE  TRUE FALSE    NA    NA  TRUE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE\n [2,] FALSE    NA    NA    NA FALSE  TRUE    NA FALSE FALSE\n [3,]  TRUE    NA  TRUE  TRUE FALSE  TRUE    NA  TRUE    NA\n [4,]  TRUE    NA FALSE FALSE    NA FALSE  TRUE    NA FALSE\n [5,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE\n [6,]  TRUE  TRUE    NA FALSE FALSE    NA    NA FALSE  TRUE\n [7,]    NA    NA    NA FALSE    NA  TRUE  TRUE    NA    NA\n [8,]  TRUE FALSE  TRUE  TRUE FALSE    NA    NA FALSE    NA\n [9,] FALSE  TRUE FALSE    NA    NA  TRUE FALSE FALSE FALSE\n[10,]    NA    NA    NA  TRUE FALSE FALSE    NA  TRUE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE FALSE FALSE    NA    NA  TRUE FALSE\n [2,]  TRUE FALSE    NA    NA    NA  TRUE    NA FALSE  TRUE\n [3,]    NA    NA    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n [4,]    NA FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n [5,]    NA    NA FALSE    NA FALSE  TRUE    NA    NA    NA\n [6,]    NA    NA    NA FALSE FALSE FALSE  TRUE  TRUE  TRUE\n [7,]  TRUE FALSE FALSE    NA FALSE  TRUE    NA  TRUE  TRUE\n [8,]    NA  TRUE  TRUE    NA    NA FALSE FALSE  TRUE    NA\n [9,]  TRUE    NA  TRUE FALSE FALSE    NA  TRUE  TRUE  TRUE\n[10,] FALSE  TRUE    NA FALSE  TRUE    NA    NA  TRUE  TRUE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n [2,] FALSE FALSE FALSE    NA FALSE  TRUE    NA FALSE FALSE\n [3,] FALSE    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA\n [4,]  TRUE FALSE FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n [5,]  TRUE    NA  TRUE    NA  TRUE FALSE FALSE  TRUE    NA\n [6,]  TRUE FALSE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n [7,]    NA    NA    NA  TRUE    NA    NA  TRUE  TRUE    NA\n [8,] FALSE    NA FALSE FALSE    NA  TRUE  TRUE    NA FALSE\n [9,] FALSE    NA FALSE    NA    NA  TRUE  TRUE    NA FALSE\n[10,] FALSE FALSE FALSE    NA    NA    NA  TRUE    NA  TRUE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE    NA  TRUE FALSE FALSE    NA    NA  TRUE\n [2,] FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA  TRUE\n [3,]    NA    NA FALSE  TRUE  TRUE FALSE    NA    NA  TRUE\n [4,]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n [5,]    NA  TRUE  TRUE FALSE FALSE FALSE    NA FALSE FALSE\n [6,] FALSE  TRUE    NA    NA    NA    NA FALSE    NA FALSE\n [7,]    NA  TRUE    NA  TRUE    NA  TRUE    NA    NA  TRUE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE    NA FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE  TRUE\n[10,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA  TRUE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE\n [2,]    NA FALSE  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE\n [3,]    NA  TRUE    NA  TRUE    NA FALSE  TRUE    NA FALSE\n [4,] FALSE    NA    NA FALSE FALSE  TRUE  TRUE    NA  TRUE\n [5,]  TRUE FALSE    NA FALSE FALSE FALSE FALSE FALSE FALSE\n [6,]    NA FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n [7,] FALSE  TRUE    NA    NA FALSE    NA  TRUE FALSE FALSE\n [8,] FALSE FALSE  TRUE FALSE  TRUE FALSE    NA    NA  TRUE\n [9,]  TRUE FALSE  TRUE  TRUE    NA  TRUE    NA FALSE  TRUE\n[10,] FALSE    NA FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] [,9]\n [1,]    NA  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE   NA\n [2,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA TRUE\n [3,] FALSE FALSE  TRUE    NA    NA    NA    NA    NA TRUE\n [4,]    NA FALSE  TRUE FALSE  TRUE  TRUE    NA FALSE TRUE\n [5,]  TRUE FALSE FALSE FALSE FALSE    NA  TRUE  TRUE TRUE\n [6,] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE TRUE\n [7,] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE    NA TRUE\n [8,]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE   NA\n [9,]    NA  TRUE  TRUE    NA    NA  TRUE FALSE FALSE   NA\n[10,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE    NA TRUE\n\nbc.b(x, y, \"|\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.b(x, y, \"xor\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA  TRUE FALSE FALSE FALSE    NA  TRUE FALSE\n [2,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n [3,]    NA    NA    NA FALSE FALSE    NA  TRUE FALSE  TRUE\n [4,] FALSE    NA  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE\n [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA  TRUE    NA\n [6,] FALSE FALSE    NA    NA FALSE FALSE    NA FALSE FALSE\n [7,]    NA    NA    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE\n [8,] FALSE    NA  TRUE FALSE  TRUE FALSE FALSE    NA FALSE\n [9,]    NA    NA    NA    NA  TRUE    NA FALSE    NA  TRUE\n[10,] FALSE    NA    NA FALSE  TRUE    NA FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE  TRUE    NA FALSE FALSE    NA FALSE\n [2,]    NA  TRUE FALSE    NA    NA FALSE FALSE  TRUE FALSE\n [3,]  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n [4,]  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE    NA\n [5,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n [6,]  TRUE    NA FALSE    NA    NA    NA    NA FALSE  TRUE\n [7,]  TRUE  TRUE  TRUE    NA    NA FALSE    NA  TRUE    NA\n [8,]  TRUE    NA    NA    NA FALSE FALSE  TRUE  TRUE    NA\n [9,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n[10,] FALSE FALSE    NA FALSE FALSE  TRUE    NA    NA FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE\n [2,]  TRUE    NA    NA    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,] FALSE    NA FALSE FALSE  TRUE FALSE    NA FALSE    NA\n [4,] FALSE    NA  TRUE  TRUE    NA  TRUE FALSE    NA  TRUE\n [5,] FALSE FALSE FALSE FALSE    NA FALSE  TRUE    NA  TRUE\n [6,] FALSE FALSE    NA  TRUE  TRUE    NA    NA  TRUE FALSE\n [7,]    NA    NA    NA  TRUE    NA FALSE FALSE    NA    NA\n [8,] FALSE  TRUE FALSE FALSE  TRUE    NA    NA  TRUE    NA\n [9,]  TRUE FALSE  TRUE    NA    NA FALSE  TRUE  TRUE  TRUE\n[10,]    NA    NA    NA FALSE  TRUE  TRUE    NA FALSE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE  TRUE  TRUE    NA    NA FALSE  TRUE\n [2,] FALSE  TRUE    NA    NA    NA FALSE    NA  TRUE FALSE\n [3,]    NA    NA    NA    NA FALSE FALSE FALSE    NA FALSE\n [4,]    NA  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n [5,]    NA    NA  TRUE    NA  TRUE FALSE    NA    NA    NA\n [6,]    NA    NA    NA  TRUE  TRUE  TRUE FALSE FALSE FALSE\n [7,] FALSE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE FALSE\n [8,]    NA FALSE FALSE    NA    NA  TRUE  TRUE FALSE    NA\n [9,] FALSE    NA FALSE  TRUE  TRUE    NA FALSE FALSE FALSE\n[10,]  TRUE FALSE    NA  TRUE FALSE    NA    NA FALSE FALSE\n\n, , 5\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n [2,]  TRUE TRUE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,]  TRUE   NA    NA FALSE FALSE    NA  TRUE FALSE    NA\n [4,] FALSE TRUE  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n [5,] FALSE   NA FALSE    NA FALSE  TRUE  TRUE FALSE    NA\n [6,] FALSE TRUE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n [7,]    NA   NA    NA FALSE    NA    NA FALSE FALSE    NA\n [8,]  TRUE   NA  TRUE  TRUE    NA FALSE FALSE    NA  TRUE\n [9,]  TRUE   NA  TRUE    NA    NA FALSE FALSE    NA  TRUE\n[10,]  TRUE TRUE  TRUE    NA    NA    NA FALSE    NA FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9]\n [1,]  TRUE FALSE    NA FALSE  TRUE  TRUE    NA   NA FALSE\n [2,]  TRUE FALSE    NA FALSE    NA  TRUE    NA   NA FALSE\n [3,]    NA    NA  TRUE FALSE FALSE  TRUE    NA   NA FALSE\n [4,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE   NA FALSE\n [5,]    NA FALSE FALSE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [6,]  TRUE FALSE    NA    NA    NA    NA  TRUE   NA  TRUE\n [7,]    NA FALSE    NA FALSE    NA FALSE    NA   NA FALSE\n [8,] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [9,]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA TRUE FALSE\n[10,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE   NA FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n [2,]    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE\n [3,]    NA FALSE    NA FALSE    NA  TRUE FALSE    NA  TRUE\n [4,]  TRUE    NA    NA  TRUE  TRUE FALSE FALSE    NA FALSE\n [5,] FALSE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [6,]    NA  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n [7,]  TRUE FALSE    NA    NA  TRUE    NA FALSE  TRUE  TRUE\n [8,]  TRUE  TRUE FALSE  TRUE FALSE  TRUE    NA    NA FALSE\n [9,] FALSE  TRUE FALSE FALSE    NA FALSE    NA  TRUE FALSE\n[10,]  TRUE    NA  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]    NA FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE    NA\n [2,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA FALSE\n [3,]  TRUE  TRUE FALSE    NA    NA    NA    NA    NA FALSE\n [4,]    NA  TRUE FALSE  TRUE FALSE FALSE    NA  TRUE FALSE\n [5,] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE FALSE FALSE\n [6,]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE    NA FALSE\n [8,] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE    NA\n [9,]    NA FALSE FALSE    NA    NA FALSE  TRUE  TRUE    NA\n[10,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE    NA FALSE\n\nbc.b(x, y, \"nand\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.b(x, y, \"==\")\n\n, , 1\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE   NA FALSE  TRUE  TRUE  TRUE    NA FALSE  TRUE\n [2,]  TRUE   NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n [3,]    NA   NA    NA  TRUE  TRUE    NA FALSE  TRUE FALSE\n [4,]  TRUE   NA FALSE FALSE FALSE    NA FALSE FALSE FALSE\n [5,] FALSE   NA FALSE    NA FALSE FALSE    NA FALSE    NA\n [6,]  TRUE TRUE    NA    NA  TRUE  TRUE    NA  TRUE  TRUE\n [7,]    NA   NA    NA FALSE FALSE  TRUE  TRUE FALSE  TRUE\n [8,]  TRUE   NA FALSE  TRUE FALSE  TRUE  TRUE    NA  TRUE\n [9,]    NA   NA    NA    NA FALSE    NA  TRUE    NA FALSE\n[10,]  TRUE   NA    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE FALSE    NA  TRUE  TRUE    NA  TRUE\n [2,]    NA FALSE  TRUE    NA    NA  TRUE  TRUE FALSE  TRUE\n [3,] FALSE FALSE  TRUE FALSE    NA  TRUE FALSE  TRUE FALSE\n [4,] FALSE FALSE FALSE    NA    NA FALSE FALSE FALSE    NA\n [5,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n [6,] FALSE    NA  TRUE    NA    NA    NA    NA  TRUE FALSE\n [7,] FALSE FALSE FALSE    NA    NA  TRUE    NA FALSE    NA\n [8,] FALSE    NA    NA    NA  TRUE  TRUE FALSE FALSE    NA\n [9,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n[10,]  TRUE  TRUE    NA  TRUE  TRUE FALSE    NA    NA  TRUE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE  TRUE  TRUE FALSE    NA  TRUE  TRUE\n [2,] FALSE    NA    NA    NA FALSE  TRUE    NA FALSE FALSE\n [3,]  TRUE    NA  TRUE  TRUE FALSE  TRUE    NA  TRUE    NA\n [4,]  TRUE    NA FALSE FALSE    NA FALSE  TRUE    NA FALSE\n [5,]  TRUE  TRUE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE\n [6,]  TRUE  TRUE    NA FALSE FALSE    NA    NA FALSE  TRUE\n [7,]    NA    NA    NA FALSE    NA  TRUE  TRUE    NA    NA\n [8,]  TRUE FALSE  TRUE  TRUE FALSE    NA    NA FALSE    NA\n [9,] FALSE  TRUE FALSE    NA    NA  TRUE FALSE FALSE FALSE\n[10,]    NA    NA    NA  TRUE FALSE FALSE    NA  TRUE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE FALSE FALSE    NA    NA  TRUE FALSE\n [2,]  TRUE FALSE    NA    NA    NA  TRUE    NA FALSE  TRUE\n [3,]    NA    NA    NA    NA  TRUE  TRUE  TRUE    NA  TRUE\n [4,]    NA FALSE    NA  TRUE  TRUE FALSE    NA    NA FALSE\n [5,]    NA    NA FALSE    NA FALSE  TRUE    NA    NA    NA\n [6,]    NA    NA    NA FALSE FALSE FALSE  TRUE  TRUE  TRUE\n [7,]  TRUE FALSE FALSE    NA FALSE  TRUE    NA  TRUE  TRUE\n [8,]    NA  TRUE  TRUE    NA    NA FALSE FALSE  TRUE    NA\n [9,]  TRUE    NA  TRUE FALSE FALSE    NA  TRUE  TRUE  TRUE\n[10,] FALSE  TRUE    NA FALSE  TRUE    NA    NA  TRUE  TRUE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE    NA\n [2,] FALSE FALSE FALSE    NA FALSE  TRUE    NA FALSE FALSE\n [3,] FALSE    NA    NA  TRUE  TRUE    NA FALSE  TRUE    NA\n [4,]  TRUE FALSE FALSE FALSE    NA FALSE  TRUE  TRUE    NA\n [5,]  TRUE    NA  TRUE    NA  TRUE FALSE FALSE  TRUE    NA\n [6,]  TRUE FALSE    NA FALSE  TRUE  TRUE  TRUE FALSE FALSE\n [7,]    NA    NA    NA  TRUE    NA    NA  TRUE  TRUE    NA\n [8,] FALSE    NA FALSE FALSE    NA  TRUE  TRUE    NA FALSE\n [9,] FALSE    NA FALSE    NA    NA  TRUE  TRUE    NA FALSE\n[10,] FALSE FALSE FALSE    NA    NA    NA  TRUE    NA  TRUE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE    NA  TRUE FALSE FALSE    NA    NA  TRUE\n [2,] FALSE  TRUE    NA  TRUE    NA FALSE    NA    NA  TRUE\n [3,]    NA    NA FALSE  TRUE  TRUE FALSE    NA    NA  TRUE\n [4,]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE    NA  TRUE\n [5,]    NA  TRUE  TRUE FALSE FALSE FALSE    NA FALSE FALSE\n [6,] FALSE  TRUE    NA    NA    NA    NA FALSE    NA FALSE\n [7,]    NA  TRUE    NA  TRUE    NA  TRUE    NA    NA  TRUE\n [8,]  TRUE FALSE FALSE FALSE FALSE FALSE    NA FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE  TRUE FALSE    NA FALSE  TRUE\n[10,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA  TRUE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE\n [2,]    NA FALSE  TRUE    NA FALSE FALSE FALSE  TRUE  TRUE\n [3,]    NA  TRUE    NA  TRUE    NA FALSE  TRUE    NA FALSE\n [4,] FALSE    NA    NA FALSE FALSE  TRUE  TRUE    NA  TRUE\n [5,]  TRUE FALSE    NA FALSE FALSE FALSE FALSE FALSE FALSE\n [6,]    NA FALSE  TRUE    NA FALSE  TRUE  TRUE    NA  TRUE\n [7,] FALSE  TRUE    NA    NA FALSE    NA  TRUE FALSE FALSE\n [8,] FALSE FALSE  TRUE FALSE  TRUE FALSE    NA    NA  TRUE\n [9,]  TRUE FALSE  TRUE  TRUE    NA  TRUE    NA FALSE  TRUE\n[10,] FALSE    NA FALSE  TRUE  TRUE FALSE  TRUE FALSE  TRUE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8] [,9]\n [1,]    NA  TRUE FALSE  TRUE  TRUE FALSE  TRUE FALSE   NA\n [2,]  TRUE FALSE  TRUE  TRUE    NA    NA FALSE    NA TRUE\n [3,] FALSE FALSE  TRUE    NA    NA    NA    NA    NA TRUE\n [4,]    NA FALSE  TRUE FALSE  TRUE  TRUE    NA FALSE TRUE\n [5,]  TRUE FALSE FALSE FALSE FALSE    NA  TRUE  TRUE TRUE\n [6,] FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE TRUE\n [7,] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE    NA TRUE\n [8,]  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE  TRUE   NA\n [9,]    NA  TRUE  TRUE    NA    NA  TRUE FALSE FALSE   NA\n[10,] FALSE  TRUE    NA  TRUE FALSE    NA  TRUE    NA TRUE\n\nbc.b(x, y, \"!=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE    NA  TRUE FALSE FALSE FALSE    NA  TRUE FALSE\n [2,] FALSE    NA FALSE FALSE FALSE  TRUE FALSE  TRUE FALSE\n [3,]    NA    NA    NA FALSE FALSE    NA  TRUE FALSE  TRUE\n [4,] FALSE    NA  TRUE  TRUE  TRUE    NA  TRUE  TRUE  TRUE\n [5,]  TRUE    NA  TRUE    NA  TRUE  TRUE    NA  TRUE    NA\n [6,] FALSE FALSE    NA    NA FALSE FALSE    NA FALSE FALSE\n [7,]    NA    NA    NA  TRUE  TRUE FALSE FALSE  TRUE FALSE\n [8,] FALSE    NA  TRUE FALSE  TRUE FALSE FALSE    NA FALSE\n [9,]    NA    NA    NA    NA  TRUE    NA FALSE    NA  TRUE\n[10,] FALSE    NA    NA FALSE  TRUE    NA FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE FALSE  TRUE  TRUE    NA FALSE FALSE    NA FALSE\n [2,]    NA  TRUE FALSE    NA    NA FALSE FALSE  TRUE FALSE\n [3,]  TRUE  TRUE FALSE  TRUE    NA FALSE  TRUE FALSE  TRUE\n [4,]  TRUE  TRUE  TRUE    NA    NA  TRUE  TRUE  TRUE    NA\n [5,]  TRUE    NA    NA  TRUE FALSE    NA FALSE  TRUE FALSE\n [6,]  TRUE    NA FALSE    NA    NA    NA    NA FALSE  TRUE\n [7,]  TRUE  TRUE  TRUE    NA    NA FALSE    NA  TRUE    NA\n [8,]  TRUE    NA    NA    NA FALSE FALSE  TRUE  TRUE    NA\n [9,] FALSE    NA    NA FALSE  TRUE    NA  TRUE FALSE  TRUE\n[10,] FALSE FALSE    NA FALSE FALSE  TRUE    NA    NA FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE FALSE FALSE  TRUE    NA FALSE FALSE\n [2,]  TRUE    NA    NA    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,] FALSE    NA FALSE FALSE  TRUE FALSE    NA FALSE    NA\n [4,] FALSE    NA  TRUE  TRUE    NA  TRUE FALSE    NA  TRUE\n [5,] FALSE FALSE FALSE FALSE    NA FALSE  TRUE    NA  TRUE\n [6,] FALSE FALSE    NA  TRUE  TRUE    NA    NA  TRUE FALSE\n [7,]    NA    NA    NA  TRUE    NA FALSE FALSE    NA    NA\n [8,] FALSE  TRUE FALSE FALSE  TRUE    NA    NA  TRUE    NA\n [9,]  TRUE FALSE  TRUE    NA    NA FALSE  TRUE  TRUE  TRUE\n[10,]    NA    NA    NA FALSE  TRUE  TRUE    NA FALSE    NA\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE  TRUE FALSE  TRUE  TRUE    NA    NA FALSE  TRUE\n [2,] FALSE  TRUE    NA    NA    NA FALSE    NA  TRUE FALSE\n [3,]    NA    NA    NA    NA FALSE FALSE FALSE    NA FALSE\n [4,]    NA  TRUE    NA FALSE FALSE  TRUE    NA    NA  TRUE\n [5,]    NA    NA  TRUE    NA  TRUE FALSE    NA    NA    NA\n [6,]    NA    NA    NA  TRUE  TRUE  TRUE FALSE FALSE FALSE\n [7,] FALSE  TRUE  TRUE    NA  TRUE FALSE    NA FALSE FALSE\n [8,]    NA FALSE FALSE    NA    NA  TRUE  TRUE FALSE    NA\n [9,] FALSE    NA FALSE  TRUE  TRUE    NA FALSE FALSE FALSE\n[10,]  TRUE FALSE    NA  TRUE FALSE    NA    NA FALSE FALSE\n\n, , 5\n\n       [,1] [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE    NA\n [2,]  TRUE TRUE  TRUE    NA  TRUE FALSE    NA  TRUE  TRUE\n [3,]  TRUE   NA    NA FALSE FALSE    NA  TRUE FALSE    NA\n [4,] FALSE TRUE  TRUE  TRUE    NA  TRUE FALSE FALSE    NA\n [5,] FALSE   NA FALSE    NA FALSE  TRUE  TRUE FALSE    NA\n [6,] FALSE TRUE    NA  TRUE FALSE FALSE FALSE  TRUE  TRUE\n [7,]    NA   NA    NA FALSE    NA    NA FALSE FALSE    NA\n [8,]  TRUE   NA  TRUE  TRUE    NA FALSE FALSE    NA  TRUE\n [9,]  TRUE   NA  TRUE    NA    NA FALSE FALSE    NA  TRUE\n[10,]  TRUE TRUE  TRUE    NA    NA    NA FALSE    NA FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7] [,8]  [,9]\n [1,]  TRUE FALSE    NA FALSE  TRUE  TRUE    NA   NA FALSE\n [2,]  TRUE FALSE    NA FALSE    NA  TRUE    NA   NA FALSE\n [3,]    NA    NA  TRUE FALSE FALSE  TRUE    NA   NA FALSE\n [4,] FALSE FALSE FALSE  TRUE FALSE FALSE FALSE   NA FALSE\n [5,]    NA FALSE FALSE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [6,]  TRUE FALSE    NA    NA    NA    NA  TRUE   NA  TRUE\n [7,]    NA FALSE    NA FALSE    NA FALSE    NA   NA FALSE\n [8,] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE    NA TRUE  TRUE\n [9,]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE    NA TRUE FALSE\n[10,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE   NA FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  TRUE    NA  TRUE  TRUE  TRUE FALSE  TRUE FALSE FALSE\n [2,]    NA  TRUE FALSE    NA  TRUE  TRUE  TRUE FALSE FALSE\n [3,]    NA FALSE    NA FALSE    NA  TRUE FALSE    NA  TRUE\n [4,]  TRUE    NA    NA  TRUE  TRUE FALSE FALSE    NA FALSE\n [5,] FALSE  TRUE    NA  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE\n [6,]    NA  TRUE FALSE    NA  TRUE FALSE FALSE    NA FALSE\n [7,]  TRUE FALSE    NA    NA  TRUE    NA FALSE  TRUE  TRUE\n [8,]  TRUE  TRUE FALSE  TRUE FALSE  TRUE    NA    NA FALSE\n [9,] FALSE  TRUE FALSE FALSE    NA FALSE    NA  TRUE FALSE\n[10,]  TRUE    NA  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]    NA FALSE  TRUE FALSE FALSE  TRUE FALSE  TRUE    NA\n [2,] FALSE  TRUE FALSE FALSE    NA    NA  TRUE    NA FALSE\n [3,]  TRUE  TRUE FALSE    NA    NA    NA    NA    NA FALSE\n [4,]    NA  TRUE FALSE  TRUE FALSE FALSE    NA  TRUE FALSE\n [5,] FALSE  TRUE  TRUE  TRUE  TRUE    NA FALSE FALSE FALSE\n [6,]  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,]  TRUE FALSE  TRUE  TRUE  TRUE  TRUE FALSE    NA FALSE\n [8,] FALSE FALSE FALSE  TRUE FALSE  TRUE  TRUE FALSE    NA\n [9,]    NA FALSE FALSE    NA    NA FALSE  TRUE  TRUE    NA\n[10,]  TRUE FALSE    NA FALSE  TRUE    NA FALSE    NA FALSE"
  },
  {
    "objectID": "man/outer/bc.d.html",
    "href": "man/outer/bc.d.html",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.d(x, y, \"+\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]   [,8]  [,9]\n [1,] 522.1 699.1 493.1 788.1 816.1 382.1 707.1  385.1 179.1\n [2,] 812.1 886.1 793.1  64.1 104.1 501.1 184.1  790.1 915.1\n [3,] 667.1 404.1 285.1 380.1 147.1 523.1 573.1   87.1 483.1\n [4,] 654.1 946.1 443.1 575.1 541.1 406.1 297.1  880.1 978.1\n [5,]  72.1 691.1 459.1 710.1 204.1 731.1  96.1 1002.1 351.1\n [6,] 136.1 391.1 828.1 911.1 699.1 417.1 202.1  922.1 386.1\n [7,] 265.1 897.1 519.1 712.1 820.1 416.1 184.1  779.1 398.1\n [8,]  20.1 291.1 283.1 914.1 678.1 234.1 766.1  254.1 484.1\n [9,] 579.1 294.1 282.1 785.1 703.1 377.1 924.1  603.1 240.1\n[10,] 444.1 826.1 943.1 780.1 129.1 772.1 498.1   42.1 477.1\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 966.1  46.1 178.1 122.1 982.1 696.1 439.1 678.1 935.1\n [2,] 486.1 191.1  92.1 193.1 539.1 428.1 624.1 374.1 378.1\n [3,] 946.1 161.1 975.1 108.1 748.1 899.1 255.1 341.1 387.1\n [4,] 806.1 991.1 481.1  86.1 791.1 326.1  88.1 177.1 105.1\n [5,] 440.1 302.1 986.1 213.1  33.1 504.1 668.1  42.1 832.1\n [6,] 811.1 510.1 241.1 612.1 962.1  34.1  81.1 608.1 834.1\n [7,] 961.1 414.1 401.1  68.1 800.1 319.1 115.1 843.1 529.1\n [8,] 323.1 312.1 659.1 870.1 866.1 239.1 992.1 824.1 116.1\n [9,] 308.1 417.1 407.1 587.1 389.1 375.1 269.1 638.1 413.1\n[10,] 782.1 526.1 129.1 836.1 958.1 655.1 847.1 247.1 802.1\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 975.1 273.1  19.1 514.1 315.1 547.1 293.1 434.1 183.1\n [2,] 177.1 698.1 689.1 589.1 489.1 168.1 900.1 185.1 945.1\n [3,] 868.1 964.1 565.1 540.1 860.1 447.1 712.1 784.1 122.1\n [4,] 313.1 617.1 966.1 615.1 436.1 597.1 910.1 807.1 557.1\n [5,] 118.1 670.1 379.1 358.1 633.1 621.1 142.1 667.1 851.1\n [6,] 987.1 333.1 309.1 561.1 141.1 177.1 903.1 272.1 321.1\n [7,] 288.1 892.1  55.1  58.1 755.1 107.1 626.1 715.1 836.1\n [8,]  35.1 371.1 808.1 688.1 840.1 739.1 501.1 826.1 180.1\n [9,] 661.1 706.1 290.1 401.1 981.1 840.1 485.1 666.1  59.1\n[10,] 427.1 463.1 120.1 236.1 841.1 182.1 123.1 442.1 727.1\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 160.1 503.1 761.1 239.1 275.1  65.1 571.1 185.1 136.1\n [2,] 526.1  33.1 128.1 980.1 920.1 266.1 130.1 467.1 356.1\n [3,] 833.1 743.1 907.1 361.1 705.1 815.1 151.1 452.1 377.1\n [4,] 817.1 593.1  98.1 949.1 429.1 673.1 830.1 705.1 845.1\n [5,] 124.1 517.1  67.1 107.1 156.1 456.1 701.1 304.1 792.1\n [6,] 584.1 317.1  10.1 847.1 580.1 675.1  52.1 213.1 920.1\n [7,] 549.1 126.1  21.1 704.1 208.1 678.1 512.1 887.1 871.1\n [8,] 805.1 748.1 843.1 981.1 163.1 292.1 673.1 481.1 109.1\n [9,] 911.1 973.1  20.1 383.1 175.1 750.1 211.1 373.1 159.1\n[10,]  95.1 277.1 425.1 688.1 104.1 656.1 214.1 992.1  59.1\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  87.1 118.1 680.1 936.1 761.1 910.1 503.1 272.1 347.1\n [2,]   5.1 155.1 664.1 687.1 424.1 425.1 789.1 775.1  38.1\n [3,] 292.1 298.1  99.1 344.1 112.1 582.1 591.1 779.1 359.1\n [4,] 335.1 297.1 128.1 118.1 370.1 750.1 239.1 363.1 333.1\n [5,]  48.1 643.1 236.1 818.1 470.1 739.1 837.1 183.1 132.1\n [6,] 984.1 279.1 172.1 418.1 524.1 849.1 334.1 936.1 131.1\n [7,] 434.1 456.1 789.1 803.1 910.1 868.1 722.1 432.1 996.1\n [8,] 216.1 604.1 102.1  73.1 184.1 129.1 649.1 685.1 656.1\n [9,] 620.1 478.1 401.1 211.1 624.1 729.1 556.1 981.1 191.1\n[10,] 825.1 438.1 986.1 684.1 148.1 300.1 597.1 686.1 685.1\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 334.1 217.1 208.1 555.1 618.1 295.1 140.1 657.1 699.1\n [2,] 857.1 755.1  38.1 199.1 783.1  98.1 492.1 368.1 741.1\n [3,] 379.1 904.1 136.1 746.1 572.1 197.1 702.1  81.1 797.1\n [4,] 651.1 821.1 634.1 741.1 998.1 874.1 317.1 544.1  33.1\n [5,] 315.1 130.1 762.1 751.1 477.1 399.1 934.1 508.1 601.1\n [6,] 251.1 324.1 285.1 428.1 849.1 798.1 208.1 622.1 141.1\n [7,] 511.1 827.1 331.1 437.1 797.1 519.1  30.1 148.1 400.1\n [8,] 972.1 517.1 156.1 400.1 926.1 672.1 725.1 183.1 333.1\n [9,] 326.1 210.1  94.1 255.1 895.1 338.1 628.1 116.1 450.1\n[10,] 789.1 316.1 811.1 251.1  18.1 337.1 743.1 692.1  94.1\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 398.1 772.1 624.1  93.1 153.1  77.1 661.1 618.1 864.1\n [2,] 391.1 484.1  94.1 575.1 998.1 252.1 274.1  75.1 328.1\n [3,] 917.1 478.1 755.1 741.1 375.1 383.1 331.1 947.1 578.1\n [4,] 909.1 664.1 738.1 170.1 258.1 460.1 978.1 423.1 669.1\n [5,] 980.1 138.1 370.1 584.1 263.1 324.1 459.1 348.1 561.1\n [6,] 407.1 450.1 768.1 613.1 976.1 127.1 228.1 782.1 472.1\n [7,] 467.1 192.1 993.1 286.1 937.1 460.1 301.1 321.1 861.1\n [8,] 285.1 130.1 436.1 582.1 864.1 755.1 364.1 880.1  98.1\n [9,] 972.1 727.1 686.1 476.1 218.1 453.1 831.1 237.1 408.1\n[10,] 363.1 441.1 248.1  62.1 804.1 283.1 939.1 613.1 886.1\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 675.1 838.1 897.1 711.1 189.1 532.1 458.1 706.1 855.1\n [2,] 517.1 571.1 260.1 764.1 608.1 828.1  58.1 502.1 407.1\n [3,] 694.1 833.1 221.1 317.1 743.1 678.1 923.1  55.1 523.1\n [4,] 846.1 275.1 263.1 190.1  85.1 359.1 934.1 912.1 615.1\n [5,] 289.1 876.1 667.1 432.1 658.1 843.1 910.1 686.1 908.1\n [6,] 375.1 623.1 780.1 838.1 157.1 203.1 195.1 228.1 573.1\n [7,]  93.1 729.1 440.1 380.1 828.1 384.1 912.1  57.1 586.1\n [8,] 266.1 748.1 421.1 304.1 471.1 378.1 961.1 945.1 364.1\n [9,]  80.1 841.1  72.1 775.1 506.1 842.1 109.1 670.1 247.1\n[10,]    NA 442.1  39.1 166.1 209.1 108.1  70.1 376.1 800.1\n\nbc.d(x, y, \"-\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 520.1 697.1 491.1 786.1 814.1 380.1 705.1 383.1 177.1\n [2,] 808.1 882.1 789.1  60.1 100.1 497.1 180.1 786.1 911.1\n [3,] 661.1 398.1 279.1 374.1 141.1 517.1 567.1  81.1 477.1\n [4,] 646.1 938.1 435.1 567.1 533.1 398.1 289.1 872.1 970.1\n [5,]  62.1 681.1 449.1 700.1 194.1 721.1  86.1 992.1 341.1\n [6,] 124.1 379.1 816.1 899.1 687.1 405.1 190.1 910.1 374.1\n [7,] 251.1 883.1 505.1 698.1 806.1 402.1 170.1 765.1 384.1\n [8,]   4.1 275.1 267.1 898.1 662.1 218.1 750.1 238.1 468.1\n [9,] 561.1 276.1 264.1 767.1 685.1 359.1 906.1 585.1 222.1\n[10,] 424.1 806.1 923.1 760.1 109.1 752.1 478.1  22.1 457.1\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 964.1  44.1 176.1 120.1 980.1 694.1 437.1 676.1 933.1\n [2,] 482.1 187.1  88.1 189.1 535.1 424.1 620.1 370.1 374.1\n [3,] 940.1 155.1 969.1 102.1 742.1 893.1 249.1 335.1 381.1\n [4,] 798.1 983.1 473.1  78.1 783.1 318.1  80.1 169.1  97.1\n [5,] 430.1 292.1 976.1 203.1  23.1 494.1 658.1  32.1 822.1\n [6,] 799.1 498.1 229.1 600.1 950.1  22.1  69.1 596.1 822.1\n [7,] 947.1 400.1 387.1  54.1 786.1 305.1 101.1 829.1 515.1\n [8,] 307.1 296.1 643.1 854.1 850.1 223.1 976.1 808.1 100.1\n [9,] 290.1 399.1 389.1 569.1 371.1 357.1 251.1 620.1 395.1\n[10,] 762.1 506.1 109.1 816.1 938.1 635.1 827.1 227.1 782.1\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 973.1 271.1  17.1 512.1 313.1 545.1 291.1 432.1 181.1\n [2,] 173.1 694.1 685.1 585.1 485.1 164.1 896.1 181.1 941.1\n [3,] 862.1 958.1 559.1 534.1 854.1 441.1 706.1 778.1 116.1\n [4,] 305.1 609.1 958.1 607.1 428.1 589.1 902.1 799.1 549.1\n [5,] 108.1 660.1 369.1 348.1 623.1 611.1 132.1 657.1 841.1\n [6,] 975.1 321.1 297.1 549.1 129.1 165.1 891.1 260.1 309.1\n [7,] 274.1 878.1  41.1  44.1 741.1  93.1 612.1 701.1 822.1\n [8,]  19.1 355.1 792.1 672.1 824.1 723.1 485.1 810.1 164.1\n [9,] 643.1 688.1 272.1 383.1 963.1 822.1 467.1 648.1  41.1\n[10,] 407.1 443.1 100.1 216.1 821.1 162.1 103.1 422.1 707.1\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 158.1 501.1 759.1 237.1 273.1  63.1 569.1 183.1 134.1\n [2,] 522.1  29.1 124.1 976.1 916.1 262.1 126.1 463.1 352.1\n [3,] 827.1 737.1 901.1 355.1 699.1 809.1 145.1 446.1 371.1\n [4,] 809.1 585.1  90.1 941.1 421.1 665.1 822.1 697.1 837.1\n [5,] 114.1 507.1  57.1  97.1 146.1 446.1 691.1 294.1 782.1\n [6,] 572.1 305.1  -1.9 835.1 568.1 663.1  40.1 201.1 908.1\n [7,] 535.1 112.1   7.1 690.1 194.1 664.1 498.1 873.1 857.1\n [8,] 789.1 732.1 827.1 965.1 147.1 276.1 657.1 465.1  93.1\n [9,] 893.1 955.1   2.1 365.1 157.1 732.1 193.1 355.1 141.1\n[10,]  75.1 257.1 405.1 668.1  84.1 636.1 194.1 972.1  39.1\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  85.1 116.1 678.1 934.1 759.1 908.1 501.1 270.1 345.1\n [2,]   1.1 151.1 660.1 683.1 420.1 421.1 785.1 771.1  34.1\n [3,] 286.1 292.1  93.1 338.1 106.1 576.1 585.1 773.1 353.1\n [4,] 327.1 289.1 120.1 110.1 362.1 742.1 231.1 355.1 325.1\n [5,]  38.1 633.1 226.1 808.1 460.1 729.1 827.1 173.1 122.1\n [6,] 972.1 267.1 160.1 406.1 512.1 837.1 322.1 924.1 119.1\n [7,] 420.1 442.1 775.1 789.1 896.1 854.1 708.1 418.1 982.1\n [8,] 200.1 588.1  86.1  57.1 168.1 113.1 633.1 669.1 640.1\n [9,] 602.1 460.1 383.1 193.1 606.1 711.1 538.1 963.1 173.1\n[10,] 805.1 418.1 966.1 664.1 128.1 280.1 577.1 666.1 665.1\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 332.1 215.1 206.1 553.1 616.1 293.1 138.1 655.1 697.1\n [2,] 853.1 751.1  34.1 195.1 779.1  94.1 488.1 364.1 737.1\n [3,] 373.1 898.1 130.1 740.1 566.1 191.1 696.1  75.1 791.1\n [4,] 643.1 813.1 626.1 733.1 990.1 866.1 309.1 536.1  25.1\n [5,] 305.1 120.1 752.1 741.1 467.1 389.1 924.1 498.1 591.1\n [6,] 239.1 312.1 273.1 416.1 837.1 786.1 196.1 610.1 129.1\n [7,] 497.1 813.1 317.1 423.1 783.1 505.1  16.1 134.1 386.1\n [8,] 956.1 501.1 140.1 384.1 910.1 656.1 709.1 167.1 317.1\n [9,] 308.1 192.1  76.1 237.1 877.1 320.1 610.1  98.1 432.1\n[10,] 769.1 296.1 791.1 231.1  -1.9 317.1 723.1 672.1  74.1\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 396.1 770.1 622.1  91.1 151.1  75.1 659.1 616.1 862.1\n [2,] 387.1 480.1  90.1 571.1 994.1 248.1 270.1  71.1 324.1\n [3,] 911.1 472.1 749.1 735.1 369.1 377.1 325.1 941.1 572.1\n [4,] 901.1 656.1 730.1 162.1 250.1 452.1 970.1 415.1 661.1\n [5,] 970.1 128.1 360.1 574.1 253.1 314.1 449.1 338.1 551.1\n [6,] 395.1 438.1 756.1 601.1 964.1 115.1 216.1 770.1 460.1\n [7,] 453.1 178.1 979.1 272.1 923.1 446.1 287.1 307.1 847.1\n [8,] 269.1 114.1 420.1 566.1 848.1 739.1 348.1 864.1  82.1\n [9,] 954.1 709.1 668.1 458.1 200.1 435.1 813.1 219.1 390.1\n[10,] 343.1 421.1 228.1  42.1 784.1 263.1 919.1 593.1 866.1\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 673.1 836.1 895.1 709.1 187.1 530.1 456.1 704.1 853.1\n [2,] 513.1 567.1 256.1 760.1 604.1 824.1  54.1 498.1 403.1\n [3,] 688.1 827.1 215.1 311.1 737.1 672.1 917.1  49.1 517.1\n [4,] 838.1 267.1 255.1 182.1  77.1 351.1 926.1 904.1 607.1\n [5,] 279.1 866.1 657.1 422.1 648.1 833.1 900.1 676.1 898.1\n [6,] 363.1 611.1 768.1 826.1 145.1 191.1 183.1 216.1 561.1\n [7,]  79.1 715.1 426.1 366.1 814.1 370.1 898.1  43.1 572.1\n [8,] 250.1 732.1 405.1 288.1 455.1 362.1 945.1 929.1 348.1\n [9,]  62.1 823.1  54.1 757.1 488.1 824.1  91.1 652.1 229.1\n[10,]    NA 422.1  19.1 146.1 189.1  88.1  50.1 356.1 780.1\n\nbc.d(x, y, \"*\")\n\n, , 1\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  521.1  698.1  492.1  787.1  815.1  381.1  706.1  384.1  178.1\n [2,] 1620.2 1768.2 1582.2  124.2  204.2  998.2  364.2 1576.2 1826.2\n [3,] 1992.3 1203.3  846.3 1131.3  432.3 1560.3 1710.3  252.3 1440.3\n [4,] 2600.4 3768.4 1756.4 2284.4 2148.4 1608.4 1172.4 3504.4 3896.4\n [5,]  335.5 3430.5 2270.5 3525.5  995.5 3630.5  455.5 4985.5 1730.5\n [6,]  780.6 2310.6 4932.6 5430.6 4158.6 2466.6 1176.6 5496.6 2280.6\n [7,] 1806.7 6230.7 3584.7 4935.7 5691.7 2863.7 1239.7 5404.7 2737.7\n [8,]   96.8 2264.8 2200.8 7248.8 5360.8 1808.8 6064.8 1968.8 3808.8\n [9,] 5130.9 2565.9 2457.9 6984.9 6246.9 3312.9 8235.9 5346.9 2079.9\n[10,] 4341.0 8161.0 9331.0 7701.0 1191.0 7621.0 4881.0  321.0 4671.0\n\n, , 2\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  965.1   45.1  177.1  121.1  981.1  695.1  438.1  677.1  934.1\n [2,]  968.2  378.2  180.2  382.2 1074.2  852.2 1244.2  744.2  752.2\n [3,] 2829.3  474.3 2916.3  315.3 2235.3 2688.3  756.3 1014.3 1152.3\n [4,] 3208.4 3948.4 1908.4  328.4 3148.4 1288.4  336.4  692.4  404.4\n [5,] 2175.5 1485.5 4905.5 1040.5  140.5 2495.5 3315.5  185.5 4135.5\n [6,] 4830.6 3024.6 1410.6 3636.6 5736.6  168.6  450.6 3612.6 4968.6\n [7,] 6678.7 2849.7 2758.7  427.7 5551.7 2184.7  756.7 5852.7 3654.7\n [8,] 2520.8 2432.8 5208.8 6896.8 6864.8 1848.8 7872.8 6528.8  864.8\n [9,] 2691.9 3672.9 3582.9 5202.9 3420.9 3294.9 2340.9 5661.9 3636.9\n[10,] 7721.0 5161.0 1191.0 8261.0 9481.0 6451.0 8371.0 2371.0 7921.0\n\n, , 3\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  974.1  272.1   18.1  513.1  314.1  546.1  292.1  433.1  182.1\n [2,]  350.2 1392.2 1374.2 1174.2  974.2  332.2 1796.2  366.2 1886.2\n [3,] 2595.3 2883.3 1686.3 1611.3 2571.3 1332.3 2127.3 2343.3  357.3\n [4,] 1236.4 2452.4 3848.4 2444.4 1728.4 2372.4 3624.4 3212.4 2212.4\n [5,]  565.5 3325.5 1870.5 1765.5 3140.5 3080.5  685.5 3310.5 4230.5\n [6,] 5886.6 1962.6 1818.6 3330.6  810.6 1026.6 5382.6 1596.6 1890.6\n [7,] 1967.7 6195.7  336.7  357.7 5236.7  700.7 4333.7 4956.7 5803.7\n [8,]  216.8 2904.8 6400.8 5440.8 6656.8 5848.8 3944.8 6544.8 1376.8\n [9,] 5868.9 6273.9 2529.9 3528.9 8748.9 7479.9 4284.9 5913.9  450.9\n[10,] 4171.0 4531.0 1101.0 2261.0 8311.0 1721.0 1131.0 4321.0 7171.0\n\n, , 4\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  159.1  502.1  760.1  238.1  274.1   64.1  570.1  184.1  135.1\n [2,] 1048.2   62.2  252.2 1956.2 1836.2  528.2  256.2  930.2  708.2\n [3,] 2490.3 2220.3 2712.3 1074.3 2106.3 2436.3  444.3 1347.3 1122.3\n [4,] 3252.4 2356.4  376.4 3780.4 1700.4 2676.4 3304.4 2804.4 3364.4\n [5,]  595.5 2560.5  310.5  510.5  755.5 2255.5 3480.5 1495.5 3935.5\n [6,] 3468.6 1866.6   24.6 5046.6 3444.6 4014.6  276.6 1242.6 5484.6\n [7,] 3794.7  833.7   98.7 4879.7 1407.7 4697.7 3535.7 6160.7 6048.7\n [8,] 6376.8 5920.8 6680.8 7784.8 1240.8 2272.8 5320.8 3784.8  808.8\n [9,] 8118.9 8676.9   99.9 3366.9 1494.9 6669.9 1818.9 3276.9 1350.9\n[10,]  851.0 2671.0 4151.0 6781.0  941.0 6461.0 2041.0 9821.0  491.0\n\n, , 5\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]   86.1  117.1  679.1  935.1  760.1  909.1  502.1  271.1  346.1\n [2,]    6.2  306.2 1324.2 1370.2  844.2  846.2 1574.2 1546.2   72.2\n [3,]  867.3  885.3  288.3 1023.3  327.3 1737.3 1764.3 2328.3 1068.3\n [4,] 1324.4 1172.4  496.4  456.4 1464.4 2984.4  940.4 1436.4 1316.4\n [5,]  215.5 3190.5 1155.5 4065.5 2325.5 3670.5 4160.5  890.5  635.5\n [6,] 5868.6 1638.6  996.6 2472.6 3108.6 5058.6 1968.6 5580.6  750.6\n [7,] 2989.7 3143.7 5474.7 5572.7 6321.7 6027.7 5005.7 2975.7 6923.7\n [8,] 1664.8 4768.8  752.8  520.8 1408.8  968.8 5128.8 5416.8 5184.8\n [9,] 5499.9 4221.9 3528.9 1818.9 5535.9 6480.9 4923.9 8748.9 1638.9\n[10,] 8151.0 4281.0 9761.0 6741.0 1381.0 2901.0 5871.0 6761.0 6751.0\n\n, , 6\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  333.1  216.1  207.1  554.1  617.1  294.1  139.1  656.1  698.1\n [2,] 1710.2 1506.2   72.2  394.2 1562.2  192.2  980.2  732.2 1478.2\n [3,] 1128.3 2703.3  399.3 2229.3 1707.3  582.3 2097.3  234.3 2382.3\n [4,] 2588.4 3268.4 2520.4 2948.4 3976.4 3480.4 1252.4 2160.4  116.4\n [5,] 1550.5  625.5 3785.5 3730.5 2360.5 1970.5 4645.5 2515.5 2980.5\n [6,] 1470.6 1908.6 1674.6 2532.6 5058.6 4752.6 1212.6 3696.6  810.6\n [7,] 3528.7 5740.7 2268.7 3010.7 5530.7 3584.7  161.7  987.7 2751.7\n [8,] 7712.8 4072.8 1184.8 3136.8 7344.8 5312.8 5736.8 1400.8 2600.8\n [9,] 2853.9 1809.9  765.9 2214.9 7974.9 2961.9 5571.9  963.9 3969.9\n[10,] 7791.0 3061.0 8011.0 2411.0   81.0 3271.0 7331.0 6821.0  841.0\n\n, , 7\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  397.1  771.1  623.1   92.1  152.1   76.1  660.1  617.1  863.1\n [2,]  778.2  964.2  184.2 1146.2 1992.2  500.2  544.2  146.2  652.2\n [3,] 2742.3 1425.3 2256.3 2214.3 1116.3 1140.3  984.3 2832.3 1725.3\n [4,] 3620.4 2640.4 2936.4  664.4 1016.4 1824.4 3896.4 1676.4 2660.4\n [5,] 4875.5  665.5 1825.5 2895.5 1290.5 1595.5 2270.5 1715.5 2780.5\n [6,] 2406.6 2664.6 4572.6 3642.6 5820.6  726.6 1332.6 4656.6 2796.6\n [7,] 3220.7 1295.7 6902.7 1953.7 6510.7 3171.7 2058.7 2198.7 5978.7\n [8,] 2216.8  976.8 3424.8 4592.8 6848.8 5976.8 2848.8 6976.8  720.8\n [9,] 8667.9 6462.9 6093.9 4203.9 1881.9 3996.9 7398.9 2052.9 3591.9\n[10,] 3531.0 4311.0 2381.0  521.0 7941.0 2731.0 9291.0 6031.0 8761.0\n\n, , 8\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  674.1  837.1  896.1  710.1  188.1  531.1  457.1  705.1  854.1\n [2,] 1030.2 1138.2  516.2 1524.2 1212.2 1652.2  112.2 1000.2  810.2\n [3,] 2073.3 2490.3  654.3  942.3 2220.3 2025.3 2760.3  156.3 1560.3\n [4,] 3368.4 1084.4 1036.4  744.4  324.4 1420.4 3720.4 3632.4 2444.4\n [5,] 1420.5 4355.5 3310.5 2135.5 3265.5 4190.5 4525.5 3405.5 4515.5\n [6,] 2214.6 3702.6 4644.6 4992.6  906.6 1182.6 1134.6 1332.6 3402.6\n [7,]  602.7 5054.7 3031.7 2611.7 5747.7 2639.7 6335.7  350.7 4053.7\n [8,] 2064.8 5920.8 3304.8 2368.8 3704.8 2960.8 7624.8 7496.8 2848.8\n [9,]  639.9 7488.9  567.9 6894.9 4473.9 7497.9  900.9 5949.9 2142.9\n[10,]     NA 4321.0  291.0 1561.0 1991.0  981.0  601.0 3661.0 7901.0\n\nbc.d(x, y, \"/\")\n\n, , 1\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 521.10000 698.10000 492.10000 787.10000 815.10000 381.10000 706.10000\n [2,] 405.05000 442.05000 395.55000  31.05000  51.05000 249.55000  91.05000\n [3,] 221.36667 133.70000  94.03333 125.70000  48.03333 173.36667 190.03333\n [4,] 162.52500 235.52500 109.77500 142.77500 134.27500 100.52500  73.27500\n [5,]  13.42000 137.22000  90.82000 141.02000  39.82000 145.22000  18.22000\n [6,]  21.68333  64.18333 137.01667 150.85000 115.51667  68.51667  32.68333\n [7,]  36.87143 127.15714  73.15714 100.72857 116.15714  58.44286  25.30000\n [8,]   1.51250  35.38750  34.38750 113.26250  83.76250  28.26250  94.76250\n [9,]  63.34444  31.67778  30.34444  86.23333  77.12222  40.90000 101.67778\n[10,]  43.41000  81.61000  93.31000  77.01000  11.91000  76.21000  48.81000\n           [,8]      [,9]\n [1,] 384.10000 178.10000\n [2,] 394.05000 456.55000\n [3,]  28.03333 160.03333\n [4,] 219.02500 243.52500\n [5,] 199.42000  69.22000\n [6,] 152.68333  63.35000\n [7,] 110.30000  55.87143\n [8,]  30.76250  59.51250\n [9,]  66.01111  25.67778\n[10,]   3.21000  46.71000\n\n, , 2\n\n           [,1]      [,2]      [,3]       [,4]      [,5]       [,6]      [,7]\n [1,] 965.10000  45.10000 177.10000 121.100000 981.10000 695.100000 438.10000\n [2,] 242.05000  94.55000  45.05000  95.550000 268.55000 213.050000 311.05000\n [3,] 314.36667  52.70000 324.03333  35.033333 248.36667 298.700000  84.03333\n [4,] 200.52500 246.77500 119.27500  20.525000 196.77500  80.525000  21.02500\n [5,]  87.02000  59.42000 196.22000  41.620000   5.62000  99.820000 132.62000\n [6,] 134.18333  84.01667  39.18333 101.016667 159.35000   4.683333  12.51667\n [7,] 136.30000  58.15714  56.30000   8.728571 113.30000  44.585714  15.44286\n [8,]  39.38750  38.01250  81.38750 107.762500 107.26250  28.887500 123.01250\n [9,]  33.23333  45.34444  44.23333  64.233333  42.23333  40.677778  28.90000\n[10,]  77.21000  51.61000  11.91000  82.610000  94.81000  64.510000  83.71000\n          [,8]      [,9]\n [1,] 677.1000 934.10000\n [2,] 186.0500 188.05000\n [3,] 112.7000 128.03333\n [4,]  43.2750  25.27500\n [5,]   7.4200 165.42000\n [6,] 100.3500 138.01667\n [7,] 119.4429  74.58571\n [8,] 102.0125  13.51250\n [9,]  69.9000  44.90000\n[10,]  23.7100  79.21000\n\n, , 3\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 974.10000 272.10000  18.100000 513.10000 314.10000 546.10000 292.10000\n [2,]  87.55000 348.05000 343.550000 293.55000 243.55000  83.05000 449.05000\n [3,] 288.36667 320.36667 187.366667 179.03333 285.70000 148.03333 236.36667\n [4,]  77.27500 153.27500 240.525000 152.77500 108.02500 148.27500 226.52500\n [5,]  22.62000 133.02000  74.820000  70.62000 125.62000 123.22000  27.42000\n [6,] 163.51667  54.51667  50.516667  92.51667  22.51667  28.51667 149.51667\n [7,]  40.15714 126.44286   6.871429   7.30000 106.87143  14.30000  88.44286\n [8,]   3.38750  45.38750 100.012500  85.01250 104.01250  91.38750  61.63750\n [9,]  72.45556  77.45556  31.233333  43.56667 108.01111  92.34444  52.90000\n[10,]  41.71000  45.31000  11.010000  22.61000  83.11000  17.21000  11.31000\n           [,8]       [,9]\n [1,] 433.10000 182.100000\n [2,]  91.55000 471.550000\n [3,] 260.36667  39.700000\n [4,] 200.77500 138.275000\n [5,] 132.42000 169.220000\n [6,]  44.35000  52.516667\n [7,] 101.15714 118.442857\n [8,] 102.26250  21.512500\n [9,]  73.01111   5.566667\n[10,]  43.21000  71.710000\n\n, , 4\n\n           [,1]      [,2]        [,3]      [,4]      [,5]      [,6]       [,7]\n [1,] 159.10000 502.10000 760.1000000 238.10000 274.10000  64.10000 570.100000\n [2,] 262.05000  15.55000  63.0500000 489.05000 459.05000 132.05000  64.050000\n [3,] 276.70000 246.70000 301.3666667 119.36667 234.03333 270.70000  49.366667\n [4,] 203.27500 147.27500  23.5250000 236.27500 106.27500 167.27500 206.525000\n [5,]  23.82000 102.42000  12.4200000  20.42000  30.22000  90.22000 139.220000\n [6,]  96.35000  51.85000   0.6833333 140.18333  95.68333 111.51667   7.683333\n [7,]  77.44286  17.01429   2.0142857  99.58571  28.72857  95.87143  72.157143\n [8,]  99.63750  92.51250 104.3875000 121.63750  19.38750  35.51250  83.137500\n [9,] 100.23333 107.12222   1.2333333  41.56667  18.45556  82.34444  22.455556\n[10,]   8.51000  26.71000  41.5100000  67.81000   9.41000  64.61000  20.410000\n           [,8]      [,9]\n [1,] 184.10000 135.10000\n [2,] 232.55000 177.05000\n [3,] 149.70000 124.70000\n [4,] 175.27500 210.27500\n [5,]  59.82000 157.42000\n [6,]  34.51667 152.35000\n [7,] 125.72857 123.44286\n [8,]  59.13750  12.63750\n [9,]  40.45556  16.67778\n[10,]  98.21000   4.91000\n\n, , 5\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,]  86.10000 117.10000 679.10000 935.10000 760.10000 909.10000 502.10000\n [2,]   1.55000  76.55000 331.05000 342.55000 211.05000 211.55000 393.55000\n [3,]  96.36667  98.36667  32.03333 113.70000  36.36667 193.03333 196.03333\n [4,]  82.77500  73.27500  31.02500  28.52500  91.52500 186.52500  58.77500\n [5,]   8.62000 127.62000  46.22000 162.62000  93.02000 146.82000 166.42000\n [6,] 163.01667  45.51667  27.68333  68.68333  86.35000 140.51667  54.68333\n [7,]  61.01429  64.15714 111.72857 113.72857 129.01429 123.01429 102.15714\n [8,]  26.01250  74.51250  11.76250   8.13750  22.01250  15.13750  80.13750\n [9,]  67.90000  52.12222  43.56667  22.45556  68.34444  80.01111  60.78889\n[10,]  81.51000  42.81000  97.61000  67.41000  13.81000  29.01000  58.71000\n           [,8]      [,9]\n [1,] 271.10000 346.10000\n [2,] 386.55000  18.05000\n [3,] 258.70000 118.70000\n [4,]  89.77500  82.27500\n [5,]  35.62000  25.42000\n [6,] 155.01667  20.85000\n [7,]  60.72857 141.30000\n [8,]  84.63750  81.01250\n [9,] 108.01111  20.23333\n[10,]  67.61000  67.51000\n\n, , 6\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 333.10000 216.10000 207.100000 554.10000 617.10000 294.10000 139.10000\n [2,] 427.55000 376.55000  18.050000  98.55000 390.55000  48.05000 245.05000\n [3,] 125.36667 300.36667  44.366667 247.70000 189.70000  64.70000 233.03333\n [4,] 161.77500 204.27500 157.525000 184.27500 248.52500 217.52500  78.27500\n [5,]  62.02000  25.02000 151.420000 149.22000  94.42000  78.82000 185.82000\n [6,]  40.85000  53.01667  46.516667  70.35000 140.51667 132.01667  33.68333\n [7,]  72.01429 117.15714  46.300000  61.44286 112.87143  73.15714   3.30000\n [8,] 120.51250  63.63750  18.512500  49.01250 114.76250  83.01250  89.63750\n [9,]  35.23333  22.34444   9.455556  27.34444  98.45556  36.56667  68.78889\n[10,]  77.91000  30.61000  80.110000  24.11000   0.81000  32.71000  73.31000\n           [,8]      [,9]\n [1,] 656.10000 698.10000\n [2,] 183.05000 369.55000\n [3,]  26.03333 264.70000\n [4,] 135.02500   7.27500\n [5,] 100.62000 119.22000\n [6,] 102.68333  22.51667\n [7,]  20.15714  56.15714\n [8,]  21.88750  40.63750\n [9,]  11.90000  49.01111\n[10,]  68.21000   8.41000\n\n, , 7\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 397.10000 771.10000 623.10000  92.10000 152.10000  76.10000 660.10000\n [2,] 194.55000 241.05000  46.05000 286.55000 498.05000 125.05000 136.05000\n [3,] 304.70000 158.36667 250.70000 246.03333 124.03333 126.70000 109.36667\n [4,] 226.27500 165.02500 183.52500  41.52500  63.52500 114.02500 243.52500\n [5,] 195.02000  26.62000  73.02000 115.82000  51.62000  63.82000  90.82000\n [6,]  66.85000  74.01667 127.01667 101.18333 161.68333  20.18333  37.01667\n [7,]  65.72857  26.44286 140.87143  39.87143 132.87143  64.72857  42.01429\n [8,]  34.63750  15.26250  53.51250  71.76250 107.01250  93.38750  44.51250\n [9,] 107.01111  79.78889  75.23333  51.90000  23.23333  49.34444  91.34444\n[10,]  35.31000  43.11000  23.81000   5.21000  79.41000  27.31000  92.91000\n           [,8]      [,9]\n [1,] 617.10000 863.10000\n [2,]  36.55000 163.05000\n [3,] 314.70000 191.70000\n [4,] 104.77500 166.27500\n [5,]  68.62000 111.22000\n [6,] 129.35000  77.68333\n [7,]  44.87143 122.01429\n [8,] 109.01250  11.26250\n [9,]  25.34444  44.34444\n[10,]  60.31000  87.61000\n\n, , 8\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 674.10000 837.10000 896.100000 710.10000 188.10000 531.10000 457.10000\n [2,] 257.55000 284.55000 129.050000 381.05000 303.05000 413.05000  28.05000\n [3,] 230.36667 276.70000  72.700000 104.70000 246.70000 225.03333 306.70000\n [4,] 210.52500  67.77500  64.775000  46.52500  20.27500  88.77500 232.52500\n [5,]  56.82000 174.22000 132.420000  85.42000 130.62000 167.62000 181.02000\n [6,]  61.51667 102.85000 129.016667 138.68333  25.18333  32.85000  31.51667\n [7,]  12.30000 103.15714  61.871429  53.30000 117.30000  53.87143 129.30000\n [8,]  32.26250  92.51250  51.637500  37.01250  57.88750  46.26250 119.13750\n [9,]   7.90000  92.45556   7.011111  85.12222  55.23333  92.56667  11.12222\n[10,]        NA  43.21000   2.910000  15.61000  19.91000   9.81000   6.01000\n            [,8]      [,9]\n [1,] 705.100000 854.10000\n [2,] 250.050000 202.55000\n [3,]  17.366667 173.36667\n [4,] 227.025000 152.77500\n [5,] 136.220000 180.62000\n [6,]  37.016667  94.51667\n [7,]   7.157143  82.72857\n [8,] 117.137500  44.51250\n [9,]  73.455556  26.45556\n[10,]  36.610000  79.01000\n\nbc.d(x, y, \"^\")\n\n, , 1\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 5.211000e+02 6.981000e+02 4.921000e+02 7.871000e+02 8.151000e+02\n [2,] 6.562620e+05 7.816328e+05 6.258392e+05 3.856410e+03 1.042441e+04\n [3,] 2.928872e+08 6.452945e+07 2.244963e+07 5.362528e+07 2.992209e+06\n [4,] 1.786161e+11 7.877493e+11 3.717524e+10 1.063772e+11 8.321864e+10\n [5,] 1.360231e+09 1.520327e+14 1.930890e+13 1.742824e+14 3.128645e+11\n [6,] 4.849129e+12 3.261678e+15 3.087080e+17 5.497679e+17 1.108601e+17\n [7,] 7.629851e+16 4.426614e+20 9.235990e+18 8.664729e+19 2.349675e+20\n [8,] 4.594973e+08 4.125902e+19 3.280384e+19 4.543694e+23 4.065528e+22\n [9,] 6.361498e+24 1.244443e+22 8.450751e+21 1.021549e+26 3.739370e+25\n[10,] 2.376281e+26 1.310490e+29 5.003592e+29 7.336201e+28 5.742720e+20\n              [,6]         [,7]         [,8]         [,9]\n [1,] 3.811000e+02 7.061000e+02 3.841000e+02 1.781000e+02\n [2,] 2.491008e+05 3.316041e+04 6.211016e+05 8.337516e+05\n [3,] 1.406891e+08 1.852905e+08 5.948233e+05 1.106611e+08\n [4,] 2.614185e+10 7.380117e+09 5.891349e+11 9.003558e+11\n [5,] 2.018284e+14 6.274684e+09 9.855839e+14 4.966015e+12\n [6,] 4.827084e+15 5.686769e+13 5.910950e+17 3.015694e+15\n [7,] 1.917813e+18 5.464242e+15 1.635742e+20 1.399635e+18\n [8,] 6.829745e+18 1.090968e+23 1.345529e+19 2.639888e+21\n [9,] 1.240773e+23 4.500046e+26 9.220107e+24 1.880180e+21\n[10,] 6.608754e+28 7.675171e+26 1.161583e+15 4.944230e+26\n\n, , 2\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 9.651000e+02 4.510000e+01 1.771000e+02 1.211000e+02 9.811000e+02\n [2,] 2.343528e+05 3.575881e+04 8.118010e+03 3.651921e+04 2.884764e+05\n [3,] 8.388286e+08 3.951806e+06 9.186135e+08 1.160936e+06 4.136602e+08\n [4,] 4.139178e+11 9.493899e+11 5.181287e+10 4.543313e+07 3.838130e+11\n [5,] 1.559357e+13 2.314799e+12 9.090052e+14 3.902657e+11 1.751990e+07\n [6,] 2.723322e+17 1.640968e+16 1.688557e+14 4.957534e+16 7.638708e+17\n [7,] 7.197096e+20 1.853138e+18 1.476539e+18 3.178985e+12 1.973766e+20\n [8,] 9.718231e+19 7.313603e+19 3.229844e+22 3.051133e+23 2.939701e+23\n [9,] 1.915789e+22 3.139781e+23 2.511479e+23 7.211519e+24 1.656078e+23\n[10,] 7.528969e+28 1.340722e+27 5.742720e+20 1.480220e+29 5.868694e+29\n              [,6]         [,7]         [,8]         [,9]\n [1,] 6.951000e+02 4.381000e+02 6.771000e+02 9.341000e+02\n [2,] 1.815612e+05 3.870084e+05 1.384584e+05 1.414512e+05\n [3,] 7.195640e+08 1.602207e+07 3.864876e+07 5.666735e+07\n [4,] 1.076373e+10 5.002464e+07 8.978179e+08 1.044731e+08\n [5,] 3.096976e+13 1.282021e+14 7.028612e+07 3.870705e+14\n [6,] 4.923092e+08 1.794071e+11 4.764439e+16 3.224755e+17\n [7,] 2.884406e+17 1.724963e+14 2.856325e+20 1.057489e+19\n [8,] 8.135787e+18 8.796580e+23 1.967646e+23 1.864685e+16\n [9,] 1.181402e+23 5.448327e+21 1.543395e+25 2.873424e+23\n[10,] 1.248160e+28 1.689559e+29 5.614558e+23 9.722997e+28\n\n, , 3\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 9.741000e+02 2.721000e+02 1.810000e+01 5.131000e+02 3.141000e+02\n [2,] 3.066001e+04 4.845552e+05 4.721064e+05 3.446864e+05 2.372664e+05\n [3,] 6.474391e+08 8.877808e+08 1.775991e+08 1.549407e+08 6.296432e+08\n [4,] 9.128429e+09 1.412945e+11 8.568028e+11 1.394598e+11 3.486078e+10\n [5,] 1.850602e+10 1.301472e+14 7.327208e+12 5.488941e+12 9.775612e+13\n [6,] 8.918250e+17 1.224851e+15 7.753818e+14 2.925684e+16 6.080399e+12\n [7,] 1.386839e+17 4.255459e+20 5.956835e+11 9.098008e+11 1.311347e+20\n [8,] 2.909071e+11 3.021412e+20 1.679400e+23 4.577014e+22 2.298287e+23\n [9,] 2.132199e+25 3.887369e+25 1.095841e+22 2.190643e+23 7.751727e+26\n[10,] 1.593683e+26 3.647041e+26 2.617419e+20 3.491448e+23 1.572291e+29\n              [,6]         [,7]         [,8]         [,9]\n [1,] 5.461000e+02 2.921000e+02 4.331000e+02 1.821000e+02\n [2,] 2.758921e+04 8.065836e+05 3.352561e+04 8.894376e+05\n [3,] 8.758754e+07 3.565517e+08 4.765626e+08 1.689411e+06\n [4,] 1.237405e+11 6.740693e+11 4.159858e+11 9.358681e+10\n [5,] 8.876792e+13 4.843812e+10 1.272383e+14 4.336192e+14\n [6,] 2.508997e+13 5.212489e+17 3.550334e+14 9.787920e+14\n [7,] 1.007021e+14 3.485986e+19 8.926108e+19 2.693075e+20\n [8,] 8.162332e+22 3.495264e+21 2.006555e+23 7.695679e+17\n [9,] 1.891819e+26 1.256851e+24 2.283932e+25 1.988564e+15\n[10,] 2.279338e+22 3.424728e+20 2.269043e+26 3.595814e+28\n\n, , 4\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 1.591000e+02 5.021000e+02 7.601000e+02 2.381000e+02 2.741000e+02\n [2,] 2.746808e+05 9.672100e+02 1.590121e+04 9.566796e+05 8.429076e+05\n [3,] 5.719937e+08 4.053883e+08 7.390085e+08 4.592117e+07 3.460963e+08\n [4,] 4.370950e+11 1.204359e+11 7.840766e+07 7.978313e+11 3.265611e+10\n [5,] 2.396397e+10 3.521875e+13 9.235449e+08 1.109504e+10 7.876301e+10\n [6,] 3.732655e+16 9.065673e+14 4.750104e+03 3.540673e+17 3.580348e+16\n [7,] 1.375802e+19 3.399244e+14 1.107985e+08 7.999550e+19 1.330101e+16\n [8,] 1.629681e+23 9.001673e+22 2.365418e+23 8.040069e+23 3.348840e+17\n [9,] 3.956327e+26 7.196126e+26 2.558037e+09 1.435124e+23 9.623359e+19\n[10,] 1.992029e+19 1.848157e+24 1.518894e+26 2.055594e+28 5.443726e+19\n              [,6]         [,7]         [,8]         [,9]\n [1,] 6.410000e+01 5.701000e+02 1.841000e+02 1.351000e+02\n [2,] 6.974881e+04 1.640961e+04 2.163180e+05 1.253868e+05\n [3,] 5.355852e+08 3.248368e+06 9.057934e+07 5.235560e+07\n [4,] 2.004306e+11 4.657260e+11 2.416128e+11 5.004844e+11\n [5,] 1.867945e+13 1.634399e+14 2.393768e+12 3.020992e+14\n [6,] 8.973176e+16 9.598548e+09 7.890065e+13 5.833944e+17\n [7,] 6.130709e+19 8.387675e+18 4.090008e+20 3.597063e+20\n [8,] 4.243946e+19 3.829090e+22 2.509710e+21 1.091464e+16\n [9,] 6.743593e+25 5.624667e+20 1.124569e+23 3.867464e+19\n[10,] 1.267644e+28 1.254383e+23 8.347513e+29 8.143572e+16\n\n, , 5\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.610000e+01 1.171000e+02 6.791000e+02 9.351000e+02 7.601000e+02\n [2,] 9.610000e+00 2.343961e+04 4.383764e+05 4.693620e+05 1.781684e+05\n [3,] 2.416263e+07 2.569849e+07 8.875037e+05 3.968672e+07 1.298597e+06\n [4,] 1.201813e+10 7.380117e+09 2.371849e+08 1.694894e+08 1.796383e+10\n [5,] 1.487258e+08 1.057898e+14 6.591735e+11 3.554019e+14 2.176365e+13\n [6,] 8.755875e+17 4.148874e+14 2.099993e+13 4.897965e+15 1.934112e+16\n [7,] 2.592430e+18 3.684694e+18 1.789930e+20 2.026625e+20 4.899490e+20\n [8,] 3.517035e+18 1.594237e+22 6.147761e+15 3.225878e+14 9.248576e+17\n [9,] 1.188531e+25 1.099990e+24 2.190643e+23 5.624667e+20 1.260409e+25\n[10,] 1.294520e+29 2.067532e+26 7.851328e+29 1.937507e+28 2.523113e+21\n              [,6]         [,7]         [,8]         [,9]\n [1,] 9.091000e+02 5.021000e+02 2.711000e+02 3.461000e+02\n [2,] 1.790136e+05 6.195264e+05 5.976836e+05 1.303210e+03\n [3,] 1.942051e+08 2.034012e+08 4.674693e+08 4.515605e+07\n [4,] 3.098762e+11 3.054995e+09 1.662883e+10 1.173037e+10\n [5,] 2.131946e+14 3.989125e+14 1.791924e+11 3.316865e+10\n [6,] 3.591489e+17 1.247491e+15 6.474077e+17 3.833044e+12\n [7,] 3.510550e+20 9.562412e+19 2.508636e+18 9.261502e+20\n [8,] 4.625441e+16 2.853686e+22 4.417967e+22 3.112692e+22\n [9,] 5.206373e+25 4.391374e+24 7.751727e+26 2.201859e+20\n[10,] 4.221602e+24 4.865425e+27 1.995765e+28 1.966442e+28\n\n, , 6\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.331000e+02 2.161000e+02 2.071000e+02 5.541000e+02 6.171000e+02\n [2,] 7.311960e+05 5.671596e+05 1.303210e+03 3.884841e+04 6.101172e+05\n [3,] 5.319980e+07 7.316763e+08 2.357948e+06 4.103380e+08 1.843172e+08\n [4,] 1.753419e+11 4.457597e+11 1.576297e+11 2.951927e+11 9.766080e+11\n [5,] 2.867536e+12 3.063984e+10 2.487518e+14 2.311986e+14 2.345147e+13\n [6,] 2.168003e+14 1.036053e+15 4.726711e+14 5.655775e+15 3.591489e+17\n [7,] 8.272121e+18 2.494984e+20 3.756239e+17 2.722614e+18 1.922093e+20\n [8,] 7.464086e+23 4.512579e+21 2.314411e+17 5.586949e+20 5.048006e+23\n [9,] 3.241650e+22 5.379088e+20 2.340809e+17 3.311346e+21 3.367787e+26\n[10,] 8.240092e+28 7.221598e+24 1.088597e+29 6.637004e+23 1.215767e+09\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.941000e+02 1.391000e+02 6.561000e+02 6.981000e+02\n [2,] 9.235210e+03 2.401980e+05 1.340292e+05 5.462688e+05\n [3,] 7.312681e+06 3.416787e+08 4.763795e+05 5.007553e+08\n [4,] 5.731611e+11 9.610197e+09 8.509356e+10 7.170872e+05\n [5,] 9.506752e+12 6.923286e+14 3.223084e+13 7.526544e+13\n [6,] 2.469904e+17 6.813933e+13 5.468992e+16 6.080399e+12\n [7,] 9.235990e+18 3.509812e+09 1.113497e+15 1.450512e+18\n [8,] 3.783274e+22 6.992585e+22 8.836681e+17 1.247773e+20\n [9,] 4.528464e+22 1.336125e+25 1.853981e+18 6.321695e+23\n[10,] 1.402185e+25 4.483655e+28 2.180120e+28 1.769946e+19\n\n, , 7\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.971000e+02 7.711000e+02 6.231000e+02 9.210000e+01 1.521000e+02\n [2,] 1.513988e+05 2.324204e+05 8.482410e+03 3.284436e+05 9.922152e+05\n [3,] 7.638026e+08 1.072396e+08 4.254287e+08 4.021107e+08 5.152037e+07\n [4,] 6.710985e+11 1.898624e+11 2.904162e+11 7.611645e+08 4.168873e+09\n [5,] 8.815476e+14 4.177248e+10 6.487228e+12 6.512801e+13 1.145355e+12\n [6,] 4.164050e+15 7.671577e+15 1.959168e+17 5.006813e+16 8.334874e+17\n [7,] 4.364813e+18 7.444661e+15 9.066647e+20 1.319225e+17 6.021539e+20\n [8,] 3.476100e+19 4.939981e+16 1.128137e+21 1.180050e+22 2.885333e+23\n [9,] 7.129227e+26 5.077668e+25 2.991406e+25 1.058495e+24 7.641635e+20\n[10,] 3.012848e+25 2.217074e+26 5.855904e+23 1.473592e+17 9.971304e+28\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.610000e+01 6.601000e+02 6.171000e+02 8.631000e+02\n [2,] 6.255001e+04 7.403841e+04 5.343610e+03 1.063412e+05\n [3,] 5.491533e+07 3.531984e+07 8.414998e+08 1.902086e+08\n [4,] 4.327532e+10 9.003558e+11 3.085110e+10 1.956806e+11\n [5,] 3.308522e+12 1.930890e+13 4.754486e+12 5.318198e+13\n [6,] 3.154023e+12 1.200304e+14 2.185275e+17 1.025356e+16\n [7,] 3.920653e+18 1.903116e+17 3.016307e+17 3.315592e+20\n [8,] 9.705768e+22 2.585686e+20 3.346034e+23 4.343085e+15\n [9,] 6.719345e+23 1.715228e+26 1.671582e+21 2.568831e+23\n[10,] 2.307900e+24 4.793190e+29 6.366391e+27 2.664016e+29\n\n, , 8\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 6.741000e+02 8.371000e+02 8.961000e+02 7.101000e+02 1.881000e+02\n [2,] 2.653280e+05 3.238748e+05 6.661561e+04 5.807964e+05 3.673572e+05\n [3,] 3.300826e+08 5.719937e+08 1.037450e+07 3.098873e+07 4.053883e+08\n [4,] 5.028688e+11 5.401546e+09 4.506814e+09 1.199459e+09 4.325969e+07\n [5,] 1.850786e+12 5.015798e+14 1.272383e+14 1.421176e+13 1.188224e+14\n [6,] 2.528508e+15 5.522469e+16 2.151703e+17 3.319351e+17 1.190109e+13\n [7,] 3.507697e+13 1.023721e+20 2.858362e+18 1.006414e+18 2.516358e+20\n [8,] 1.969264e+19 9.001673e+22 8.480893e+20 5.908908e+19 2.115428e+21\n [9,] 4.643296e+16 1.912404e+26 1.585858e+16 9.090110e+25 1.853505e+24\n[10,]           NA 2.269043e+26 4.354416e+14 8.590709e+21 9.788420e+22\n              [,6]         [,7]         [,8]         [,9]\n [1,] 5.311000e+02 4.571000e+02 7.051000e+02 8.541000e+02\n [2,] 6.824412e+05 3.147210e+03 2.501000e+05 1.641060e+05\n [3,] 3.076836e+08 7.789419e+08 1.414208e+05 1.406891e+08\n [4,] 1.590020e+10 7.483738e+11 6.800404e+11 1.394598e+11\n [5,] 4.135035e+14 6.074112e+14 1.465731e+14 6.007298e+14\n [6,] 5.862998e+13 4.572452e+13 1.200304e+14 3.326273e+16\n [7,] 1.084416e+18 4.975949e+20 7.922533e+11 2.184112e+19\n [8,] 3.520081e+20 6.809383e+23 5.946857e+23 2.585686e+20\n [9,] 1.933189e+26 1.009036e+18 2.412151e+25 2.459431e+21\n[10,] 8.254487e+19 6.148154e+17 4.325111e+25 9.480268e+28\n\nbc.d(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.d(x, y, \"&lt;\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"&gt;\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.d(x, y, \"&lt;=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"&gt;=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.d.html#broadcasted-decimal-numeric-operations",
    "href": "man/outer/bc.d.html#broadcasted-decimal-numeric-operations",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(10:8)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(10,1,1))\n\nbc.d(x, y, \"+\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]   [,8]  [,9]\n [1,] 522.1 699.1 493.1 788.1 816.1 382.1 707.1  385.1 179.1\n [2,] 812.1 886.1 793.1  64.1 104.1 501.1 184.1  790.1 915.1\n [3,] 667.1 404.1 285.1 380.1 147.1 523.1 573.1   87.1 483.1\n [4,] 654.1 946.1 443.1 575.1 541.1 406.1 297.1  880.1 978.1\n [5,]  72.1 691.1 459.1 710.1 204.1 731.1  96.1 1002.1 351.1\n [6,] 136.1 391.1 828.1 911.1 699.1 417.1 202.1  922.1 386.1\n [7,] 265.1 897.1 519.1 712.1 820.1 416.1 184.1  779.1 398.1\n [8,]  20.1 291.1 283.1 914.1 678.1 234.1 766.1  254.1 484.1\n [9,] 579.1 294.1 282.1 785.1 703.1 377.1 924.1  603.1 240.1\n[10,] 444.1 826.1 943.1 780.1 129.1 772.1 498.1   42.1 477.1\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 966.1  46.1 178.1 122.1 982.1 696.1 439.1 678.1 935.1\n [2,] 486.1 191.1  92.1 193.1 539.1 428.1 624.1 374.1 378.1\n [3,] 946.1 161.1 975.1 108.1 748.1 899.1 255.1 341.1 387.1\n [4,] 806.1 991.1 481.1  86.1 791.1 326.1  88.1 177.1 105.1\n [5,] 440.1 302.1 986.1 213.1  33.1 504.1 668.1  42.1 832.1\n [6,] 811.1 510.1 241.1 612.1 962.1  34.1  81.1 608.1 834.1\n [7,] 961.1 414.1 401.1  68.1 800.1 319.1 115.1 843.1 529.1\n [8,] 323.1 312.1 659.1 870.1 866.1 239.1 992.1 824.1 116.1\n [9,] 308.1 417.1 407.1 587.1 389.1 375.1 269.1 638.1 413.1\n[10,] 782.1 526.1 129.1 836.1 958.1 655.1 847.1 247.1 802.1\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 975.1 273.1  19.1 514.1 315.1 547.1 293.1 434.1 183.1\n [2,] 177.1 698.1 689.1 589.1 489.1 168.1 900.1 185.1 945.1\n [3,] 868.1 964.1 565.1 540.1 860.1 447.1 712.1 784.1 122.1\n [4,] 313.1 617.1 966.1 615.1 436.1 597.1 910.1 807.1 557.1\n [5,] 118.1 670.1 379.1 358.1 633.1 621.1 142.1 667.1 851.1\n [6,] 987.1 333.1 309.1 561.1 141.1 177.1 903.1 272.1 321.1\n [7,] 288.1 892.1  55.1  58.1 755.1 107.1 626.1 715.1 836.1\n [8,]  35.1 371.1 808.1 688.1 840.1 739.1 501.1 826.1 180.1\n [9,] 661.1 706.1 290.1 401.1 981.1 840.1 485.1 666.1  59.1\n[10,] 427.1 463.1 120.1 236.1 841.1 182.1 123.1 442.1 727.1\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 160.1 503.1 761.1 239.1 275.1  65.1 571.1 185.1 136.1\n [2,] 526.1  33.1 128.1 980.1 920.1 266.1 130.1 467.1 356.1\n [3,] 833.1 743.1 907.1 361.1 705.1 815.1 151.1 452.1 377.1\n [4,] 817.1 593.1  98.1 949.1 429.1 673.1 830.1 705.1 845.1\n [5,] 124.1 517.1  67.1 107.1 156.1 456.1 701.1 304.1 792.1\n [6,] 584.1 317.1  10.1 847.1 580.1 675.1  52.1 213.1 920.1\n [7,] 549.1 126.1  21.1 704.1 208.1 678.1 512.1 887.1 871.1\n [8,] 805.1 748.1 843.1 981.1 163.1 292.1 673.1 481.1 109.1\n [9,] 911.1 973.1  20.1 383.1 175.1 750.1 211.1 373.1 159.1\n[10,]  95.1 277.1 425.1 688.1 104.1 656.1 214.1 992.1  59.1\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  87.1 118.1 680.1 936.1 761.1 910.1 503.1 272.1 347.1\n [2,]   5.1 155.1 664.1 687.1 424.1 425.1 789.1 775.1  38.1\n [3,] 292.1 298.1  99.1 344.1 112.1 582.1 591.1 779.1 359.1\n [4,] 335.1 297.1 128.1 118.1 370.1 750.1 239.1 363.1 333.1\n [5,]  48.1 643.1 236.1 818.1 470.1 739.1 837.1 183.1 132.1\n [6,] 984.1 279.1 172.1 418.1 524.1 849.1 334.1 936.1 131.1\n [7,] 434.1 456.1 789.1 803.1 910.1 868.1 722.1 432.1 996.1\n [8,] 216.1 604.1 102.1  73.1 184.1 129.1 649.1 685.1 656.1\n [9,] 620.1 478.1 401.1 211.1 624.1 729.1 556.1 981.1 191.1\n[10,] 825.1 438.1 986.1 684.1 148.1 300.1 597.1 686.1 685.1\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 334.1 217.1 208.1 555.1 618.1 295.1 140.1 657.1 699.1\n [2,] 857.1 755.1  38.1 199.1 783.1  98.1 492.1 368.1 741.1\n [3,] 379.1 904.1 136.1 746.1 572.1 197.1 702.1  81.1 797.1\n [4,] 651.1 821.1 634.1 741.1 998.1 874.1 317.1 544.1  33.1\n [5,] 315.1 130.1 762.1 751.1 477.1 399.1 934.1 508.1 601.1\n [6,] 251.1 324.1 285.1 428.1 849.1 798.1 208.1 622.1 141.1\n [7,] 511.1 827.1 331.1 437.1 797.1 519.1  30.1 148.1 400.1\n [8,] 972.1 517.1 156.1 400.1 926.1 672.1 725.1 183.1 333.1\n [9,] 326.1 210.1  94.1 255.1 895.1 338.1 628.1 116.1 450.1\n[10,] 789.1 316.1 811.1 251.1  18.1 337.1 743.1 692.1  94.1\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 398.1 772.1 624.1  93.1 153.1  77.1 661.1 618.1 864.1\n [2,] 391.1 484.1  94.1 575.1 998.1 252.1 274.1  75.1 328.1\n [3,] 917.1 478.1 755.1 741.1 375.1 383.1 331.1 947.1 578.1\n [4,] 909.1 664.1 738.1 170.1 258.1 460.1 978.1 423.1 669.1\n [5,] 980.1 138.1 370.1 584.1 263.1 324.1 459.1 348.1 561.1\n [6,] 407.1 450.1 768.1 613.1 976.1 127.1 228.1 782.1 472.1\n [7,] 467.1 192.1 993.1 286.1 937.1 460.1 301.1 321.1 861.1\n [8,] 285.1 130.1 436.1 582.1 864.1 755.1 364.1 880.1  98.1\n [9,] 972.1 727.1 686.1 476.1 218.1 453.1 831.1 237.1 408.1\n[10,] 363.1 441.1 248.1  62.1 804.1 283.1 939.1 613.1 886.1\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 675.1 838.1 897.1 711.1 189.1 532.1 458.1 706.1 855.1\n [2,] 517.1 571.1 260.1 764.1 608.1 828.1  58.1 502.1 407.1\n [3,] 694.1 833.1 221.1 317.1 743.1 678.1 923.1  55.1 523.1\n [4,] 846.1 275.1 263.1 190.1  85.1 359.1 934.1 912.1 615.1\n [5,] 289.1 876.1 667.1 432.1 658.1 843.1 910.1 686.1 908.1\n [6,] 375.1 623.1 780.1 838.1 157.1 203.1 195.1 228.1 573.1\n [7,]  93.1 729.1 440.1 380.1 828.1 384.1 912.1  57.1 586.1\n [8,] 266.1 748.1 421.1 304.1 471.1 378.1 961.1 945.1 364.1\n [9,]  80.1 841.1  72.1 775.1 506.1 842.1 109.1 670.1 247.1\n[10,]    NA 442.1  39.1 166.1 209.1 108.1  70.1 376.1 800.1\n\nbc.d(x, y, \"-\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 520.1 697.1 491.1 786.1 814.1 380.1 705.1 383.1 177.1\n [2,] 808.1 882.1 789.1  60.1 100.1 497.1 180.1 786.1 911.1\n [3,] 661.1 398.1 279.1 374.1 141.1 517.1 567.1  81.1 477.1\n [4,] 646.1 938.1 435.1 567.1 533.1 398.1 289.1 872.1 970.1\n [5,]  62.1 681.1 449.1 700.1 194.1 721.1  86.1 992.1 341.1\n [6,] 124.1 379.1 816.1 899.1 687.1 405.1 190.1 910.1 374.1\n [7,] 251.1 883.1 505.1 698.1 806.1 402.1 170.1 765.1 384.1\n [8,]   4.1 275.1 267.1 898.1 662.1 218.1 750.1 238.1 468.1\n [9,] 561.1 276.1 264.1 767.1 685.1 359.1 906.1 585.1 222.1\n[10,] 424.1 806.1 923.1 760.1 109.1 752.1 478.1  22.1 457.1\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 964.1  44.1 176.1 120.1 980.1 694.1 437.1 676.1 933.1\n [2,] 482.1 187.1  88.1 189.1 535.1 424.1 620.1 370.1 374.1\n [3,] 940.1 155.1 969.1 102.1 742.1 893.1 249.1 335.1 381.1\n [4,] 798.1 983.1 473.1  78.1 783.1 318.1  80.1 169.1  97.1\n [5,] 430.1 292.1 976.1 203.1  23.1 494.1 658.1  32.1 822.1\n [6,] 799.1 498.1 229.1 600.1 950.1  22.1  69.1 596.1 822.1\n [7,] 947.1 400.1 387.1  54.1 786.1 305.1 101.1 829.1 515.1\n [8,] 307.1 296.1 643.1 854.1 850.1 223.1 976.1 808.1 100.1\n [9,] 290.1 399.1 389.1 569.1 371.1 357.1 251.1 620.1 395.1\n[10,] 762.1 506.1 109.1 816.1 938.1 635.1 827.1 227.1 782.1\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 973.1 271.1  17.1 512.1 313.1 545.1 291.1 432.1 181.1\n [2,] 173.1 694.1 685.1 585.1 485.1 164.1 896.1 181.1 941.1\n [3,] 862.1 958.1 559.1 534.1 854.1 441.1 706.1 778.1 116.1\n [4,] 305.1 609.1 958.1 607.1 428.1 589.1 902.1 799.1 549.1\n [5,] 108.1 660.1 369.1 348.1 623.1 611.1 132.1 657.1 841.1\n [6,] 975.1 321.1 297.1 549.1 129.1 165.1 891.1 260.1 309.1\n [7,] 274.1 878.1  41.1  44.1 741.1  93.1 612.1 701.1 822.1\n [8,]  19.1 355.1 792.1 672.1 824.1 723.1 485.1 810.1 164.1\n [9,] 643.1 688.1 272.1 383.1 963.1 822.1 467.1 648.1  41.1\n[10,] 407.1 443.1 100.1 216.1 821.1 162.1 103.1 422.1 707.1\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 158.1 501.1 759.1 237.1 273.1  63.1 569.1 183.1 134.1\n [2,] 522.1  29.1 124.1 976.1 916.1 262.1 126.1 463.1 352.1\n [3,] 827.1 737.1 901.1 355.1 699.1 809.1 145.1 446.1 371.1\n [4,] 809.1 585.1  90.1 941.1 421.1 665.1 822.1 697.1 837.1\n [5,] 114.1 507.1  57.1  97.1 146.1 446.1 691.1 294.1 782.1\n [6,] 572.1 305.1  -1.9 835.1 568.1 663.1  40.1 201.1 908.1\n [7,] 535.1 112.1   7.1 690.1 194.1 664.1 498.1 873.1 857.1\n [8,] 789.1 732.1 827.1 965.1 147.1 276.1 657.1 465.1  93.1\n [9,] 893.1 955.1   2.1 365.1 157.1 732.1 193.1 355.1 141.1\n[10,]  75.1 257.1 405.1 668.1  84.1 636.1 194.1 972.1  39.1\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,]  85.1 116.1 678.1 934.1 759.1 908.1 501.1 270.1 345.1\n [2,]   1.1 151.1 660.1 683.1 420.1 421.1 785.1 771.1  34.1\n [3,] 286.1 292.1  93.1 338.1 106.1 576.1 585.1 773.1 353.1\n [4,] 327.1 289.1 120.1 110.1 362.1 742.1 231.1 355.1 325.1\n [5,]  38.1 633.1 226.1 808.1 460.1 729.1 827.1 173.1 122.1\n [6,] 972.1 267.1 160.1 406.1 512.1 837.1 322.1 924.1 119.1\n [7,] 420.1 442.1 775.1 789.1 896.1 854.1 708.1 418.1 982.1\n [8,] 200.1 588.1  86.1  57.1 168.1 113.1 633.1 669.1 640.1\n [9,] 602.1 460.1 383.1 193.1 606.1 711.1 538.1 963.1 173.1\n[10,] 805.1 418.1 966.1 664.1 128.1 280.1 577.1 666.1 665.1\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 332.1 215.1 206.1 553.1 616.1 293.1 138.1 655.1 697.1\n [2,] 853.1 751.1  34.1 195.1 779.1  94.1 488.1 364.1 737.1\n [3,] 373.1 898.1 130.1 740.1 566.1 191.1 696.1  75.1 791.1\n [4,] 643.1 813.1 626.1 733.1 990.1 866.1 309.1 536.1  25.1\n [5,] 305.1 120.1 752.1 741.1 467.1 389.1 924.1 498.1 591.1\n [6,] 239.1 312.1 273.1 416.1 837.1 786.1 196.1 610.1 129.1\n [7,] 497.1 813.1 317.1 423.1 783.1 505.1  16.1 134.1 386.1\n [8,] 956.1 501.1 140.1 384.1 910.1 656.1 709.1 167.1 317.1\n [9,] 308.1 192.1  76.1 237.1 877.1 320.1 610.1  98.1 432.1\n[10,] 769.1 296.1 791.1 231.1  -1.9 317.1 723.1 672.1  74.1\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 396.1 770.1 622.1  91.1 151.1  75.1 659.1 616.1 862.1\n [2,] 387.1 480.1  90.1 571.1 994.1 248.1 270.1  71.1 324.1\n [3,] 911.1 472.1 749.1 735.1 369.1 377.1 325.1 941.1 572.1\n [4,] 901.1 656.1 730.1 162.1 250.1 452.1 970.1 415.1 661.1\n [5,] 970.1 128.1 360.1 574.1 253.1 314.1 449.1 338.1 551.1\n [6,] 395.1 438.1 756.1 601.1 964.1 115.1 216.1 770.1 460.1\n [7,] 453.1 178.1 979.1 272.1 923.1 446.1 287.1 307.1 847.1\n [8,] 269.1 114.1 420.1 566.1 848.1 739.1 348.1 864.1  82.1\n [9,] 954.1 709.1 668.1 458.1 200.1 435.1 813.1 219.1 390.1\n[10,] 343.1 421.1 228.1  42.1 784.1 263.1 919.1 593.1 866.1\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] 673.1 836.1 895.1 709.1 187.1 530.1 456.1 704.1 853.1\n [2,] 513.1 567.1 256.1 760.1 604.1 824.1  54.1 498.1 403.1\n [3,] 688.1 827.1 215.1 311.1 737.1 672.1 917.1  49.1 517.1\n [4,] 838.1 267.1 255.1 182.1  77.1 351.1 926.1 904.1 607.1\n [5,] 279.1 866.1 657.1 422.1 648.1 833.1 900.1 676.1 898.1\n [6,] 363.1 611.1 768.1 826.1 145.1 191.1 183.1 216.1 561.1\n [7,]  79.1 715.1 426.1 366.1 814.1 370.1 898.1  43.1 572.1\n [8,] 250.1 732.1 405.1 288.1 455.1 362.1 945.1 929.1 348.1\n [9,]  62.1 823.1  54.1 757.1 488.1 824.1  91.1 652.1 229.1\n[10,]    NA 422.1  19.1 146.1 189.1  88.1  50.1 356.1 780.1\n\nbc.d(x, y, \"*\")\n\n, , 1\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  521.1  698.1  492.1  787.1  815.1  381.1  706.1  384.1  178.1\n [2,] 1620.2 1768.2 1582.2  124.2  204.2  998.2  364.2 1576.2 1826.2\n [3,] 1992.3 1203.3  846.3 1131.3  432.3 1560.3 1710.3  252.3 1440.3\n [4,] 2600.4 3768.4 1756.4 2284.4 2148.4 1608.4 1172.4 3504.4 3896.4\n [5,]  335.5 3430.5 2270.5 3525.5  995.5 3630.5  455.5 4985.5 1730.5\n [6,]  780.6 2310.6 4932.6 5430.6 4158.6 2466.6 1176.6 5496.6 2280.6\n [7,] 1806.7 6230.7 3584.7 4935.7 5691.7 2863.7 1239.7 5404.7 2737.7\n [8,]   96.8 2264.8 2200.8 7248.8 5360.8 1808.8 6064.8 1968.8 3808.8\n [9,] 5130.9 2565.9 2457.9 6984.9 6246.9 3312.9 8235.9 5346.9 2079.9\n[10,] 4341.0 8161.0 9331.0 7701.0 1191.0 7621.0 4881.0  321.0 4671.0\n\n, , 2\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  965.1   45.1  177.1  121.1  981.1  695.1  438.1  677.1  934.1\n [2,]  968.2  378.2  180.2  382.2 1074.2  852.2 1244.2  744.2  752.2\n [3,] 2829.3  474.3 2916.3  315.3 2235.3 2688.3  756.3 1014.3 1152.3\n [4,] 3208.4 3948.4 1908.4  328.4 3148.4 1288.4  336.4  692.4  404.4\n [5,] 2175.5 1485.5 4905.5 1040.5  140.5 2495.5 3315.5  185.5 4135.5\n [6,] 4830.6 3024.6 1410.6 3636.6 5736.6  168.6  450.6 3612.6 4968.6\n [7,] 6678.7 2849.7 2758.7  427.7 5551.7 2184.7  756.7 5852.7 3654.7\n [8,] 2520.8 2432.8 5208.8 6896.8 6864.8 1848.8 7872.8 6528.8  864.8\n [9,] 2691.9 3672.9 3582.9 5202.9 3420.9 3294.9 2340.9 5661.9 3636.9\n[10,] 7721.0 5161.0 1191.0 8261.0 9481.0 6451.0 8371.0 2371.0 7921.0\n\n, , 3\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  974.1  272.1   18.1  513.1  314.1  546.1  292.1  433.1  182.1\n [2,]  350.2 1392.2 1374.2 1174.2  974.2  332.2 1796.2  366.2 1886.2\n [3,] 2595.3 2883.3 1686.3 1611.3 2571.3 1332.3 2127.3 2343.3  357.3\n [4,] 1236.4 2452.4 3848.4 2444.4 1728.4 2372.4 3624.4 3212.4 2212.4\n [5,]  565.5 3325.5 1870.5 1765.5 3140.5 3080.5  685.5 3310.5 4230.5\n [6,] 5886.6 1962.6 1818.6 3330.6  810.6 1026.6 5382.6 1596.6 1890.6\n [7,] 1967.7 6195.7  336.7  357.7 5236.7  700.7 4333.7 4956.7 5803.7\n [8,]  216.8 2904.8 6400.8 5440.8 6656.8 5848.8 3944.8 6544.8 1376.8\n [9,] 5868.9 6273.9 2529.9 3528.9 8748.9 7479.9 4284.9 5913.9  450.9\n[10,] 4171.0 4531.0 1101.0 2261.0 8311.0 1721.0 1131.0 4321.0 7171.0\n\n, , 4\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  159.1  502.1  760.1  238.1  274.1   64.1  570.1  184.1  135.1\n [2,] 1048.2   62.2  252.2 1956.2 1836.2  528.2  256.2  930.2  708.2\n [3,] 2490.3 2220.3 2712.3 1074.3 2106.3 2436.3  444.3 1347.3 1122.3\n [4,] 3252.4 2356.4  376.4 3780.4 1700.4 2676.4 3304.4 2804.4 3364.4\n [5,]  595.5 2560.5  310.5  510.5  755.5 2255.5 3480.5 1495.5 3935.5\n [6,] 3468.6 1866.6   24.6 5046.6 3444.6 4014.6  276.6 1242.6 5484.6\n [7,] 3794.7  833.7   98.7 4879.7 1407.7 4697.7 3535.7 6160.7 6048.7\n [8,] 6376.8 5920.8 6680.8 7784.8 1240.8 2272.8 5320.8 3784.8  808.8\n [9,] 8118.9 8676.9   99.9 3366.9 1494.9 6669.9 1818.9 3276.9 1350.9\n[10,]  851.0 2671.0 4151.0 6781.0  941.0 6461.0 2041.0 9821.0  491.0\n\n, , 5\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]   86.1  117.1  679.1  935.1  760.1  909.1  502.1  271.1  346.1\n [2,]    6.2  306.2 1324.2 1370.2  844.2  846.2 1574.2 1546.2   72.2\n [3,]  867.3  885.3  288.3 1023.3  327.3 1737.3 1764.3 2328.3 1068.3\n [4,] 1324.4 1172.4  496.4  456.4 1464.4 2984.4  940.4 1436.4 1316.4\n [5,]  215.5 3190.5 1155.5 4065.5 2325.5 3670.5 4160.5  890.5  635.5\n [6,] 5868.6 1638.6  996.6 2472.6 3108.6 5058.6 1968.6 5580.6  750.6\n [7,] 2989.7 3143.7 5474.7 5572.7 6321.7 6027.7 5005.7 2975.7 6923.7\n [8,] 1664.8 4768.8  752.8  520.8 1408.8  968.8 5128.8 5416.8 5184.8\n [9,] 5499.9 4221.9 3528.9 1818.9 5535.9 6480.9 4923.9 8748.9 1638.9\n[10,] 8151.0 4281.0 9761.0 6741.0 1381.0 2901.0 5871.0 6761.0 6751.0\n\n, , 6\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  333.1  216.1  207.1  554.1  617.1  294.1  139.1  656.1  698.1\n [2,] 1710.2 1506.2   72.2  394.2 1562.2  192.2  980.2  732.2 1478.2\n [3,] 1128.3 2703.3  399.3 2229.3 1707.3  582.3 2097.3  234.3 2382.3\n [4,] 2588.4 3268.4 2520.4 2948.4 3976.4 3480.4 1252.4 2160.4  116.4\n [5,] 1550.5  625.5 3785.5 3730.5 2360.5 1970.5 4645.5 2515.5 2980.5\n [6,] 1470.6 1908.6 1674.6 2532.6 5058.6 4752.6 1212.6 3696.6  810.6\n [7,] 3528.7 5740.7 2268.7 3010.7 5530.7 3584.7  161.7  987.7 2751.7\n [8,] 7712.8 4072.8 1184.8 3136.8 7344.8 5312.8 5736.8 1400.8 2600.8\n [9,] 2853.9 1809.9  765.9 2214.9 7974.9 2961.9 5571.9  963.9 3969.9\n[10,] 7791.0 3061.0 8011.0 2411.0   81.0 3271.0 7331.0 6821.0  841.0\n\n, , 7\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  397.1  771.1  623.1   92.1  152.1   76.1  660.1  617.1  863.1\n [2,]  778.2  964.2  184.2 1146.2 1992.2  500.2  544.2  146.2  652.2\n [3,] 2742.3 1425.3 2256.3 2214.3 1116.3 1140.3  984.3 2832.3 1725.3\n [4,] 3620.4 2640.4 2936.4  664.4 1016.4 1824.4 3896.4 1676.4 2660.4\n [5,] 4875.5  665.5 1825.5 2895.5 1290.5 1595.5 2270.5 1715.5 2780.5\n [6,] 2406.6 2664.6 4572.6 3642.6 5820.6  726.6 1332.6 4656.6 2796.6\n [7,] 3220.7 1295.7 6902.7 1953.7 6510.7 3171.7 2058.7 2198.7 5978.7\n [8,] 2216.8  976.8 3424.8 4592.8 6848.8 5976.8 2848.8 6976.8  720.8\n [9,] 8667.9 6462.9 6093.9 4203.9 1881.9 3996.9 7398.9 2052.9 3591.9\n[10,] 3531.0 4311.0 2381.0  521.0 7941.0 2731.0 9291.0 6031.0 8761.0\n\n, , 8\n\n        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]\n [1,]  674.1  837.1  896.1  710.1  188.1  531.1  457.1  705.1  854.1\n [2,] 1030.2 1138.2  516.2 1524.2 1212.2 1652.2  112.2 1000.2  810.2\n [3,] 2073.3 2490.3  654.3  942.3 2220.3 2025.3 2760.3  156.3 1560.3\n [4,] 3368.4 1084.4 1036.4  744.4  324.4 1420.4 3720.4 3632.4 2444.4\n [5,] 1420.5 4355.5 3310.5 2135.5 3265.5 4190.5 4525.5 3405.5 4515.5\n [6,] 2214.6 3702.6 4644.6 4992.6  906.6 1182.6 1134.6 1332.6 3402.6\n [7,]  602.7 5054.7 3031.7 2611.7 5747.7 2639.7 6335.7  350.7 4053.7\n [8,] 2064.8 5920.8 3304.8 2368.8 3704.8 2960.8 7624.8 7496.8 2848.8\n [9,]  639.9 7488.9  567.9 6894.9 4473.9 7497.9  900.9 5949.9 2142.9\n[10,]     NA 4321.0  291.0 1561.0 1991.0  981.0  601.0 3661.0 7901.0\n\nbc.d(x, y, \"/\")\n\n, , 1\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 521.10000 698.10000 492.10000 787.10000 815.10000 381.10000 706.10000\n [2,] 405.05000 442.05000 395.55000  31.05000  51.05000 249.55000  91.05000\n [3,] 221.36667 133.70000  94.03333 125.70000  48.03333 173.36667 190.03333\n [4,] 162.52500 235.52500 109.77500 142.77500 134.27500 100.52500  73.27500\n [5,]  13.42000 137.22000  90.82000 141.02000  39.82000 145.22000  18.22000\n [6,]  21.68333  64.18333 137.01667 150.85000 115.51667  68.51667  32.68333\n [7,]  36.87143 127.15714  73.15714 100.72857 116.15714  58.44286  25.30000\n [8,]   1.51250  35.38750  34.38750 113.26250  83.76250  28.26250  94.76250\n [9,]  63.34444  31.67778  30.34444  86.23333  77.12222  40.90000 101.67778\n[10,]  43.41000  81.61000  93.31000  77.01000  11.91000  76.21000  48.81000\n           [,8]      [,9]\n [1,] 384.10000 178.10000\n [2,] 394.05000 456.55000\n [3,]  28.03333 160.03333\n [4,] 219.02500 243.52500\n [5,] 199.42000  69.22000\n [6,] 152.68333  63.35000\n [7,] 110.30000  55.87143\n [8,]  30.76250  59.51250\n [9,]  66.01111  25.67778\n[10,]   3.21000  46.71000\n\n, , 2\n\n           [,1]      [,2]      [,3]       [,4]      [,5]       [,6]      [,7]\n [1,] 965.10000  45.10000 177.10000 121.100000 981.10000 695.100000 438.10000\n [2,] 242.05000  94.55000  45.05000  95.550000 268.55000 213.050000 311.05000\n [3,] 314.36667  52.70000 324.03333  35.033333 248.36667 298.700000  84.03333\n [4,] 200.52500 246.77500 119.27500  20.525000 196.77500  80.525000  21.02500\n [5,]  87.02000  59.42000 196.22000  41.620000   5.62000  99.820000 132.62000\n [6,] 134.18333  84.01667  39.18333 101.016667 159.35000   4.683333  12.51667\n [7,] 136.30000  58.15714  56.30000   8.728571 113.30000  44.585714  15.44286\n [8,]  39.38750  38.01250  81.38750 107.762500 107.26250  28.887500 123.01250\n [9,]  33.23333  45.34444  44.23333  64.233333  42.23333  40.677778  28.90000\n[10,]  77.21000  51.61000  11.91000  82.610000  94.81000  64.510000  83.71000\n          [,8]      [,9]\n [1,] 677.1000 934.10000\n [2,] 186.0500 188.05000\n [3,] 112.7000 128.03333\n [4,]  43.2750  25.27500\n [5,]   7.4200 165.42000\n [6,] 100.3500 138.01667\n [7,] 119.4429  74.58571\n [8,] 102.0125  13.51250\n [9,]  69.9000  44.90000\n[10,]  23.7100  79.21000\n\n, , 3\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 974.10000 272.10000  18.100000 513.10000 314.10000 546.10000 292.10000\n [2,]  87.55000 348.05000 343.550000 293.55000 243.55000  83.05000 449.05000\n [3,] 288.36667 320.36667 187.366667 179.03333 285.70000 148.03333 236.36667\n [4,]  77.27500 153.27500 240.525000 152.77500 108.02500 148.27500 226.52500\n [5,]  22.62000 133.02000  74.820000  70.62000 125.62000 123.22000  27.42000\n [6,] 163.51667  54.51667  50.516667  92.51667  22.51667  28.51667 149.51667\n [7,]  40.15714 126.44286   6.871429   7.30000 106.87143  14.30000  88.44286\n [8,]   3.38750  45.38750 100.012500  85.01250 104.01250  91.38750  61.63750\n [9,]  72.45556  77.45556  31.233333  43.56667 108.01111  92.34444  52.90000\n[10,]  41.71000  45.31000  11.010000  22.61000  83.11000  17.21000  11.31000\n           [,8]       [,9]\n [1,] 433.10000 182.100000\n [2,]  91.55000 471.550000\n [3,] 260.36667  39.700000\n [4,] 200.77500 138.275000\n [5,] 132.42000 169.220000\n [6,]  44.35000  52.516667\n [7,] 101.15714 118.442857\n [8,] 102.26250  21.512500\n [9,]  73.01111   5.566667\n[10,]  43.21000  71.710000\n\n, , 4\n\n           [,1]      [,2]        [,3]      [,4]      [,5]      [,6]       [,7]\n [1,] 159.10000 502.10000 760.1000000 238.10000 274.10000  64.10000 570.100000\n [2,] 262.05000  15.55000  63.0500000 489.05000 459.05000 132.05000  64.050000\n [3,] 276.70000 246.70000 301.3666667 119.36667 234.03333 270.70000  49.366667\n [4,] 203.27500 147.27500  23.5250000 236.27500 106.27500 167.27500 206.525000\n [5,]  23.82000 102.42000  12.4200000  20.42000  30.22000  90.22000 139.220000\n [6,]  96.35000  51.85000   0.6833333 140.18333  95.68333 111.51667   7.683333\n [7,]  77.44286  17.01429   2.0142857  99.58571  28.72857  95.87143  72.157143\n [8,]  99.63750  92.51250 104.3875000 121.63750  19.38750  35.51250  83.137500\n [9,] 100.23333 107.12222   1.2333333  41.56667  18.45556  82.34444  22.455556\n[10,]   8.51000  26.71000  41.5100000  67.81000   9.41000  64.61000  20.410000\n           [,8]      [,9]\n [1,] 184.10000 135.10000\n [2,] 232.55000 177.05000\n [3,] 149.70000 124.70000\n [4,] 175.27500 210.27500\n [5,]  59.82000 157.42000\n [6,]  34.51667 152.35000\n [7,] 125.72857 123.44286\n [8,]  59.13750  12.63750\n [9,]  40.45556  16.67778\n[10,]  98.21000   4.91000\n\n, , 5\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,]  86.10000 117.10000 679.10000 935.10000 760.10000 909.10000 502.10000\n [2,]   1.55000  76.55000 331.05000 342.55000 211.05000 211.55000 393.55000\n [3,]  96.36667  98.36667  32.03333 113.70000  36.36667 193.03333 196.03333\n [4,]  82.77500  73.27500  31.02500  28.52500  91.52500 186.52500  58.77500\n [5,]   8.62000 127.62000  46.22000 162.62000  93.02000 146.82000 166.42000\n [6,] 163.01667  45.51667  27.68333  68.68333  86.35000 140.51667  54.68333\n [7,]  61.01429  64.15714 111.72857 113.72857 129.01429 123.01429 102.15714\n [8,]  26.01250  74.51250  11.76250   8.13750  22.01250  15.13750  80.13750\n [9,]  67.90000  52.12222  43.56667  22.45556  68.34444  80.01111  60.78889\n[10,]  81.51000  42.81000  97.61000  67.41000  13.81000  29.01000  58.71000\n           [,8]      [,9]\n [1,] 271.10000 346.10000\n [2,] 386.55000  18.05000\n [3,] 258.70000 118.70000\n [4,]  89.77500  82.27500\n [5,]  35.62000  25.42000\n [6,] 155.01667  20.85000\n [7,]  60.72857 141.30000\n [8,]  84.63750  81.01250\n [9,] 108.01111  20.23333\n[10,]  67.61000  67.51000\n\n, , 6\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 333.10000 216.10000 207.100000 554.10000 617.10000 294.10000 139.10000\n [2,] 427.55000 376.55000  18.050000  98.55000 390.55000  48.05000 245.05000\n [3,] 125.36667 300.36667  44.366667 247.70000 189.70000  64.70000 233.03333\n [4,] 161.77500 204.27500 157.525000 184.27500 248.52500 217.52500  78.27500\n [5,]  62.02000  25.02000 151.420000 149.22000  94.42000  78.82000 185.82000\n [6,]  40.85000  53.01667  46.516667  70.35000 140.51667 132.01667  33.68333\n [7,]  72.01429 117.15714  46.300000  61.44286 112.87143  73.15714   3.30000\n [8,] 120.51250  63.63750  18.512500  49.01250 114.76250  83.01250  89.63750\n [9,]  35.23333  22.34444   9.455556  27.34444  98.45556  36.56667  68.78889\n[10,]  77.91000  30.61000  80.110000  24.11000   0.81000  32.71000  73.31000\n           [,8]      [,9]\n [1,] 656.10000 698.10000\n [2,] 183.05000 369.55000\n [3,]  26.03333 264.70000\n [4,] 135.02500   7.27500\n [5,] 100.62000 119.22000\n [6,] 102.68333  22.51667\n [7,]  20.15714  56.15714\n [8,]  21.88750  40.63750\n [9,]  11.90000  49.01111\n[10,]  68.21000   8.41000\n\n, , 7\n\n           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 397.10000 771.10000 623.10000  92.10000 152.10000  76.10000 660.10000\n [2,] 194.55000 241.05000  46.05000 286.55000 498.05000 125.05000 136.05000\n [3,] 304.70000 158.36667 250.70000 246.03333 124.03333 126.70000 109.36667\n [4,] 226.27500 165.02500 183.52500  41.52500  63.52500 114.02500 243.52500\n [5,] 195.02000  26.62000  73.02000 115.82000  51.62000  63.82000  90.82000\n [6,]  66.85000  74.01667 127.01667 101.18333 161.68333  20.18333  37.01667\n [7,]  65.72857  26.44286 140.87143  39.87143 132.87143  64.72857  42.01429\n [8,]  34.63750  15.26250  53.51250  71.76250 107.01250  93.38750  44.51250\n [9,] 107.01111  79.78889  75.23333  51.90000  23.23333  49.34444  91.34444\n[10,]  35.31000  43.11000  23.81000   5.21000  79.41000  27.31000  92.91000\n           [,8]      [,9]\n [1,] 617.10000 863.10000\n [2,]  36.55000 163.05000\n [3,] 314.70000 191.70000\n [4,] 104.77500 166.27500\n [5,]  68.62000 111.22000\n [6,] 129.35000  77.68333\n [7,]  44.87143 122.01429\n [8,] 109.01250  11.26250\n [9,]  25.34444  44.34444\n[10,]  60.31000  87.61000\n\n, , 8\n\n           [,1]      [,2]       [,3]      [,4]      [,5]      [,6]      [,7]\n [1,] 674.10000 837.10000 896.100000 710.10000 188.10000 531.10000 457.10000\n [2,] 257.55000 284.55000 129.050000 381.05000 303.05000 413.05000  28.05000\n [3,] 230.36667 276.70000  72.700000 104.70000 246.70000 225.03333 306.70000\n [4,] 210.52500  67.77500  64.775000  46.52500  20.27500  88.77500 232.52500\n [5,]  56.82000 174.22000 132.420000  85.42000 130.62000 167.62000 181.02000\n [6,]  61.51667 102.85000 129.016667 138.68333  25.18333  32.85000  31.51667\n [7,]  12.30000 103.15714  61.871429  53.30000 117.30000  53.87143 129.30000\n [8,]  32.26250  92.51250  51.637500  37.01250  57.88750  46.26250 119.13750\n [9,]   7.90000  92.45556   7.011111  85.12222  55.23333  92.56667  11.12222\n[10,]        NA  43.21000   2.910000  15.61000  19.91000   9.81000   6.01000\n            [,8]      [,9]\n [1,] 705.100000 854.10000\n [2,] 250.050000 202.55000\n [3,]  17.366667 173.36667\n [4,] 227.025000 152.77500\n [5,] 136.220000 180.62000\n [6,]  37.016667  94.51667\n [7,]   7.157143  82.72857\n [8,] 117.137500  44.51250\n [9,]  73.455556  26.45556\n[10,]  36.610000  79.01000\n\nbc.d(x, y, \"^\")\n\n, , 1\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 5.211000e+02 6.981000e+02 4.921000e+02 7.871000e+02 8.151000e+02\n [2,] 6.562620e+05 7.816328e+05 6.258392e+05 3.856410e+03 1.042441e+04\n [3,] 2.928872e+08 6.452945e+07 2.244963e+07 5.362528e+07 2.992209e+06\n [4,] 1.786161e+11 7.877493e+11 3.717524e+10 1.063772e+11 8.321864e+10\n [5,] 1.360231e+09 1.520327e+14 1.930890e+13 1.742824e+14 3.128645e+11\n [6,] 4.849129e+12 3.261678e+15 3.087080e+17 5.497679e+17 1.108601e+17\n [7,] 7.629851e+16 4.426614e+20 9.235990e+18 8.664729e+19 2.349675e+20\n [8,] 4.594973e+08 4.125902e+19 3.280384e+19 4.543694e+23 4.065528e+22\n [9,] 6.361498e+24 1.244443e+22 8.450751e+21 1.021549e+26 3.739370e+25\n[10,] 2.376281e+26 1.310490e+29 5.003592e+29 7.336201e+28 5.742720e+20\n              [,6]         [,7]         [,8]         [,9]\n [1,] 3.811000e+02 7.061000e+02 3.841000e+02 1.781000e+02\n [2,] 2.491008e+05 3.316041e+04 6.211016e+05 8.337516e+05\n [3,] 1.406891e+08 1.852905e+08 5.948233e+05 1.106611e+08\n [4,] 2.614185e+10 7.380117e+09 5.891349e+11 9.003558e+11\n [5,] 2.018284e+14 6.274684e+09 9.855839e+14 4.966015e+12\n [6,] 4.827084e+15 5.686769e+13 5.910950e+17 3.015694e+15\n [7,] 1.917813e+18 5.464242e+15 1.635742e+20 1.399635e+18\n [8,] 6.829745e+18 1.090968e+23 1.345529e+19 2.639888e+21\n [9,] 1.240773e+23 4.500046e+26 9.220107e+24 1.880180e+21\n[10,] 6.608754e+28 7.675171e+26 1.161583e+15 4.944230e+26\n\n, , 2\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 9.651000e+02 4.510000e+01 1.771000e+02 1.211000e+02 9.811000e+02\n [2,] 2.343528e+05 3.575881e+04 8.118010e+03 3.651921e+04 2.884764e+05\n [3,] 8.388286e+08 3.951806e+06 9.186135e+08 1.160936e+06 4.136602e+08\n [4,] 4.139178e+11 9.493899e+11 5.181287e+10 4.543313e+07 3.838130e+11\n [5,] 1.559357e+13 2.314799e+12 9.090052e+14 3.902657e+11 1.751990e+07\n [6,] 2.723322e+17 1.640968e+16 1.688557e+14 4.957534e+16 7.638708e+17\n [7,] 7.197096e+20 1.853138e+18 1.476539e+18 3.178985e+12 1.973766e+20\n [8,] 9.718231e+19 7.313603e+19 3.229844e+22 3.051133e+23 2.939701e+23\n [9,] 1.915789e+22 3.139781e+23 2.511479e+23 7.211519e+24 1.656078e+23\n[10,] 7.528969e+28 1.340722e+27 5.742720e+20 1.480220e+29 5.868694e+29\n              [,6]         [,7]         [,8]         [,9]\n [1,] 6.951000e+02 4.381000e+02 6.771000e+02 9.341000e+02\n [2,] 1.815612e+05 3.870084e+05 1.384584e+05 1.414512e+05\n [3,] 7.195640e+08 1.602207e+07 3.864876e+07 5.666735e+07\n [4,] 1.076373e+10 5.002464e+07 8.978179e+08 1.044731e+08\n [5,] 3.096976e+13 1.282021e+14 7.028612e+07 3.870705e+14\n [6,] 4.923092e+08 1.794071e+11 4.764439e+16 3.224755e+17\n [7,] 2.884406e+17 1.724963e+14 2.856325e+20 1.057489e+19\n [8,] 8.135787e+18 8.796580e+23 1.967646e+23 1.864685e+16\n [9,] 1.181402e+23 5.448327e+21 1.543395e+25 2.873424e+23\n[10,] 1.248160e+28 1.689559e+29 5.614558e+23 9.722997e+28\n\n, , 3\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 9.741000e+02 2.721000e+02 1.810000e+01 5.131000e+02 3.141000e+02\n [2,] 3.066001e+04 4.845552e+05 4.721064e+05 3.446864e+05 2.372664e+05\n [3,] 6.474391e+08 8.877808e+08 1.775991e+08 1.549407e+08 6.296432e+08\n [4,] 9.128429e+09 1.412945e+11 8.568028e+11 1.394598e+11 3.486078e+10\n [5,] 1.850602e+10 1.301472e+14 7.327208e+12 5.488941e+12 9.775612e+13\n [6,] 8.918250e+17 1.224851e+15 7.753818e+14 2.925684e+16 6.080399e+12\n [7,] 1.386839e+17 4.255459e+20 5.956835e+11 9.098008e+11 1.311347e+20\n [8,] 2.909071e+11 3.021412e+20 1.679400e+23 4.577014e+22 2.298287e+23\n [9,] 2.132199e+25 3.887369e+25 1.095841e+22 2.190643e+23 7.751727e+26\n[10,] 1.593683e+26 3.647041e+26 2.617419e+20 3.491448e+23 1.572291e+29\n              [,6]         [,7]         [,8]         [,9]\n [1,] 5.461000e+02 2.921000e+02 4.331000e+02 1.821000e+02\n [2,] 2.758921e+04 8.065836e+05 3.352561e+04 8.894376e+05\n [3,] 8.758754e+07 3.565517e+08 4.765626e+08 1.689411e+06\n [4,] 1.237405e+11 6.740693e+11 4.159858e+11 9.358681e+10\n [5,] 8.876792e+13 4.843812e+10 1.272383e+14 4.336192e+14\n [6,] 2.508997e+13 5.212489e+17 3.550334e+14 9.787920e+14\n [7,] 1.007021e+14 3.485986e+19 8.926108e+19 2.693075e+20\n [8,] 8.162332e+22 3.495264e+21 2.006555e+23 7.695679e+17\n [9,] 1.891819e+26 1.256851e+24 2.283932e+25 1.988564e+15\n[10,] 2.279338e+22 3.424728e+20 2.269043e+26 3.595814e+28\n\n, , 4\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 1.591000e+02 5.021000e+02 7.601000e+02 2.381000e+02 2.741000e+02\n [2,] 2.746808e+05 9.672100e+02 1.590121e+04 9.566796e+05 8.429076e+05\n [3,] 5.719937e+08 4.053883e+08 7.390085e+08 4.592117e+07 3.460963e+08\n [4,] 4.370950e+11 1.204359e+11 7.840766e+07 7.978313e+11 3.265611e+10\n [5,] 2.396397e+10 3.521875e+13 9.235449e+08 1.109504e+10 7.876301e+10\n [6,] 3.732655e+16 9.065673e+14 4.750104e+03 3.540673e+17 3.580348e+16\n [7,] 1.375802e+19 3.399244e+14 1.107985e+08 7.999550e+19 1.330101e+16\n [8,] 1.629681e+23 9.001673e+22 2.365418e+23 8.040069e+23 3.348840e+17\n [9,] 3.956327e+26 7.196126e+26 2.558037e+09 1.435124e+23 9.623359e+19\n[10,] 1.992029e+19 1.848157e+24 1.518894e+26 2.055594e+28 5.443726e+19\n              [,6]         [,7]         [,8]         [,9]\n [1,] 6.410000e+01 5.701000e+02 1.841000e+02 1.351000e+02\n [2,] 6.974881e+04 1.640961e+04 2.163180e+05 1.253868e+05\n [3,] 5.355852e+08 3.248368e+06 9.057934e+07 5.235560e+07\n [4,] 2.004306e+11 4.657260e+11 2.416128e+11 5.004844e+11\n [5,] 1.867945e+13 1.634399e+14 2.393768e+12 3.020992e+14\n [6,] 8.973176e+16 9.598548e+09 7.890065e+13 5.833944e+17\n [7,] 6.130709e+19 8.387675e+18 4.090008e+20 3.597063e+20\n [8,] 4.243946e+19 3.829090e+22 2.509710e+21 1.091464e+16\n [9,] 6.743593e+25 5.624667e+20 1.124569e+23 3.867464e+19\n[10,] 1.267644e+28 1.254383e+23 8.347513e+29 8.143572e+16\n\n, , 5\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 8.610000e+01 1.171000e+02 6.791000e+02 9.351000e+02 7.601000e+02\n [2,] 9.610000e+00 2.343961e+04 4.383764e+05 4.693620e+05 1.781684e+05\n [3,] 2.416263e+07 2.569849e+07 8.875037e+05 3.968672e+07 1.298597e+06\n [4,] 1.201813e+10 7.380117e+09 2.371849e+08 1.694894e+08 1.796383e+10\n [5,] 1.487258e+08 1.057898e+14 6.591735e+11 3.554019e+14 2.176365e+13\n [6,] 8.755875e+17 4.148874e+14 2.099993e+13 4.897965e+15 1.934112e+16\n [7,] 2.592430e+18 3.684694e+18 1.789930e+20 2.026625e+20 4.899490e+20\n [8,] 3.517035e+18 1.594237e+22 6.147761e+15 3.225878e+14 9.248576e+17\n [9,] 1.188531e+25 1.099990e+24 2.190643e+23 5.624667e+20 1.260409e+25\n[10,] 1.294520e+29 2.067532e+26 7.851328e+29 1.937507e+28 2.523113e+21\n              [,6]         [,7]         [,8]         [,9]\n [1,] 9.091000e+02 5.021000e+02 2.711000e+02 3.461000e+02\n [2,] 1.790136e+05 6.195264e+05 5.976836e+05 1.303210e+03\n [3,] 1.942051e+08 2.034012e+08 4.674693e+08 4.515605e+07\n [4,] 3.098762e+11 3.054995e+09 1.662883e+10 1.173037e+10\n [5,] 2.131946e+14 3.989125e+14 1.791924e+11 3.316865e+10\n [6,] 3.591489e+17 1.247491e+15 6.474077e+17 3.833044e+12\n [7,] 3.510550e+20 9.562412e+19 2.508636e+18 9.261502e+20\n [8,] 4.625441e+16 2.853686e+22 4.417967e+22 3.112692e+22\n [9,] 5.206373e+25 4.391374e+24 7.751727e+26 2.201859e+20\n[10,] 4.221602e+24 4.865425e+27 1.995765e+28 1.966442e+28\n\n, , 6\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.331000e+02 2.161000e+02 2.071000e+02 5.541000e+02 6.171000e+02\n [2,] 7.311960e+05 5.671596e+05 1.303210e+03 3.884841e+04 6.101172e+05\n [3,] 5.319980e+07 7.316763e+08 2.357948e+06 4.103380e+08 1.843172e+08\n [4,] 1.753419e+11 4.457597e+11 1.576297e+11 2.951927e+11 9.766080e+11\n [5,] 2.867536e+12 3.063984e+10 2.487518e+14 2.311986e+14 2.345147e+13\n [6,] 2.168003e+14 1.036053e+15 4.726711e+14 5.655775e+15 3.591489e+17\n [7,] 8.272121e+18 2.494984e+20 3.756239e+17 2.722614e+18 1.922093e+20\n [8,] 7.464086e+23 4.512579e+21 2.314411e+17 5.586949e+20 5.048006e+23\n [9,] 3.241650e+22 5.379088e+20 2.340809e+17 3.311346e+21 3.367787e+26\n[10,] 8.240092e+28 7.221598e+24 1.088597e+29 6.637004e+23 1.215767e+09\n              [,6]         [,7]         [,8]         [,9]\n [1,] 2.941000e+02 1.391000e+02 6.561000e+02 6.981000e+02\n [2,] 9.235210e+03 2.401980e+05 1.340292e+05 5.462688e+05\n [3,] 7.312681e+06 3.416787e+08 4.763795e+05 5.007553e+08\n [4,] 5.731611e+11 9.610197e+09 8.509356e+10 7.170872e+05\n [5,] 9.506752e+12 6.923286e+14 3.223084e+13 7.526544e+13\n [6,] 2.469904e+17 6.813933e+13 5.468992e+16 6.080399e+12\n [7,] 9.235990e+18 3.509812e+09 1.113497e+15 1.450512e+18\n [8,] 3.783274e+22 6.992585e+22 8.836681e+17 1.247773e+20\n [9,] 4.528464e+22 1.336125e+25 1.853981e+18 6.321695e+23\n[10,] 1.402185e+25 4.483655e+28 2.180120e+28 1.769946e+19\n\n, , 7\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 3.971000e+02 7.711000e+02 6.231000e+02 9.210000e+01 1.521000e+02\n [2,] 1.513988e+05 2.324204e+05 8.482410e+03 3.284436e+05 9.922152e+05\n [3,] 7.638026e+08 1.072396e+08 4.254287e+08 4.021107e+08 5.152037e+07\n [4,] 6.710985e+11 1.898624e+11 2.904162e+11 7.611645e+08 4.168873e+09\n [5,] 8.815476e+14 4.177248e+10 6.487228e+12 6.512801e+13 1.145355e+12\n [6,] 4.164050e+15 7.671577e+15 1.959168e+17 5.006813e+16 8.334874e+17\n [7,] 4.364813e+18 7.444661e+15 9.066647e+20 1.319225e+17 6.021539e+20\n [8,] 3.476100e+19 4.939981e+16 1.128137e+21 1.180050e+22 2.885333e+23\n [9,] 7.129227e+26 5.077668e+25 2.991406e+25 1.058495e+24 7.641635e+20\n[10,] 3.012848e+25 2.217074e+26 5.855904e+23 1.473592e+17 9.971304e+28\n              [,6]         [,7]         [,8]         [,9]\n [1,] 7.610000e+01 6.601000e+02 6.171000e+02 8.631000e+02\n [2,] 6.255001e+04 7.403841e+04 5.343610e+03 1.063412e+05\n [3,] 5.491533e+07 3.531984e+07 8.414998e+08 1.902086e+08\n [4,] 4.327532e+10 9.003558e+11 3.085110e+10 1.956806e+11\n [5,] 3.308522e+12 1.930890e+13 4.754486e+12 5.318198e+13\n [6,] 3.154023e+12 1.200304e+14 2.185275e+17 1.025356e+16\n [7,] 3.920653e+18 1.903116e+17 3.016307e+17 3.315592e+20\n [8,] 9.705768e+22 2.585686e+20 3.346034e+23 4.343085e+15\n [9,] 6.719345e+23 1.715228e+26 1.671582e+21 2.568831e+23\n[10,] 2.307900e+24 4.793190e+29 6.366391e+27 2.664016e+29\n\n, , 8\n\n              [,1]         [,2]         [,3]         [,4]         [,5]\n [1,] 6.741000e+02 8.371000e+02 8.961000e+02 7.101000e+02 1.881000e+02\n [2,] 2.653280e+05 3.238748e+05 6.661561e+04 5.807964e+05 3.673572e+05\n [3,] 3.300826e+08 5.719937e+08 1.037450e+07 3.098873e+07 4.053883e+08\n [4,] 5.028688e+11 5.401546e+09 4.506814e+09 1.199459e+09 4.325969e+07\n [5,] 1.850786e+12 5.015798e+14 1.272383e+14 1.421176e+13 1.188224e+14\n [6,] 2.528508e+15 5.522469e+16 2.151703e+17 3.319351e+17 1.190109e+13\n [7,] 3.507697e+13 1.023721e+20 2.858362e+18 1.006414e+18 2.516358e+20\n [8,] 1.969264e+19 9.001673e+22 8.480893e+20 5.908908e+19 2.115428e+21\n [9,] 4.643296e+16 1.912404e+26 1.585858e+16 9.090110e+25 1.853505e+24\n[10,]           NA 2.269043e+26 4.354416e+14 8.590709e+21 9.788420e+22\n              [,6]         [,7]         [,8]         [,9]\n [1,] 5.311000e+02 4.571000e+02 7.051000e+02 8.541000e+02\n [2,] 6.824412e+05 3.147210e+03 2.501000e+05 1.641060e+05\n [3,] 3.076836e+08 7.789419e+08 1.414208e+05 1.406891e+08\n [4,] 1.590020e+10 7.483738e+11 6.800404e+11 1.394598e+11\n [5,] 4.135035e+14 6.074112e+14 1.465731e+14 6.007298e+14\n [6,] 5.862998e+13 4.572452e+13 1.200304e+14 3.326273e+16\n [7,] 1.084416e+18 4.975949e+20 7.922533e+11 2.184112e+19\n [8,] 3.520081e+20 6.809383e+23 5.946857e+23 2.585686e+20\n [9,] 1.933189e+26 1.009036e+18 2.412151e+25 2.459431e+21\n[10,] 8.254487e+19 6.148154e+17 4.325111e+25 9.480268e+28\n\nbc.d(x, y, \"==\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"!=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.d(x, y, \"&lt;\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"&gt;\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\nbc.d(x, y, \"&lt;=\")\n\n, , 1\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 2\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 3\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 4\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 5\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 6\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE\n\n, , 7\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n, , 8\n\n       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9]\n [1,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [2,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [3,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [4,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [5,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [6,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [7,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [8,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n [9,] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[10,]    NA FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\nbc.d(x, y, \"&gt;=\")\n\n, , 1\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 2\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 3\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 4\n\n      [,1] [,2]  [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE  TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 5\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 6\n\n      [,1] [,2] [,3] [,4]  [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE  TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE\n\n, , 7\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n\n, , 8\n\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9]\n [1,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [2,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [3,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [4,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [5,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [6,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [7,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [8,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n [9,] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n[10,]   NA TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE"
  },
  {
    "objectID": "man/outer/bc.list.html",
    "href": "man/outer/bc.list.html",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n\n, , 1\n\n      [,1]      [,2]     \n [1,] logical,2 logical,2\n [2,] logical,2 logical,2\n [3,] logical,2 logical,2\n [4,] logical,2 logical,2\n [5,] logical,2 logical,2\n [6,] logical,2 logical,2\n [7,] logical,2 logical,2\n [8,] logical,2 logical,2\n [9,] logical,2 logical,2\n[10,] logical,2 logical,2\n\n, , 2\n\n      [,1]      [,2]     \n [1,] logical,2 logical,2\n [2,] logical,2 logical,2\n [3,] logical,2 logical,2\n [4,] logical,2 logical,2\n [5,] logical,2 logical,2\n [6,] logical,2 logical,2\n [7,] logical,2 logical,2\n [8,] logical,2 logical,2\n [9,] logical,2 logical,2\n[10,] logical,2 logical,2"
  },
  {
    "objectID": "man/outer/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "href": "man/outer/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n\n, , 1\n\n      [,1]      [,2]     \n [1,] logical,2 logical,2\n [2,] logical,2 logical,2\n [3,] logical,2 logical,2\n [4,] logical,2 logical,2\n [5,] logical,2 logical,2\n [6,] logical,2 logical,2\n [7,] logical,2 logical,2\n [8,] logical,2 logical,2\n [9,] logical,2 logical,2\n[10,] logical,2 logical,2\n\n, , 2\n\n      [,1]      [,2]     \n [1,] logical,2 logical,2\n [2,] logical,2 logical,2\n [3,] logical,2 logical,2\n [4,] logical,2 logical,2\n [5,] logical,2 logical,2\n [6,] logical,2 logical,2\n [7,] logical,2 logical,2\n [8,] logical,2 logical,2\n [9,] logical,2 logical,2\n[10,] logical,2 logical,2"
  },
  {
    "objectID": "Readme.html#overview",
    "href": "Readme.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’ package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions repetition mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of operations, including, but not limited to, the following:\n\nrelational operations (like ==, !=, &lt;, &gt;, &lt;=, &gt;=, etc.);\narithmetic operations (like +, -, *, /, ^, etc.);\nBoolean combiner operations (like &, |, xor, etc.);\nstring concatenation, string (in)equality, and string distance (Levenshtein) operations.\n\nBase ‘R’ outer() function has some sloppy rules regarding the dimensions of the output, making it hard to predict the output shape.\nThe outer-like functions provided by ‘broadcast’ have very strict broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is an broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments."
  },
  {
    "objectID": "Readme.html#why-use-broadcast",
    "href": "Readme.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than repeating dimensions.\nThis is not simply a need for speed.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences, ‘R’ should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nBroadcasting can make many applications much easier to write.\nFor Example: Suppose you want to compute some metric on all possible pair-wise combinations of the elements of 2 vectors.\nYou could write slow and ugly nested for-loops…\nBut you can instead also make the vectors orthogonal, and perform the broadcasting computation on the 2 orthogonal vectors.\nThe broadcasted method runs much faster, is faster to type, and easier to reason about, than using the clumsy nested for-loops.\nFor more practical examples, see Examples of Practical Applictaions.\n \nHigh Test Coverage\nThe ‘broadcast’ package has been developed with a set of unit tests that have high (&gt; 95%) coverage.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of R to that of the other language, and vice-versa, which wastes precious time and memory. ‘broadcast’ requires no such translations of structures, and thus does not waste precious time and memory.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour of some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas ‘R’ supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure consistent behaviour."
  },
  {
    "objectID": "Readme.html#documentation",
    "href": "Readme.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\n\nInstallation:\nBroadcasting Explained:\nExamples of Practical Applications:\nComparisons & Benchmarks:"
  },
  {
    "objectID": "vignettes/b_installation.html",
    "href": "vignettes/b_installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install ‘broadcast’ from GitHub, one may run the following code in ‘R’:\n\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n‘broadcast’ is not a large package per-sé, but it does contain a large amount of compiled code (‘C’ and ‘C++’). Compilation of the package may be slow on some operating systems, especially Linux systems; please be patient. On my own personal laptop (Windows 11), installation takes about 2 minutes.\nIf installation is too slow, one may try to speed up the installation using multi-threading, for example like so:\n\n\nnthreads &lt;- 8L # specify number of threads\nSys.setenv(MAKEFLAGS = paste0(\"-j\", nthreads)) # may speed up installation\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n \nTo attach the package - thus expose its functions to the namespace - please use the following:\n\n\nlibrary(broadcast)\n\n \nTo open the introduction help page of the ‘broadcast’ package, please use any of the following:\n\n\n?broadcast::broadcast\n?broadcast::broadcast_help\n?broadcast::`broadcast-package`"
  },
  {
    "objectID": "vignettes/d_practical_applications.html",
    "href": "vignettes/d_practical_applications.html",
    "title": "Practical Applications",
    "section": "",
    "text": "Introduction\nBroadcasting comes up frequent enough in real world problems. This articles gives a few examples of these.\n \n\n\nVector quantization\nThis first example is taken from Numpy’s own documentation.\nThe basic operation in Vector Quantization (VQ) finds the closest point in a set of points, called codes in VQ jargon, to a given point, called the observation. In the very simple, two-dimensional case shown below, the values in observation describe the weight and height of an athlete to be classified. The codes represent different classes of athletes. Finding the closest point requires calculating the distance between observation and each of the codes. The shortest distance provides the best match. In this example, codes[0] is the closest class indicating that the athlete is likely a basketball player.\n\n\nobservation &lt;- array(c(111.0, 188.0), dim = c(1, 2))\ncodes &lt;- array(\n  c(102.0, 203.0,\n    132.0, 193.0,\n    45.0, 155.0,\n    57.0, 173.0),\n  dim = c(4, 2)\n)\n\ndiff &lt;- bc.num(codes, observation, \"-\")\ndist &lt;- apply(diff^2, 2L, sum) |&gt; sqrt()\nwhich.min(dist); dist[which.min(dist)]\n#&gt; [1] 1\n#&gt; [1] 125.3395\n\n \n\n\nFind most resembling string\nIf you have 2 vectors of strings, and you want to find which pair of strings (one string from each vector), you’ll need to find the string distance of all possible combinations.\nThis can be done very fast and very conveniently with ‘broadcast’, using the following code:\n\nx &lt;- array(month.name)\ny &lt;- array(month.abb, c(1, 12))\n\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(x, y)\nprint(out)\n#&gt;           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n#&gt; January     4   7   5   6   5   5   5   6   7   7   7   7\n#&gt; February    7   5   6   7   6   7   7   7   7   8   8   7\n#&gt; March       4   5   2   4   3   5   5   5   5   4   5   4\n#&gt; April       5   5   4   2   5   5   4   4   5   5   5   5\n#&gt; May         2   3   1   3   0   3   3   3   3   3   3   3\n#&gt; June        2   4   4   4   4   1   2   3   4   4   4   4\n#&gt; July        3   4   4   4   3   2   1   3   4   4   4   4\n#&gt; August      6   6   6   5   6   5   5   3   6   5   6   6\n#&gt; September   9   7   8   7   9   9   9   9   6   8   9   8\n#&gt; October     7   6   6   6   7   7   7   7   6   4   6   6\n#&gt; November    8   6   7   7   8   8   8   8   7   8   5   7\n#&gt; December    8   6   7   7   8   8   8   8   7   7   8   5"
  }
]