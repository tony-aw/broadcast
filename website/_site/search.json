[
  {
    "objectID": "vignettes/g_benchmarks_other.html",
    "href": "vignettes/g_benchmarks_other.html",
    "title": "Other benchmarks",
    "section": "",
    "text": "Introduction\nIn this article, the performance of the bind_array() function from ‘broadcast’ is compared to the performance of the abind() function from the ‘abind’ package.\n \nThe following code is used:\n\n\nalong &lt;- 2L\nn &lt;- 150L\nnms &lt;- function(n) sample(letters, n, TRUE)\nx &lt;- array(as.double(1:25), c(n, n, n))\ny &lt;- array(as.double(-1:-25), c(n, n, n))\ndimnames(x) &lt;- lapply(dim(x), nms)\ndimnames(y) &lt;- lapply(dim(y), nms)\ninput &lt;- list(x, y)\n\nbm_abind &lt;- bench::mark(\n  abind = abind::abind(input, along = 2),\n  broadcast = bind_array(input, 2),\n  cbind = do.call(cbind, input),\n  min_iterations = 100,\n  check = FALSE # because abind adds empty dimnames\n)\nsummary(bm_abind)\nplot(bm_abind)\n\nAnd here are the results:\n\nload(\"bm_abind.RData\")\nsummary(bm_abind)\n#&gt; # A data frame: 3 × 6\n#&gt;   expression      min   median `itr/sec` mem_alloc `gc/sec`\n#&gt;   &lt;bch:expr&gt; &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 abind          69ms   79.5ms      11.0   206.3MB     12.9\n#&gt; 2 broadcast    23.5ms   30.9ms      28.0   103.4MB     22.7\n#&gt; 3 cbind         9.6ms   10.2ms      76.9    51.5MB     13.8\nplot(bm_abind)\n#&gt; Loading required namespace: tidyr"
  },
  {
    "objectID": "vignettes/e_practical_applications.html#casting-with-equal-group-sizes",
    "href": "vignettes/e_practical_applications.html#casting-with-equal-group-sizes",
    "title": "Practical Applications",
    "section": "Casting with equal group sizes",
    "text": "Casting with equal group sizes\nSuppose you read the following matrix from a file:\n\nx &lt;- cbind(\n  id = rep(1:3, each = 2),\n  grp = rep(1:2, 3),\n  val = rnorm(6)\n)\nprint(x)\n#&gt;      id grp          val\n#&gt; [1,]  1   1  0.003584527\n#&gt; [2,]  1   2  0.487488548\n#&gt; [3,]  2   1 -1.339326652\n#&gt; [4,]  2   2  0.048575615\n#&gt; [5,]  3   1 -0.170147442\n#&gt; [6,]  3   2 -0.666388609\n\nFor computing purposes, you may need the rows of each group - defined in column “grp” - to be cast to a new dimension.\n‘broadcast’ allows users to cast subsets of an array onto a new dimension, based on some grouping factor. In this case, the following will do the job:\n\nmargin &lt;- 1L # we cast from the rows, so margin = 1\ngrp &lt;- as.factor(x[, 2]) # factor to define which rows belongs to which group\nlevels(grp) &lt;- c(\"a\", \"b\") # names for the new dimension\nout &lt;- acast(x, margin, grp) # casting is performed here\nprint(out)\n#&gt; , , a\n#&gt; \n#&gt;      id grp          val\n#&gt; [1,]  1   1  0.003584527\n#&gt; [2,]  2   1 -1.339326652\n#&gt; [3,]  3   1 -0.170147442\n#&gt; \n#&gt; , , b\n#&gt; \n#&gt;      id grp         val\n#&gt; [1,]  1   2  0.48748855\n#&gt; [2,]  2   2  0.04857561\n#&gt; [3,]  3   2 -0.66638861\n\nNotice that the dimension-names of the new dimension (dimension 3) are equal to levels(grp).\nPerhaps you’d like to get the original array back when you’re done computing; one can get the original array back like so:\n\nasplit(out, ndim(out)) |&gt; bind_array(along = margin)\n#&gt;     id grp          val\n#&gt; a.1  1   1  0.003584527\n#&gt; a.2  2   1 -1.339326652\n#&gt; a.3  3   1 -0.170147442\n#&gt; b.1  1   2  0.487488548\n#&gt; b.2  2   2  0.048575615\n#&gt; b.3  3   2 -0.666388609\n\n…though the order of, in this case, the rows (because margin = 1) will not necessarily be the same as the original array."
  },
  {
    "objectID": "vignettes/e_practical_applications.html#casting-with-unequal-group-sizes",
    "href": "vignettes/e_practical_applications.html#casting-with-unequal-group-sizes",
    "title": "Practical Applications",
    "section": "Casting with unequal group sizes",
    "text": "Casting with unequal group sizes\nThe casting arrays also works when the groups have unequal sizes, though there are a few things to keep in mind.\nLet’s start again with the input array:\n\nx &lt;- cbind(\n  id = c(rep(1:3, each = 2), 1),\n  grp = c(rep(1:2, 3), 2),\n  val = rnorm(7)\n)\nprint(x)\n#&gt;      id grp         val\n#&gt; [1,]  1   1 -0.05065968\n#&gt; [2,]  1   2 -1.91835901\n#&gt; [3,]  2   1  0.03820144\n#&gt; [4,]  2   2  0.12069874\n#&gt; [5,]  3   1  1.37443053\n#&gt; [6,]  3   2 -2.81179792\n#&gt; [7,]  1   2 -2.61679845\n\nOnce again, the acast() function can be used to cast the group subsets from the rows over a new dimension. But this time, we need to specify fill = TRUE to allow acast() to fill the gaps, otherwise an error is called.\nThus one can cast in this case like so:\n\ngrp &lt;- as.factor(x[, 2])\nlevels(grp) &lt;- c(\"a\", \"b\")\nmargin &lt;- 1L\nout &lt;- acast(x, margin, grp, fill = TRUE)\nprint(out)\n#&gt; , , a\n#&gt; \n#&gt;      id grp         val\n#&gt; [1,]  1   1 -0.05065968\n#&gt; [2,]  2   1  0.03820144\n#&gt; [3,]  3   1  1.37443053\n#&gt; [4,] NA  NA          NA\n#&gt; \n#&gt; , , b\n#&gt; \n#&gt;      id grp        val\n#&gt; [1,]  1   2 -1.9183590\n#&gt; [2,]  2   2  0.1206987\n#&gt; [3,]  3   2 -2.8117979\n#&gt; [4,]  1   2 -2.6167984\n\nNotice that some values are missing ( NA ); if some groups have unequal number of elements, acast() needs to fill the gaps with missing values.\nOnce again, we can get the original array back when we’re done like so:\n\nasplit(out, ndim(out)) |&gt; bind_array(along = margin)\n#&gt;     id grp         val\n#&gt; a.1  1   1 -0.05065968\n#&gt; a.2  2   1  0.03820144\n#&gt; a.3  3   1  1.37443053\n#&gt; a.4 NA  NA          NA\n#&gt; b.1  1   2 -1.91835901\n#&gt; b.2  2   2  0.12069874\n#&gt; b.3  3   2 -2.81179792\n#&gt; b.4  1   2 -2.61679845\n\n… but we do keep the missing values when the groups have an unequal number of elements."
  },
  {
    "objectID": "vignettes/c_functions.html",
    "href": "vignettes/c_functions.html",
    "title": "Functions Overview",
    "section": "",
    "text": "Introduction\nThe ‘broadcast’ package provides 5 main functionalities:\n\nouter-like functions to perform broadcasted outer-computations\nbroadcasted dimensional binding of arrays (and also matrices and data.tables)\nbroadcasted generic pair-wise functions\ncasting/pivoting an array into a new dimension\narray typecasting with dimensions and names preserved\n\nThis guide gives a brief overview of the functions provided by the ‘broadcast’ ‘R’-package.\n \n\n\nOuter-like functions\nThe ‘broadcast’ package provides functions that perform Broadcasted outer operations, similar to base R’s outer() function.\nWhile the outer() function from base ‘R’ is only optimised for “*” and type-casts greedily, ‘broadcast’ provides a separate outer-like function for each set of operations associated with a certain type, which are all highly optimised, and only perform type-casting when needed without allocating additional memory.\nThe outer-like functions are the following:\n\nbc.b(): Broadcasted Boolean operations.\nIncludes the &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;= operations.\nbc.i() Broadcasted (53bit) Integer Numeric operations.\nIncludes relational operations, basic arithmetic, and the GCD (greatest common divisor) operation.\nbc.d(): Broadcasted (64bit) Decimal Numeric operations.\nIncludes relational operations, relational operations with Machine precision specification, and arithmetic operations.\nbc.cplx(): Broadcasted Complex Numeric operations.\nIncludes (in)equality operations, and basic arithmetic operations.\nbc.str(): Broadcasted String operations.\nIncludes operations for (in)equality, concatenation, and string distance (Levenshtein) calculation.\nbc.list(): Broadcasted operations on Recursive arrays.\nThis is outer-like function does not include built-in optimised operations, but does accept almost any binary function.\n\nMuch like the outer() function from base ‘R’, the outer-like functions provided by ‘broadcast’, are pair-wise functions; i.e. they operate on 2 arrays at a time.\nThis is intentional, as it is quite difficult to reason about broadcasting when it involves more than a pair of arrays.\n \n\n\n\n\n\n\nNote\n\n\n\n\nbc.num() is an alias for bc.d()\nbc.i(x, y \"+\") is faster and more memory efficient than bc.num(trunc(x), trunc(y), \"+\"), as the latter results in producing unnecessary copies of both x and y.\n\n\n\n \nFor details on the operators supported in each of the outer-like functions, please refer to the relevant sections in the Reference Manual.\n \n\n\nBinding implementations\n‘broadcast’ provides 3 functions for dimensional binding:\n\nbind_mat(): binds vectors and matrices row-wise or column-wise; allows for vector (i.e. linear) recycling. Returns a matrix.\nbind_array(): binds arrays (including matrices) along any arbitrary dimension; allows dimensional broadcasting. Returns an array.\nbind_dt(): binds data.frames and data.tables; allows for matching unmatched columns. Returns a data.table.\n\n\n\n\n\n\n\nNote\n\n\n\nThe bind_dt() function is only callable if the ‘data.table’ package is also installed.\n\n\n \n\n\nAcast\nThe acast() function casts an array into a new dimension.\nRoughly speaking, it is somewhat analogous to data.table::dcast(), except that acast() works on arrays (instead of data.tables) and casts into a entirely new dimension (instead of into more columns).\n \n\n\nType-casting\n‘broadcast’ offers type-casting functions. Unlike base R’s type-casting functions (as.logical(), as.integer(), etc.), the type-casting functions from ‘broadcast’ preserve names and dimensions.\n \n\n\nSupported Structures\nThe functions in the ‘broadcast’ package only support S3 structures. S4 structures, Reference Classes, and so on are not supported.\n \n\n\nNaming convention\nThe naming convention of the outer-like functions is “bc.” followed by some abbreviation of the operation type.\nFor example, “b” refers to “Boolean operations”, “i” to “Integer Numeric operations”, and “d” to “Decimal Numeric Operations”.\n \nThe naming convention of the binding implementations here is “bind_” followed by the resulting class (abbreviated) - i.e. …\n\nbind_mat() returns a matrix, but can bind both matrices and vectors.\nbind_array() returns an array, but can bind both arrays and matrices.\nbind_dt() returns a data.table, but can bind not only data.tables, but also most other data.frame-like objects."
  },
  {
    "objectID": "vignettes/a_readme.html#overview",
    "href": "vignettes/a_readme.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’  - package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions replication mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of relational-, arithmetic-, Boolean-, and string operations.\nThese functions have clear broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is a broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments.\n\n \nAdditionally, ‘broadcast’ includes the acast() function, for casting/pivoting an array into a new dimension. Roughly analogous to data.table::dcast(), but for arrays."
  },
  {
    "objectID": "vignettes/a_readme.html#why-use-broadcast",
    "href": "vignettes/a_readme.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than replicating dimensions.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences,  should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nHave you ever been bothered by any of the following while programming in :\n\nReceiving the “non-conformable arrays” error message in a simple operation when it intuitively should work?\nReceiving the “Error: cannot allocate vector of size” error message because  unnecessarily allocates too much memory?\nTrying to perform a simple operation on all possible combinations, only to find out you need nested loops and/or grid expansions to do something that should be very simple?\nhaving to store and re-assign attributes when type-casting arrays?\nouter() being slow and consuming way too much memory?\nabind() being too slow, saying arrays are not conformable, and/or coercing recursive arrays to character arrays?\nhaving to convert arrays to data.frames and then back to arrays (which wastes memory and other resources), just to be able to cast arrays?\n\nIf you answered “YES” to any of the above, ‘broadcast’ may very well be the  - package for you.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of  to that of the other language, and vice-versa, which wastes precious time, memory, and power. ‘broadcast’ requires no such translations of structures, and is therefore much less wasteful.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour for some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas  supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure behaviour that is consistent with the rest of ."
  },
  {
    "objectID": "vignettes/a_readme.html#documentation",
    "href": "vignettes/a_readme.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/rep_dim.html",
    "href": "man/rep_dim.html",
    "title": "rep_dim",
    "section": "",
    "text": "The rep_dim() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The rep_dim() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\nrep_dim(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## attr(,\"names\")\n## [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\nrep_dim(x, c(3,3,2)) # replicate to larger size\n## , , 1\n## \n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## \n## , , 2\n## \n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9"
  },
  {
    "objectID": "man/rep_dim.html#replicate-array-dimensions",
    "href": "man/rep_dim.html#replicate-array-dimensions",
    "title": "rep_dim",
    "section": "",
    "text": "The rep_dim() function replicates array dimensions until the specified dimension sizes are reached, and returns the array.   The various broadcasting functions recycle array dimensions virtually, meaning little to no additional memory is needed.  The rep_dim() function, however, physically replicates the dimensions of an array (and thus actually occupies additional memory space).  \n\n\n\nrep_dim(x, tdim)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array or matrix.\n\n\n\n\ntdim\n\n\nan integer vector, giving the target dimension to reach.\n\n\n\n\n\n\n\nReturns the replicated array.\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- matrix(1:9, 3,3)\ncolnames(x) &lt;- LETTERS[1:3]\nrownames(x) &lt;- letters[1:3]\nnames(x) &lt;- month.abb[1:9]\nprint(x)\n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## attr(,\"names\")\n## [1] \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\"\n\nrep_dim(x, c(3,3,2)) # replicate to larger size\n## , , 1\n## \n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9\n## \n## , , 2\n## \n##   A B C\n## a 1 4 7\n## b 2 5 8\n## c 3 6 9"
  },
  {
    "objectID": "man/bind.html",
    "href": "man/bind.html",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Returns a matrix.  Allows for linear/vector recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Returns an array.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  Returns a data.table.  This function is only available if the ‘data.table’ package is installed.  The bind_dt() function is faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrev\n\n\nBoolean, for bind_array() only.  Indicates if along should be reversed, counting backwards.  If FALSE (default), along works like normally; if TRUE, along is reversed.  I.e. along = 0, rev = TRUE is equivalent to along = N+1, rev = FALSE;  and along = N+1, rev = TRUE is equivalent to along = 0, rev = FALSE;  with N = max(lst.ndim(input)).\n\n\n\n\nndim2bc\n\n\nnon-negative integer, for bind_array only.  Specify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays.  If ndim2bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to data.table::rbindlist().  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 2L, TRUE)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\nif(require(data.table)) {\n  x &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\n  y &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n  \n  bind_dt(list(x = x, y = y), 2L) # column bind\n  \n  bind_dt(list(x = x, y = y), 1L) # row bind\n  \n}\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/bind.html#dimensional-binding-of-objects",
    "href": "man/bind.html#dimensional-binding-of-objects",
    "title": "bind",
    "section": "",
    "text": "The bind_implementations provide dimensional binding functionalities.   The following implementations are available:\n\n\nbind_mat() binds dimensionless (atomic/recursive) vectors and (atomic/recursive) matrices row- or column-wise.  Returns a matrix.  Allows for linear/vector recycling.\n\n\nbind_array() binds (atomic/recursive) arrays and (atomic/recursive) matrices.  Returns an array.  Allows for broadcasting.\n\n\nbind_dt() binds data.tables and other data.frame-like objects.  Returns a data.table.  This function is only available if the ‘data.table’ package is installed.  The bind_dt() function is faster than do.call(cbind, …) or do.call(rbind, …) for regular data.frame objects. \n\n\n\n\n\nbind_mat(input, along, name_deparse = TRUE, comnames_from = 1L)\n\nbind_array(\n  input,\n  along,\n  rev = FALSE,\n  ndim2bc = 1L,\n  name_along = TRUE,\n  comnames_from = 1L\n)\n\nbind_dt(input, along, ...)\n\n\n\n\n\n\n\n\ninput\n\n\na list of only the appropriate objects.  If input is named, its names will be used for the names of dimension along of the output, as far as possible.\n\n\n\n\nalong\n\n\na single integer, indicating the dimension along which to bind the dimensions.  I.e. use along = 1 for row-binding, along = 2 for column-binding, etc.  For arrays, additional flexibility is available:\n\n\nSpecifying along = 0 will bind the arrays on a new dimension before the first, making along the new first dimension.\n\n\nSpecifying along = N + 1, with N = max(lst.ndim(input)), will create an additional dimension (N + 1) and bind the arrays along that new dimension.\n\n\n\n\n\n\nname_deparse\n\n\nBoolean, for bind_mat().  Indicates if dimension along should be named.  Uses the naming method from rbind/cbind itself.\n\n\n\n\ncomnames_from\n\n\neither integer scalar or NULL, for bind_mat() and bind_array().  Indicates which object in input should be used for naming the shared dimension.  If NULL, no communal names will be given.  For example:  When binding columns of matrices, the matrices will share the same rownames.  Using comnames_from = 10 will then result in bind_array() using rownames(input[[10]]) for the rownames of the output.\n\n\n\n\nrev\n\n\nBoolean, for bind_array() only.  Indicates if along should be reversed, counting backwards.  If FALSE (default), along works like normally; if TRUE, along is reversed.  I.e. along = 0, rev = TRUE is equivalent to along = N+1, rev = FALSE;  and along = N+1, rev = TRUE is equivalent to along = 0, rev = FALSE;  with N = max(lst.ndim(input)).\n\n\n\n\nndim2bc\n\n\nnon-negative integer, for bind_array only.  Specify here the maximum number of dimensions that are allowed to be broadcasted when binding arrays.  If ndim2bc = 0L, no broadcasting will be allowed at all.\n\n\n\n\nname_along\n\n\nBoolean, for bind_array().  Indicates if dimension along should be named.\n\n\n\n\n…\n\n\narguments to be passed to data.table::rbindlist().  \n\n\n\n\n\n\n\nFor in-depth information about the binding implentations in the ‘broadcast’ package, please refer to broadcast_bind.  \n\n\n\nThe bound object.\n\n\n\nPlate T, Heiberger R (2016). abind: Combine Multidimensional Arrays. R package version 1.4-5, https://CRAN.R-project.org/package=abind.\n\n\n\n\nlibrary(\"broadcast\")\n\n\n# bind_array ====\n\n# here, atomic and recursive arrays are mixed,\n# resulting in recursive arrays\n\n# creating the arrays\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\n# binding the arrays\ninput &lt;- list(x = x, y = y)\nbind_array(input, along = 0L) # binds on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\nbind_array(input, along = 1L) # binds on first dimension (i.e. rows)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 2L)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 3L) # bind on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\n\nbind_array(input, along = 0L, TRUE) # binds on new dimension after last\n## , , x\n## \n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n## \n## , , y\n## \n##   A B C \n## a 1 5 9 \n## b 2 6 10\n## c 3 7 11\n## d 4 8 12\nbind_array(input, along = 1L, TRUE) # binds on last dimension (i.e. columns)\n##   A            B            C            y.1 y.2 y.3\n## a logical,3    logical,3    logical,3    1   5   9  \n## b integer,10   integer,10   integer,10   2   6   10 \n## c numeric,10   numeric,10   numeric,10   3   7   11 \n## d character,26 character,26 character,26 4   8   12\nbind_array(input, along = 2L, TRUE)\n##     A            B            C           \n## a   logical,3    logical,3    logical,3   \n## b   integer,10   integer,10   integer,10  \n## c   numeric,10   numeric,10   numeric,10  \n## d   character,26 character,26 character,26\n## y.1 1            5            9           \n## y.2 2            6            10          \n## y.3 3            7            11          \n## y.4 4            8            12\nbind_array(input, along = 3L, TRUE) # bind on new dimension before first\n## , , A\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 1         2          3          4           \n## \n## , , B\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 5         6          7          8           \n## \n## , , C\n## \n##   a         b          c          d           \n## x logical,3 integer,10 numeric,10 character,26\n## y 9         10         11         12\n\n\n# binding, with empty arrays\nemptyarray &lt;- array(numeric(0L), c(0L, 3L))\ndimnames(emptyarray) &lt;- list(NULL, paste(\"empty\", 1:3))\nprint(emptyarray)\n##      empty 1 empty 2 empty 3\ninput &lt;- list(x = x, y = emptyarray)\nbind_array(input, along = 1L, comnames_from = 2L) # row-bind\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\n\n\n################################################################################\n\n# bind_mat ====\n\n# here, atomic and recursive matrices are mixed,\n# resulting in a recursive matrix\n\nx &lt;- c(\n  lapply(1:3, \\(x)sample(c(TRUE, FALSE, NA))),\n  lapply(1:3, \\(x)sample(1:10)),\n  lapply(1:3, \\(x)rnorm(10)),\n  lapply(1:3, \\(x)sample(letters))\n)\nx &lt;- matrix(x, 4, 3, byrow = TRUE)\ndimnames(x) &lt;- list(letters[1:4], LETTERS[1:3])\nprint(x)\n##   A            B            C           \n## a logical,3    logical,3    logical,3   \n## b integer,10   integer,10   integer,10  \n## c numeric,10   numeric,10   numeric,10  \n## d character,26 character,26 character,26\n\ny &lt;- matrix(1:12, 4, 3)\nprint(y)\n##      [,1] [,2] [,3]\n## [1,]    1    5    9\n## [2,]    2    6   10\n## [3,]    3    7   11\n## [4,]    4    8   12\n\nbind_mat(list(x = x, y = y), 2L)\n##   A            B            C                  \n## a logical,3    logical,3    logical,3    1 5 9 \n## b integer,10   integer,10   integer,10   2 6 10\n## c numeric,10   numeric,10   numeric,10   3 7 11\n## d character,26 character,26 character,26 4 8 12\n\n\n\n################################################################################\n\n# bind_dt ====\nif(require(data.table)) {\n  x &lt;- data.frame(a = 1:12, b = month.abb) # data.frame\n  y &lt;- data.table::data.table(a = 1:12, b = month.abb) # data.table\n  \n  bind_dt(list(x = x, y = y), 2L) # column bind\n  \n  bind_dt(list(x = x, y = y), 1L) # row bind\n  \n}\n##         a      b\n##     &lt;int&gt; &lt;char&gt;\n##  1:     1    Jan\n##  2:     2    Feb\n##  3:     3    Mar\n##  4:     4    Apr\n##  5:     5    May\n##  6:     6    Jun\n##  7:     7    Jul\n##  8:     8    Aug\n##  9:     9    Sep\n## 10:    10    Oct\n## 11:    11    Nov\n## 12:    12    Dec\n## 13:     1    Jan\n## 14:     2    Feb\n## 15:     3    Mar\n## 16:     4    Apr\n## 17:     5    May\n## 18:     6    Jun\n## 19:     7    Jul\n## 20:     8    Aug\n## 21:     9    Sep\n## 22:    10    Oct\n## 23:    11    Nov\n## 24:    12    Dec\n##         a      b"
  },
  {
    "objectID": "man/bc_dim.html",
    "href": "man/bc_dim.html",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc_dim.html#predict-broadcasted-dimensions",
    "href": "man/bc_dim.html#predict-broadcasted-dimensions",
    "title": "bc_dim",
    "section": "",
    "text": "bc_dim(x, y) gives the dimensions an array would have, as the result of an broadcasted binary element-wise operation between 2 arrays x and y.\n\n\n\nbc_dim(x, y)\n\n\n\n\n\n\n\n\nx, y\n\n\nan atomic or recursive array.\n\n\n\n\n\n\n\nReturns the recycled array.\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\ndim(bc.b(x, y, \"&\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE\ndim(bc.b(x, y, \"|\")) == bc_dim(x, y)\n## [1] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc.str.html",
    "href": "man/bc.str.html",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2]\n##  [1,] \"aa\" \"ka\"\n##  [2,] \"bb\" \"lb\"\n##  [3,] \"cc\" \"mc\"\n##  [4,] \"dd\" \"nd\"\n##  [5,] \"ee\" \"oe\"\n##  [6,] \"ff\" \"pf\"\n##  [7,] \"gg\" \"qg\"\n##  [8,] \"hh\" \"rh\"\n##  [9,] \"ii\" \"si\"\n## [10,] \"jj\" \"tj\"\n\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.str(array(letters), array(letters), \"!=\")\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE\n\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n##           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## January     4   7   5   6   5   5   5   6   7   7   7   7\n## February    7   5   6   7   6   7   7   7   7   8   8   7\n## March       4   5   2   4   3   5   5   5   5   4   5   4\n## April       5   5   4   2   5   5   4   4   5   5   5   5\n## May         2   3   1   3   0   3   3   3   3   3   3   3\n## June        2   4   4   4   4   1   2   3   4   4   4   4\n## July        3   4   4   4   3   2   1   3   4   4   4   4\n## August      6   6   6   5   6   5   5   3   6   5   6   6\n## September   9   7   8   7   9   9   9   9   6   8   9   8\n## October     7   6   6   6   7   7   7   7   6   4   6   6\n## November    8   6   7   7   8   8   8   8   7   8   5   7\n## December    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/bc.str.html#broadcasted-string-operations",
    "href": "man/bc.str.html#broadcasted-string-operations",
    "title": "bc.str",
    "section": "",
    "text": "The bc.str() function performs broadcasted string operations on pairs of arrays.  \n\n\n\nbc.str(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type character.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported concatenation operators: +.  Supported relational operators: ==, !=.  Supported distance operators: levenshtein. \n\n\n\n\n\n\n\nFor concatenation operation:  A character array as a result of the broadcasted concatenation operation.   For relational operation:  A logical array as a result of the broadcasted relational comparison.   For distance operation:  An integer array as a result of the broadcasted distance measurement.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# string concatenation:\nx &lt;- array(letters, c(10, 2, 1))\ny &lt;- array(letters, c(10,1,1))\nbc.str(x, y, \"+\")\n## , , 1\n## \n##       [,1] [,2]\n##  [1,] \"aa\" \"ka\"\n##  [2,] \"bb\" \"lb\"\n##  [3,] \"cc\" \"mc\"\n##  [4,] \"dd\" \"nd\"\n##  [5,] \"ee\" \"oe\"\n##  [6,] \"ff\" \"pf\"\n##  [7,] \"gg\" \"qg\"\n##  [8,] \"hh\" \"rh\"\n##  [9,] \"ii\" \"si\"\n## [10,] \"jj\" \"tj\"\n\n\n# string (in)equality:\nbc.str(array(letters), array(letters), \"==\")\n##  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n## [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE\nbc.str(array(letters), array(letters), \"!=\")\n##  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n## [25] FALSE FALSE\n\n\n# string distance (Levenshtein):\nx &lt;- array(month.name, c(12, 1))\ny &lt;- array(month.abb, c(1, 12))\nout &lt;- bc.str(x, y, \"levenshtein\")\ndimnames(out) &lt;- list(month.name, month.abb)\nprint(out)\n##           Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n## January     4   7   5   6   5   5   5   6   7   7   7   7\n## February    7   5   6   7   6   7   7   7   7   8   8   7\n## March       4   5   2   4   3   5   5   5   5   4   5   4\n## April       5   5   4   2   5   5   4   4   5   5   5   5\n## May         2   3   1   3   0   3   3   3   3   3   3   3\n## June        2   4   4   4   4   1   2   3   4   4   4   4\n## July        3   4   4   4   3   2   1   3   4   4   4   4\n## August      6   6   6   5   6   5   5   3   6   5   6   6\n## September   9   7   8   7   9   9   9   9   6   8   9   8\n## October     7   6   6   6   7   7   7   7   6   4   6   6\n## November    8   6   7   7   8   8   8   8   7   8   5   7\n## December    8   6   7   7   8   8   8   8   7   7   8   5"
  },
  {
    "objectID": "man/bc.i.html",
    "href": "man/bc.i.html",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, %%, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  884  600  456\n## [2,]  724  465  275\n## [3,]  701  926  920\n## [4,]   25  484   57\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  565  173  599\n## [2,]   79  347  519\n## [3,]  426  381  911\n## [4,]  451  979  283\nbc.i(x, y, \"-\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  882  598  454\n## [2,]  720  461  271\n## [3,]  695  920  914\n## [4,]   17  476   49\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  563  171  597\n## [2,]   75  343  515\n## [3,]  420  375  905\n## [4,]  443  971  275\nbc.i(x, y, \"*\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  883  599  455\n## [2,] 1444  926  546\n## [3,] 2094 2769 2751\n## [4,]   84 1920  212\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  564  172  598\n## [2,]  154  690 1034\n## [3,] 1269 1134 2724\n## [4,] 1788 3900 1116\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    2    1    1\n## [3,]    1    1    1\n## [4,]    1    4    1\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    1    1\n## [3,]    3    3    1\n## [4,]    1    1    1\nbc.i(x, y, \"^\")\n## , , 1\n## \n##           [,1]        [,2]      [,3]\n## [1,]       883         599       455\n## [2,]    521284      214369     74529\n## [3,] 340068392   786330467 771095213\n## [4,]    194481 53084160000   7890481\n## \n## , , 2\n## \n##             [,1]         [,2]       [,3]\n## [1,]         564          172        598\n## [2,]        5929       119025     267289\n## [3,]    75686967     54010152  748613312\n## [4,] 39923636481 903687890625 6059221281\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"&lt;\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"&gt;\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"&lt;=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"&gt;=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "href": "man/bc.i.html#broadcasted-integer-numeric-operations-with-extra-overflow-protection",
    "title": "bc.i",
    "section": "",
    "text": "The bc.i() function performs broadcasted integer numeric operations on 2 numeric or logical arrays.   Please note that these operations will treat the input as 53bit integers, and will efficiently truncate when necessary.  Therefore, something like bc.i(1, 1.5, “==”) returns TRUE, because trunc(1.5) equals 1.  \n\n\n\nbc.i(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, gcd, %%, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array of whole numbers, as a result of the broadcasted arithmetic operation.  Base ‘R’ supports 53 bit integers, which thus range from approximately -9 quadrillion to +9 quadrillion.  Values outside of this range will be returned as -Inf or Inf, as an extra protection against integer overflow.   For relational operators:  A logical array as a result of the broadcasted integer relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.i(x, y, \"+\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  884  600  456\n## [2,]  724  465  275\n## [3,]  701  926  920\n## [4,]   25  484   57\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  565  173  599\n## [2,]   79  347  519\n## [3,]  426  381  911\n## [4,]  451  979  283\nbc.i(x, y, \"-\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  882  598  454\n## [2,]  720  461  271\n## [3,]  695  920  914\n## [4,]   17  476   49\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  563  171  597\n## [2,]   75  343  515\n## [3,]  420  375  905\n## [4,]  443  971  275\nbc.i(x, y, \"*\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]  883  599  455\n## [2,] 1444  926  546\n## [3,] 2094 2769 2751\n## [4,]   84 1920  212\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]  564  172  598\n## [2,]  154  690 1034\n## [3,] 1269 1134 2724\n## [4,] 1788 3900 1116\nbc.i(x, y, \"gcd\") # greatest common divisor\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    2    1    1\n## [3,]    1    1    1\n## [4,]    1    4    1\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]    1    1    1\n## [2,]    1    1    1\n## [3,]    3    3    1\n## [4,]    1    1    1\nbc.i(x, y, \"^\")\n## , , 1\n## \n##           [,1]        [,2]      [,3]\n## [1,]       883         599       455\n## [2,]    521284      214369     74529\n## [3,] 340068392   786330467 771095213\n## [4,]    194481 53084160000   7890481\n## \n## , , 2\n## \n##             [,1]         [,2]       [,3]\n## [1,]         564          172        598\n## [2,]        5929       119025     267289\n## [3,]    75686967     54010152  748613312\n## [4,] 39923636481 903687890625 6059221281\n\nbc.i(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"&lt;\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"&gt;\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.i(x, y, \"&lt;=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.i(x, y, \"&gt;=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc.cplx.html",
    "href": "man/bc.cplx.html",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2] [,3]\n## [1,]    NA    NA   NA\n## [2,] FALSE FALSE   NA\n## [3,]    NA    NA   NA\n## [4,]    NA FALSE   NA\n## \n## , , 2\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA    NA\n## [2,]   NA    NA    NA\n## [3,]   NA    NA    NA\n## [4,]   NA FALSE FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]           [,2] [,3]\n## [1,]             NA             NA   NA\n## [2,] -Inf+1.662053i -Inf+2.294139i   NA\n## [3,]             NA             NA   NA\n## [4,]             NA  Inf+0.360539i   NA\n## \n## , , 2\n## \n##      [,1]            [,2]                 [,3]\n## [1,]   NA              NA                   NA\n## [2,]   NA              NA                   NA\n## [3,]   NA              NA                   NA\n## [4,]   NA -Inf+0.9782609i -0.7908463+1.610347i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA FALSE    NA    NA FALSE    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA   NA TRUE   NA   NA\n## [16]   NA   NA   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                       y                     \n##  [1,]        NaN-      Infi  0.9699300+0.800823901i       Inf-      Infi\n##  [2,]        NaN-      Infi                      NA       NaN+      NaNi\n##  [3,]  0.3474393-1.5797027i        NaN-        Infi      -Inf-      Infi\n##  [4,]       -Inf-1.0822852i        NaN+        Infi       NaN-      Infi\n##  [5,]        NaN+0.3521373i       -Inf-0.285834919i       NaN-      Infi\n##  [6,]                    NA        NaN+        Infi      -Inf+      NaNi\n##  [7,]  1.2518014-0.1173712i -1.0471621-0.001369802i -1.311000+0.1211920i\n##  [8,]        NaN+      NaNi -0.3357772+0.198932117i       NaN+      NaNi\n##  [9,]  0.7412007+0.7165281i -0.2764484+1.194894093i -1.061079+0.6875732i\n## [10,]        NaN+      Infi  1.2578954-0.331414307i       Inf+      Infi\n## [11,] -1.7802090+0.2137576i                      NA                   NA\n## [12,]                    NA        NaN-        Infi       NaN+      NaNi\n## [13,]       -Inf+0.2176042i        NaN+        NaNi       NaN+      NaNi\n## [14,]        NaN+2.1574694i                      NA       NaN+      NaNi\n## [15,]                    NA        NaN+        NaNi       NaN+      NaNi\n## [16,]        Inf-1.6622111i                      NA       NaN-      Infi\n## [17,]                    NA -0.5185176+0.023777224i                   NA\n## [18,]        NaN+      NaNi  0.5727317+0.822534895i       NaN+      NaNi\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,] -1.311000+0.1211920i\n##  [8,]                   NA\n##  [9,] -1.061079+0.6875732i\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,]                   NA\n## [15,]                   NA\n## [16,]                   NA\n## [17,]                   NA\n## [18,]                   NA"
  },
  {
    "objectID": "man/bc.cplx.html#broadcasted-complex-numeric-operations",
    "href": "man/bc.cplx.html#broadcasted-complex-numeric-operations",
    "title": "bc.cplx",
    "section": "",
    "text": "The bc.cplx() function performs broadcasted complex numeric operations pairs of arrays.   Note that bc.cplx() uses more strict NA checks than base ‘R’:  If for an element of either x or y, either the real or imaginary part is NA or NaN, than the result of the operation for that element is necessarily NA. \n\n\n\nbc.cplx(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic arrays of type complex.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /.  Supported relational operators: ==, !=. \n\n\n\n\n\n\n\nFor arithmetic operators:  A complex array as a result of the broadcasted arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\ngen &lt;- function() sample(c(rnorm(10), NA, NA, NaN, NaN, Inf, Inf, -Inf, -Inf))\nx &lt;- array(gen() + gen() * -1i, x.dim)\ny &lt;- array(gen() + gen() * -1i, c(4,1,1))\n\nbc.cplx(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2] [,3]\n## [1,]    NA    NA   NA\n## [2,] FALSE FALSE   NA\n## [3,]    NA    NA   NA\n## [4,]    NA FALSE   NA\n## \n## , , 2\n## \n##      [,1]  [,2]  [,3]\n## [1,]   NA    NA    NA\n## [2,]   NA    NA    NA\n## [3,]   NA    NA    NA\n## [4,]   NA FALSE FALSE\nbc.cplx(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,] TRUE TRUE   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE   NA\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,]   NA   NA   NA\n## [2,]   NA   NA   NA\n## [3,]   NA   NA   NA\n## [4,]   NA TRUE TRUE\n\nbc.cplx(x, y, \"+\")\n## , , 1\n## \n##                [,1]           [,2] [,3]\n## [1,]             NA             NA   NA\n## [2,] -Inf+1.662053i -Inf+2.294139i   NA\n## [3,]             NA             NA   NA\n## [4,]             NA  Inf+0.360539i   NA\n## \n## , , 2\n## \n##      [,1]            [,2]                 [,3]\n## [1,]   NA              NA                   NA\n## [2,]   NA              NA                   NA\n## [3,]   NA              NA                   NA\n## [4,]   NA -Inf+0.9782609i -0.7908463+1.610347i\n\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"==\")\n##  [1]    NA    NA FALSE    NA    NA FALSE    NA    NA    NA    NA    NA    NA\n## [13]    NA    NA    NA    NA    NA    NA\nbc.cplx(array(gen() + gen() * -1i), array(gen() + gen() * -1i), \"!=\")\n##  [1]   NA   NA   NA   NA   NA   NA   NA   NA   NA TRUE   NA   NA TRUE   NA   NA\n## [16]   NA   NA   NA\n\nx &lt;- gen() + gen() * -1i\ny &lt;- gen() + gen() * -1i\nout &lt;- bc.cplx(array(x), array(y), \"*\")\ncbind(x, y, x*y, out)\n##                           x                       y                     \n##  [1,]        NaN-      Infi  0.9699300+0.800823901i       Inf-      Infi\n##  [2,]        NaN-      Infi                      NA       NaN+      NaNi\n##  [3,]  0.3474393-1.5797027i        NaN-        Infi      -Inf-      Infi\n##  [4,]       -Inf-1.0822852i        NaN+        Infi       NaN-      Infi\n##  [5,]        NaN+0.3521373i       -Inf-0.285834919i       NaN-      Infi\n##  [6,]                    NA        NaN+        Infi      -Inf+      NaNi\n##  [7,]  1.2518014-0.1173712i -1.0471621-0.001369802i -1.311000+0.1211920i\n##  [8,]        NaN+      NaNi -0.3357772+0.198932117i       NaN+      NaNi\n##  [9,]  0.7412007+0.7165281i -0.2764484+1.194894093i -1.061079+0.6875732i\n## [10,]        NaN+      Infi  1.2578954-0.331414307i       Inf+      Infi\n## [11,] -1.7802090+0.2137576i                      NA                   NA\n## [12,]                    NA        NaN-        Infi       NaN+      NaNi\n## [13,]       -Inf+0.2176042i        NaN+        NaNi       NaN+      NaNi\n## [14,]        NaN+2.1574694i                      NA       NaN+      NaNi\n## [15,]                    NA        NaN+        NaNi       NaN+      NaNi\n## [16,]        Inf-1.6622111i                      NA       NaN-      Infi\n## [17,]                    NA -0.5185176+0.023777224i                   NA\n## [18,]        NaN+      NaNi  0.5727317+0.822534895i       NaN+      NaNi\n##                        out\n##  [1,]                   NA\n##  [2,]                   NA\n##  [3,]                   NA\n##  [4,]                   NA\n##  [5,]                   NA\n##  [6,]                   NA\n##  [7,] -1.311000+0.1211920i\n##  [8,]                   NA\n##  [9,] -1.061079+0.6875732i\n## [10,]                   NA\n## [11,]                   NA\n## [12,]                   NA\n## [13,]                   NA\n## [14,]                   NA\n## [15,]                   NA\n## [16,]                   NA\n## [17,]                   NA\n## [18,]                   NA"
  },
  {
    "objectID": "man/acast.html",
    "href": "man/acast.html",
    "title": "acast",
    "section": "",
    "text": "The acast() function spreads subsets of an array margin over a new dimension.  Written in ‘C’ and ‘C++’ for high speed and memory efficiency.   Roughly speaking, acast() can be thought of as the \"array\" analogy to data.table::dcast.  But note 2 important differences:\n\n\nacast() works on arrays instead of data.tables.\n\n\nacast() casts into a completely new dimension (namely ndim(x) + 1), instead of casting into new columns.\n\n\n\n\n\nacast(x, margin, grp, fill = FALSE)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array.\n\n\n\n\nmargin\n\n\na scalar integer, specifying the margin to cast from.\n\n\n\n\ngrp\n\n\na factor, where length(grp) == dim(x)[margin], with at least 2 unique values, specifying which indices of dim(x)[margin] belong to which group.  Each group will be cast onto a separate index of dimension ndim(x) + 1.  Unused levels of grp will be dropped.  Any NA values or levels found in grp will result in an error.\n\n\n\n\nfill\n\n\nBoolean, indicating if missing values should be filled.  This is used in case the levels of grp do not have equal frequencies, and thus additional values must be filled.  If x is atomic but not raw, missing values are filled with NA.  If x is recursive, missing values are filled with list(NULL).  If x is of type raw, uneven groupings are not supported.\n\n\n\n\n\n\n\nFor the sake of illustration, consider a matrix x and a grouping factor grp.  Let the integer scalar k represent a group in grp, such that k \\(\\in\\) 1:nlevels(grp).  Then the code  out = acast(x, margin = 1, grp = grp)  essentially performs the following for every group k:\n\n\ncopy-paste the subset x[grp == k, ] to the subset out[, , k].\n\n\nPlease see the examples section to get a good idea on how this function casts an array.  A more detailed explanation of the acast() function can be found on the website.  \n\n\n\nAn array with the following properties:\n\n\nthe number of dimensions of the output array is equal to ndim(x) + 1;\n\n\nthe dimensions of the output array is equal to c(dim(x), max(tabulate(grp));\n\n\nthe dimnames of the output array is equal to c(dimnames(x), list(levels(grp))).  \n\n\n\n\n\nFrom the casted array,  out = acast(x, margin, grp),  one can get the original x back by using  back = asplit(out, ndim(out)) |&gt; bind_array(along = margin).  Note, however, the following about the back-transformed array back:\n\n\nback will be ordered by grp along dimension margin;\n\n\nif the levels of grp did not have equal frequencies, then dim(back)[margin] &gt; dim(x)[margin], and back will have more missing values than x.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- cbind(id = c(rep(1:3, each = 2), 1), grp = c(rep(1:2, 3), 2), val = rnorm(7))\nprint(x)\n##      id grp         val\n## [1,]  1   1  0.30874014\n## [2,]  1   2 -1.24369323\n## [3,]  2   1 -0.00338946\n## [4,]  2   2  0.71995612\n## [5,]  3   1  0.03643912\n## [6,]  3   2  2.02282594\n## [7,]  1   2 -0.42676725\n\ngrp &lt;- as.factor(x[, 2])\nlevels(grp) &lt;- c(\"a\", \"b\")\nmargin &lt;- 1L\n\nacast(x, margin, grp, fill = TRUE)\n## , , a\n## \n##      id grp         val\n## [1,]  1   1  0.30874014\n## [2,]  2   1 -0.00338946\n## [3,]  3   1  0.03643912\n## [4,] NA  NA          NA\n## \n## , , b\n## \n##      id grp        val\n## [1,]  1   2 -1.2436932\n## [2,]  2   2  0.7199561\n## [3,]  3   2  2.0228259\n## [4,]  1   2 -0.4267672"
  },
  {
    "objectID": "man/acast.html#simple-and-fast-castingpivoting-of-an-array",
    "href": "man/acast.html#simple-and-fast-castingpivoting-of-an-array",
    "title": "acast",
    "section": "",
    "text": "The acast() function spreads subsets of an array margin over a new dimension.  Written in ‘C’ and ‘C++’ for high speed and memory efficiency.   Roughly speaking, acast() can be thought of as the \"array\" analogy to data.table::dcast.  But note 2 important differences:\n\n\nacast() works on arrays instead of data.tables.\n\n\nacast() casts into a completely new dimension (namely ndim(x) + 1), instead of casting into new columns.\n\n\n\n\n\nacast(x, margin, grp, fill = FALSE)\n\n\n\n\n\n\n\n\nx\n\n\nan atomic or recursive array.\n\n\n\n\nmargin\n\n\na scalar integer, specifying the margin to cast from.\n\n\n\n\ngrp\n\n\na factor, where length(grp) == dim(x)[margin], with at least 2 unique values, specifying which indices of dim(x)[margin] belong to which group.  Each group will be cast onto a separate index of dimension ndim(x) + 1.  Unused levels of grp will be dropped.  Any NA values or levels found in grp will result in an error.\n\n\n\n\nfill\n\n\nBoolean, indicating if missing values should be filled.  This is used in case the levels of grp do not have equal frequencies, and thus additional values must be filled.  If x is atomic but not raw, missing values are filled with NA.  If x is recursive, missing values are filled with list(NULL).  If x is of type raw, uneven groupings are not supported.\n\n\n\n\n\n\n\nFor the sake of illustration, consider a matrix x and a grouping factor grp.  Let the integer scalar k represent a group in grp, such that k \\(\\in\\) 1:nlevels(grp).  Then the code  out = acast(x, margin = 1, grp = grp)  essentially performs the following for every group k:\n\n\ncopy-paste the subset x[grp == k, ] to the subset out[, , k].\n\n\nPlease see the examples section to get a good idea on how this function casts an array.  A more detailed explanation of the acast() function can be found on the website.  \n\n\n\nAn array with the following properties:\n\n\nthe number of dimensions of the output array is equal to ndim(x) + 1;\n\n\nthe dimensions of the output array is equal to c(dim(x), max(tabulate(grp));\n\n\nthe dimnames of the output array is equal to c(dimnames(x), list(levels(grp))).  \n\n\n\n\n\nFrom the casted array,  out = acast(x, margin, grp),  one can get the original x back by using  back = asplit(out, ndim(out)) |&gt; bind_array(along = margin).  Note, however, the following about the back-transformed array back:\n\n\nback will be ordered by grp along dimension margin;\n\n\nif the levels of grp did not have equal frequencies, then dim(back)[margin] &gt; dim(x)[margin], and back will have more missing values than x.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\n\nx &lt;- cbind(id = c(rep(1:3, each = 2), 1), grp = c(rep(1:2, 3), 2), val = rnorm(7))\nprint(x)\n##      id grp         val\n## [1,]  1   1  0.30874014\n## [2,]  1   2 -1.24369323\n## [3,]  2   1 -0.00338946\n## [4,]  2   2  0.71995612\n## [5,]  3   1  0.03643912\n## [6,]  3   2  2.02282594\n## [7,]  1   2 -0.42676725\n\ngrp &lt;- as.factor(x[, 2])\nlevels(grp) &lt;- c(\"a\", \"b\")\nmargin &lt;- 1L\n\nacast(x, margin, grp, fill = TRUE)\n## , , a\n## \n##      id grp         val\n## [1,]  1   1  0.30874014\n## [2,]  2   1 -0.00338946\n## [3,]  3   1  0.03643912\n## [4,] NA  NA          NA\n## \n## , , b\n## \n##      id grp        val\n## [1,]  1   2 -1.2436932\n## [2,]  2   2  0.7199561\n## [3,]  3   2  2.0228259\n## [4,]  1   2 -0.4267672"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html",
    "href": "man/aaa00_broadcast_help.html",
    "title": "R-package: broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe implementations available in ‘broadcast’ include, but are not limited to, the following:\n\n\nA faster, more memory efficient, and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nA set of broadcasted outer()-like functions, optimised for a large set of relational-, arithmetic-, Boolean-, and string operations.\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function;\n\n\nThe acast() function, for casting/pivoting an array into a new dimension.\n\n\nThe functions in the ‘broadcast’ package strive to minimize computation time and memory usage (which is not just good for efficient computing, but also for the environment).\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "href": "man/aaa00_broadcast_help.html#broadcast-simple-broadcasted-operations-for-atomic-and-recursive-arrays-with-minimal-dependencies",
    "title": "R-package: broadcast",
    "section": "",
    "text": "broadcast:  Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies.   Implements simple broadcasted operations for atomic and recursive arrays.\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nThe implementations available in ‘broadcast’ include, but are not limited to, the following:\n\n\nA faster, more memory efficient, and broadcasted version of abind(), for binding arrays along an arbitrary dimension;\n\n\nA set of broadcasted outer()-like functions, optimised for a large set of relational-, arithmetic-, Boolean-, and string operations.\n\n\nA Broadcasted implementation of ifelse();\n\n\nA Broadcasted apply-like function;\n\n\nThe acast() function, for casting/pivoting an array into a new dimension.\n\n\nThe functions in the ‘broadcast’ package strive to minimize computation time and memory usage (which is not just good for efficient computing, but also for the environment).\n\n\n\nAn introduction and overview of the package can be found on the website.  \n\n\n\nOuter-like functions  ‘broadcast’ provides a set of functions for binary, element-wise, outer operations with broadcasting.  These functions use an API similar to the outer and sweep functions.   The following functions for type-specific binary operations are available:\n\n\nbc.b: Boolean operations;\n\n\nbc.i: integer (53bit) arithmetic and relational operations;\n\n\nbc.d: decimal (64bit) arithmetic and relational operations;\n\n\nbc.cplx: complex arithmetic and (in)equality operations;\n\n\nbc.str: string (in)equality, concatenation, and distance operations;\n\n\nbc.list: apply any ‘R’ function to 2 recursive arrays with broadcasting.  \n\n\nBinding Implementations  ‘broadcast’ provides 3 binding implementations:  bind_mat, bind_array, and bind_dt.  \nGeneral functions  ‘broadcast’ also comes with 2 general broadcasted functions:\n\n\nbc_ifelse: Broadcasted version of ifelse.\n\n\nbcapply: Broadcasted apply-like function.  \n\n\nOther functions  ‘broadcast’ also provides type-casting functions, which preserve names and dimensions - convenient for arrays.  \n\n\n\nAuthor, Maintainer: Tony Wilkes tony_a_wilkes@outlook.com (ORCID)\n\n\n\nThe badges shown in the documentation of this R-package were made using the services of: https://shields.io/"
  },
  {
    "objectID": "about/NEWS.html",
    "href": "about/NEWS.html",
    "title": "Changelog",
    "section": "",
    "text": "…still testing…"
  },
  {
    "objectID": "about/Acknowledgements.html",
    "href": "about/Acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "Compiled code\n‘broadcast’ links to the fantastic Rcpp package.\nBesides linking to the aforementioned ‘Rcpp’, no code from external libraries (like ‘Numpy’ or ‘xtensor’) were used in any way whatsoever; the ‘C’ and ‘C++’ code in the ‘broadcast’ package was essentially made entirely from scratch.\n \n\n\nSite resources\nThe website itself was put together using ‘Quarto’ (out-of-the-box website producing packages, such as ‘pkgdown’ and ‘altdoc’, were not used).\nMost graphs on the website were created using the tinyplot package, and all tables were created using the tinytable package.\nSome of the icons were generated using the fontawesome package."
  },
  {
    "objectID": "about/LICENSE.html",
    "href": "about/LICENSE.html",
    "title": "License",
    "section": "",
    "text": "Mozilla Public License Version 2.0\n==================================\n\n1. Definitions\n--------------\n\n1.1. \"Contributor\"\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n1.2. \"Contributor Version\"\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n1.3. \"Contribution\"\n    means Covered Software of a particular Contributor.\n\n1.4. \"Covered Software\"\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n1.5. \"Incompatible With Secondary Licenses\"\n    means\n\n    (a) that the initial Contributor has attached the notice described\n        in Exhibit B to the Covered Software; or\n\n    (b) that the Covered Software was made available under the terms of\n        version 1.1 or earlier of the License, but not also under the\n        terms of a Secondary License.\n\n1.6. \"Executable Form\"\n    means any form of the work other than Source Code Form.\n\n1.7. \"Larger Work\"\n    means a work that combines Covered Software with other material, in\n    a separate file or files, that is not Covered Software.\n\n1.8. \"License\"\n    means this document.\n\n1.9. \"Licensable\"\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n1.10. \"Modifications\"\n    means any of the following:\n\n    (a) any file in Source Code Form that results from an addition to,\n        deletion from, or modification of the contents of Covered\n        Software; or\n\n    (b) any new file in Source Code Form that contains any Covered\n        Software.\n\n1.11. \"Patent Claims\" of a Contributor\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n1.12. \"Secondary License\"\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n1.13. \"Source Code Form\"\n    means the form of the work preferred for making modifications.\n\n1.14. \"You\" (or \"Your\")\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \"You\" includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \"control\" means (a) the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or (b) ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n2. License Grants and Conditions\n--------------------------------\n\n2.1. Grants\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n(a) under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n(b) under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n2.2. Effective Date\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n2.3. Limitations on Grant Scope\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n(a) for any code that a Contributor has removed from Covered Software;\n    or\n\n(b) for infringements caused by: (i) Your and any other third party's\n    modifications of Covered Software, or (ii) the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n(c) under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n2.4. Subsequent Licenses\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n2.5. Representation\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n2.6. Fair Use\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n2.7. Conditions\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n3. Responsibilities\n-------------------\n\n3.1. Distribution of Source Form\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n3.2. Distribution of Executable Form\n\nIf You distribute Covered Software in Executable Form then:\n\n(a) such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n(b) You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n3.3. Distribution of a Larger Work\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n3.4. Notices\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n3.5. Application of Additional Terms\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n4. Inability to Comply Due to Statute or Regulation\n---------------------------------------------------\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n5. Termination\n--------------\n\n5.1. The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated (a) provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and (b) on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n5.2. If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n************************************************************************\n*                                                                      *\n*  6. Disclaimer of Warranty                                           *\n*  -------------------------                                           *\n*                                                                      *\n*  Covered Software is provided under this License on an \"as is\"       *\n*  basis, without warranty of any kind, either expressed, implied, or  *\n*  statutory, including, without limitation, warranties that the       *\n*  Covered Software is free of defects, merchantable, fit for a        *\n*  particular purpose or non-infringing. The entire risk as to the     *\n*  quality and performance of the Covered Software is with You.        *\n*  Should any Covered Software prove defective in any respect, You     *\n*  (not any Contributor) assume the cost of any necessary servicing,   *\n*  repair, or correction. This disclaimer of warranty constitutes an   *\n*  essential part of this License. No use of any Covered Software is   *\n*  authorized under this License except under this disclaimer.         *\n*                                                                      *\n************************************************************************\n\n************************************************************************\n*                                                                      *\n*  7. Limitation of Liability                                          *\n*  --------------------------                                          *\n*                                                                      *\n*  Under no circumstances and under no legal theory, whether tort      *\n*  (including negligence), contract, or otherwise, shall any           *\n*  Contributor, or anyone who distributes Covered Software as          *\n*  permitted above, be liable to You for any direct, indirect,         *\n*  special, incidental, or consequential damages of any character      *\n*  including, without limitation, damages for lost profits, loss of    *\n*  goodwill, work stoppage, computer failure or malfunction, or any    *\n*  and all other commercial damages or losses, even if such party      *\n*  shall have been informed of the possibility of such damages. This   *\n*  limitation of liability shall not apply to liability for death or   *\n*  personal injury resulting from such party's negligence to the       *\n*  extent applicable law prohibits such limitation. Some               *\n*  jurisdictions do not allow the exclusion or limitation of           *\n*  incidental or consequential damages, so this exclusion and          *\n*  limitation may not apply to You.                                    *\n*                                                                      *\n************************************************************************\n\n8. Litigation\n-------------\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n9. Miscellaneous\n----------------\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n10. Versions of the License\n---------------------------\n\n10.1. New Versions\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n10.2. Effect of New Versions\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n10.3. Modified Versions\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary\nLicenses\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\nExhibit A - Source Code Form License Notice\n-------------------------------------------\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\nYou may add additional accurate notices of copyright ownership.\n\nExhibit B - \"Incompatible With Secondary Licenses\" Notice\n---------------------------------------------------------\n\n  This Source Code Form is \"Incompatible With Secondary Licenses\", as\n  defined by the Mozilla Public License, v. 2.0."
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "Introduction",
    "section": "🗺️Overview",
    "text": "🗺️Overview\nThe ‘broadcast’  - package, as the name suggests, performs “broadcasting” (similar to broadcasting in the ‘Numpy’ module for ‘Python’).\nIn the context of operations involving 2 (or more) arrays, “broadcasting” refers to recycling array dimensions without allocating additional memory, which is considerably faster and more memory-efficient than R’s regular dimensions replication mechanism.\nPlease read the article “Broadcasting explained” for a more complete explanation of what “broadcasting” is.\n \nAt its core, the ‘broadcast’ package provides 3 functionalities, all 3 related to “broadcasting”:\n \nFirst, ‘broadcast’ provides functions for element-wise outer computations between any 2 arrays.\nThese are similar to base R’s outer() function, but using broadcasting, which is faster and more efficient than the mechanism employed by outer().\nThe outer-like functions provided by ‘broadcast’ are optimised for a large set of relational-, arithmetic-, Boolean-, and string operations.\nThese functions have clear broadcasting rules, making it easy to accurately predict the dimensions of the result.\n \nSecond, ‘broadcast’ provides the bind_array() function, which is a broadcasted and enhanced form of the fantastic abind::abind() function:\n\nbind_array() allows for broadcasting (obviously), whereas abind::abind() does not.\nbind_array() is significantly faster and uses less memory than abind::abind().\nbind_array() also differs from abind::abind() in that it can handle recursive arrays properly; abind::abind() unlists everything to atomic arrays, ruining the structure.\n\n \nThird, ‘broadcast’ provides several generic functions for broadcasting:\n\nbcapply(): a broadcasted apply-like function that works on pairs of arrays.\nbc_ifelse(): a broadcasted ifelse() function. Broadcasts between the yes and no arguments.\n\n \nAdditionally, ‘broadcast’ includes the acast() function, for casting/pivoting an array into a new dimension. Roughly analogous to data.table::dcast(), but for arrays."
  },
  {
    "objectID": "index.html#why-use-broadcast",
    "href": "index.html#why-use-broadcast",
    "title": "Introduction",
    "section": "🤷🏽Why use ‘broadcast’",
    "text": "🤷🏽Why use ‘broadcast’\nEfficiency\nBroadcasting dimensions is faster and more memory efficient than replicating dimensions.\nEfficient programs use less energy and resources, and is thus better for the environment.\nAs a favoured language for the sciences,  should not throw away an opportunity to become more efficient.\nThe Benchmarks show that ‘broadcast’ has a somewhat similar speed as equivalent operations in ‘Numpy’.\n \nConvenience\nHave you ever been bothered by any of the following while programming in :\n\nReceiving the “non-conformable arrays” error message in a simple operation when it intuitively should work?\nReceiving the “Error: cannot allocate vector of size” error message because  unnecessarily allocates too much memory?\nTrying to perform a simple operation on all possible combinations, only to find out you need nested loops and/or grid expansions to do something that should be very simple?\nhaving to store and re-assign attributes when type-casting arrays?\nouter() being slow and consuming way too much memory?\nabind() being too slow, saying arrays are not conformable, and/or coercing recursive arrays to character arrays?\nhaving to convert arrays to data.frames and then back to arrays (which wastes memory and other resources), just to be able to cast arrays?\n\nIf you answered “YES” to any of the above, ‘broadcast’ may very well be the  - package for you.\n \nMinimal Dependencies\nBesides linking to ‘Rcpp’, ‘broadcast’ does not depend on, vendor, link to, include, or otherwise use any external libraries; ‘broadcast’ was essentially made from scratch and can be installed out-of-the-box.\nNot using external libraries brings a number of advantages:\n\nAvoid dependency hell: Every dependency that is added to a software package increases the likelihood of something breaking (AKA “dependency hell”). ‘broadcast’ thus avoids this.\nAvoid wasting resources for translations: Using libraries from other languages, such as ‘xtensor’ (‘C++’) or ‘Numpy’ (‘Python’) means that - at some point - one needs to convert between the structure of  to that of the other language, and vice-versa, which wastes precious time, memory, and power. ‘broadcast’ requires no such translations of structures, and is therefore much less wasteful.\nEnsure consistent behaviour: Using libraries from other languages also means one cannot always guarantee consistent behaviour for some operations. For example: both ‘Numpy’ and ‘xtensor’ have only limited support for missing values, whereas  supports missing values for both atomic and recursive array/vector types (except type of ‘Raw’). Since ‘broadcast’ does not rely on external libraries, it can ensure behaviour that is consistent with the rest of ."
  },
  {
    "objectID": "index.html#documentation",
    "href": "index.html#documentation",
    "title": "Introduction",
    "section": "📖Documentation",
    "text": "📖Documentation\nThe documentation in the ‘broadcast’ website is divided into 3 main navigationable sections:\n\nGuides and Vignettes: Here you’ll find the topic-oriented guides in the form of a few Vignettes.\nReference Manual: Here you’ll find the function-oriented reference manual.\nAbout: Here you’ll find mainly the Changelog and License file."
  },
  {
    "objectID": "man/aaa01_broadcast_bind.html",
    "href": "man/aaa01_broadcast_bind.html",
    "title": "R-package: broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of base R’s rbind()/cbind() functions.  bind_mat() differs from rbind()/cbind() in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10)."
  },
  {
    "objectID": "man/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "href": "man/aaa01_broadcast_bind.html#details-on-the-binding-implementations-in-broadcast",
    "title": "R-package: broadcast",
    "section": "",
    "text": "This help page gives additional details on the binding implementations in the ‘broadcast’ package.  \n\n\n\nIf argument input has length 0, or it contains exclusively objects where one or more dimensions are 0, an error is returned.   If input has length 1, these functions simply return input[[1L]].  \n\n\n\nThe API of bind_array() is inspired by the fantastic abind::abind function by Tony Plare & Richard Heiberger (2016).  But bind_array() differs considerably from abind::abind in the following ways:\n\n\nbind_array() differs from abind::abind in that it can handle recursive arrays properly  (the abind::abind function would unlist everything to atomic arrays, ruining the structure).\n\n\nbind_array() allows for broadcasting, while abind::abind does not support broadcasting.\n\n\nbind_array() is generally faster than abind::abind, as bind_array() relies heavily on ‘C’ and ‘C++’ code.\n\n\nunlike abind::abind, bind_array() only binds (atomic/recursive) arrays and matrices.  bind_array()does not attempt to convert things to arrays when they are not arrays, but will give an error instead.  This saves computation time and prevents unexpected results.\n\n\nbind_array() has more streamlined naming options, compared to abind::abind.  \n\n\nbind_mat() is a modified version of base R’s rbind()/cbind() functions.  bind_mat() differs from rbind()/cbind() in the following ways:\n\n\nit has more streamlined naming options/\n\n\nbind_mat() gives an error when fractional recycling is attempted (like binding 1:3 with 1:10)."
  },
  {
    "objectID": "man/bc.b.html",
    "href": "man/bc.b.html",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.b(x, y, \"&\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE  TRUE\n## [2,]    NA  TRUE  TRUE\n## [3,] FALSE    NA    NA\n## [4,]  TRUE  TRUE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA  TRUE\n## [2,]  TRUE  TRUE    NA\n## [3,] FALSE FALSE FALSE\n## [4,]  TRUE FALSE    NA\nbc.b(x, y, \"|\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.b(x, y, \"xor\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE  TRUE FALSE\n## [2,]    NA FALSE FALSE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE  TRUE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,] FALSE FALSE    NA\n## [3,]  TRUE  TRUE  TRUE\n## [4,] FALSE  TRUE    NA\nbc.b(x, y, \"nand\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.b(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE  TRUE\n## [2,]    NA  TRUE  TRUE\n## [3,] FALSE    NA    NA\n## [4,]  TRUE  TRUE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA  TRUE\n## [2,]  TRUE  TRUE    NA\n## [3,] FALSE FALSE FALSE\n## [4,]  TRUE FALSE    NA\nbc.b(x, y, \"!=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE  TRUE FALSE\n## [2,]    NA FALSE FALSE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE  TRUE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,] FALSE FALSE    NA\n## [3,]  TRUE  TRUE  TRUE\n## [4,] FALSE  TRUE    NA"
  },
  {
    "objectID": "man/bc.b.html#broadcasted-boolean-operations",
    "href": "man/bc.b.html#broadcasted-boolean-operations",
    "title": "bc.b",
    "section": "",
    "text": "The bc.b() function performs broadcasted Boolean operations on 2 logical (or 32bit integer) arrays.   Please note that these operations will treat the input as Boolean.  Therefore, something like bc.b(1, 2, “==”) returns TRUE, because both 1 and 2 are TRUE when cast as Boolean.  \n\n\n\nbc.b(x, y, op)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical (or 32bit integer) arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported Boolean operators: &, |, xor, nand, ==, !=, &lt;, &gt;, &lt;=, &gt;=. \n\n\n\n\n\n\n\nA logical array as a result of the broadcasted Boolean operation.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(TRUE, FALSE, NA), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.b(x, y, \"&\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE  TRUE\n## [2,]    NA  TRUE  TRUE\n## [3,] FALSE    NA    NA\n## [4,]  TRUE  TRUE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA  TRUE\n## [2,]  TRUE  TRUE    NA\n## [3,] FALSE FALSE FALSE\n## [4,]  TRUE FALSE    NA\nbc.b(x, y, \"|\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.b(x, y, \"xor\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE  TRUE FALSE\n## [2,]    NA FALSE FALSE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE  TRUE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,] FALSE FALSE    NA\n## [3,]  TRUE  TRUE  TRUE\n## [4,] FALSE  TRUE    NA\nbc.b(x, y, \"nand\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.b(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE  TRUE\n## [2,]    NA  TRUE  TRUE\n## [3,] FALSE    NA    NA\n## [4,]  TRUE  TRUE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE    NA  TRUE\n## [2,]  TRUE  TRUE    NA\n## [3,] FALSE FALSE FALSE\n## [4,]  TRUE FALSE    NA\nbc.b(x, y, \"!=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,]  TRUE  TRUE FALSE\n## [2,]    NA FALSE FALSE\n## [3,]  TRUE    NA    NA\n## [4,] FALSE FALSE  TRUE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE    NA FALSE\n## [2,] FALSE FALSE    NA\n## [3,]  TRUE  TRUE  TRUE\n## [4,] FALSE  TRUE    NA"
  },
  {
    "objectID": "man/bc.d.html",
    "href": "man/bc.d.html",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 624.1 738.1 158.1\n## [2,] 883.1 549.1 447.1\n## [3,] 390.1 941.1  95.1\n## [4,] 987.1 203.1 840.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 908.1 464.1 661.1\n## [2,] 203.1 809.1 363.1\n## [3,] 617.1 384.1  38.1\n## [4,] 143.1 284.1  89.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 622.1 736.1 156.1\n## [2,] 879.1 545.1 443.1\n## [3,] 384.1 935.1  89.1\n## [4,] 979.1 195.1 832.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 906.1 462.1 659.1\n## [2,] 199.1 805.1 359.1\n## [3,] 611.1 378.1  32.1\n## [4,] 135.1 276.1  81.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  623.1  737.1  157.1\n## [2,] 1762.2 1094.2  890.2\n## [3,] 1161.3 2814.3  276.3\n## [4,] 3932.4  796.4 3344.4\n## \n## , , 2\n## \n##        [,1]   [,2]  [,3]\n## [1,]  907.1  463.1 660.1\n## [2,]  402.2 1614.2 722.2\n## [3,] 1842.3 1143.3 105.3\n## [4,]  556.4 1120.4 340.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]    [,2]    [,3]\n## [1,] 623.1000 737.100 157.100\n## [2,] 440.5500 273.550 222.550\n## [3,] 129.0333 312.700  30.700\n## [4,] 245.7750  49.775 209.025\n## \n## , , 2\n## \n##         [,1]     [,2]    [,3]\n## [1,] 907.100 463.1000 660.100\n## [2,] 100.550 403.5500 180.550\n## [3,] 204.700 127.0333  11.700\n## [4,]  34.775  70.0250  21.275\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 6.231000e+02        737.1 1.571000e+02\n## [2,] 7.763372e+05     299318.4 1.981140e+05\n## [3,] 5.800555e+07  825557653.3 7.812300e+05\n## [4,] 9.340944e+11 1571393817.5 4.886894e+11\n## \n## , , 2\n## \n##              [,1]         [,2]        [,3]\n## [1,]       907.10        463.1      660.10\n## [2,]     40441.21     651410.4   130393.21\n## [3,] 231588661.22   55349900.7    43243.55\n## [4,] 374376448.42 6155345505.1 52446708.84\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"&lt;\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"&gt;\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"&lt;=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"&gt;=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc.d.html#broadcasted-decimal-numeric-operations",
    "href": "man/bc.d.html#broadcasted-decimal-numeric-operations",
    "title": "bc.d",
    "section": "",
    "text": "The bc.d() function performs broadcasted decimal numeric operations on 2 numeric or logical arrays.  bc.num() is an alias for bc.d().  \n\n\n\nbc.d(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\nbc.num(x, y, op, prec = sqrt(.Machine\\$double.eps))\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable logical or numeric arrays.\n\n\n\n\nop\n\n\na single string, giving the operator.  Supported arithmetic operators: +, -, *, /, ^, pmin, pmax.  Supported relational operators: ==, !=, &lt;, &gt;, &lt;=, &gt;=, d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=. \n\n\n\n\nprec\n\n\na single number between 0 and 0.1, giving the machine precision to use.  Only relevant for the following operators:  d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;=  See the d==, d!=, d&lt;, d&gt;, d&lt;=, d&gt;= operators from the ‘tinycodet’ package for details. \n\n\n\n\n\n\n\nFor arithmetic operators:  A numeric array as a result of the broadcasted decimal arithmetic operation.   For relational operators:  A logical array as a result of the broadcasted decimal relational comparison.  \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(4:2)\nx.len &lt;- prod(x.dim)\nx.data &lt;- sample(c(NA, 1.1:1000.1), x.len, TRUE)\nx &lt;- array(x.data, x.dim)\ny &lt;- array(1:50, c(4,1,1))\n\nbc.d(x, y, \"+\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 624.1 738.1 158.1\n## [2,] 883.1 549.1 447.1\n## [3,] 390.1 941.1  95.1\n## [4,] 987.1 203.1 840.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 908.1 464.1 661.1\n## [2,] 203.1 809.1 363.1\n## [3,] 617.1 384.1  38.1\n## [4,] 143.1 284.1  89.1\nbc.d(x, y, \"-\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] 622.1 736.1 156.1\n## [2,] 879.1 545.1 443.1\n## [3,] 384.1 935.1  89.1\n## [4,] 979.1 195.1 832.1\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] 906.1 462.1 659.1\n## [2,] 199.1 805.1 359.1\n## [3,] 611.1 378.1  32.1\n## [4,] 135.1 276.1  81.1\nbc.d(x, y, \"*\")\n## , , 1\n## \n##        [,1]   [,2]   [,3]\n## [1,]  623.1  737.1  157.1\n## [2,] 1762.2 1094.2  890.2\n## [3,] 1161.3 2814.3  276.3\n## [4,] 3932.4  796.4 3344.4\n## \n## , , 2\n## \n##        [,1]   [,2]  [,3]\n## [1,]  907.1  463.1 660.1\n## [2,]  402.2 1614.2 722.2\n## [3,] 1842.3 1143.3 105.3\n## [4,]  556.4 1120.4 340.4\nbc.d(x, y, \"/\")\n## , , 1\n## \n##          [,1]    [,2]    [,3]\n## [1,] 623.1000 737.100 157.100\n## [2,] 440.5500 273.550 222.550\n## [3,] 129.0333 312.700  30.700\n## [4,] 245.7750  49.775 209.025\n## \n## , , 2\n## \n##         [,1]     [,2]    [,3]\n## [1,] 907.100 463.1000 660.100\n## [2,] 100.550 403.5500 180.550\n## [3,] 204.700 127.0333  11.700\n## [4,]  34.775  70.0250  21.275\nbc.d(x, y, \"^\")\n## , , 1\n## \n##              [,1]         [,2]         [,3]\n## [1,] 6.231000e+02        737.1 1.571000e+02\n## [2,] 7.763372e+05     299318.4 1.981140e+05\n## [3,] 5.800555e+07  825557653.3 7.812300e+05\n## [4,] 9.340944e+11 1571393817.5 4.886894e+11\n## \n## , , 2\n## \n##              [,1]         [,2]        [,3]\n## [1,]       907.10        463.1      660.10\n## [2,]     40441.21     651410.4   130393.21\n## [3,] 231588661.22   55349900.7    43243.55\n## [4,] 374376448.42 6155345505.1 52446708.84\n\nbc.d(x, y, \"==\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"!=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"&lt;\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"&gt;\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\nbc.d(x, y, \"&lt;=\")\n## , , 1\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\n## \n## , , 2\n## \n##       [,1]  [,2]  [,3]\n## [1,] FALSE FALSE FALSE\n## [2,] FALSE FALSE FALSE\n## [3,] FALSE FALSE FALSE\n## [4,] FALSE FALSE FALSE\nbc.d(x, y, \"&gt;=\")\n## , , 1\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE\n## \n## , , 2\n## \n##      [,1] [,2] [,3]\n## [1,] TRUE TRUE TRUE\n## [2,] TRUE TRUE TRUE\n## [3,] TRUE TRUE TRUE\n## [4,] TRUE TRUE TRUE"
  },
  {
    "objectID": "man/bc.list.html",
    "href": "man/bc.list.html",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n## , , 1\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n## \n## , , 2\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2"
  },
  {
    "objectID": "man/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "href": "man/bc.list.html#broadcasted-operations-for-recursive-arrays",
    "title": "bc.list",
    "section": "",
    "text": "The bc.list() function performs broadcasted operations on 2 Recursive arrays. \n\n\n\nbc.list(x, y, f)\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable Recursive arrays (i.e. arrays of type list).\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a list. \n\n\n\n\n\n\n\nA recursive array. \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nbc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y), typeof(x) == typeof(y))\n)\n## , , 1\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2\n## \n## , , 2\n## \n##       [,1]      [,2]     \n##  [1,] logical,2 logical,2\n##  [2,] logical,2 logical,2\n##  [3,] logical,2 logical,2\n##  [4,] logical,2 logical,2\n##  [5,] logical,2 logical,2\n##  [6,] logical,2 logical,2\n##  [7,] logical,2 logical,2\n##  [8,] logical,2 logical,2\n##  [9,] logical,2 logical,2\n## [10,] logical,2 logical,2"
  },
  {
    "objectID": "man/bcapply.html",
    "href": "man/bcapply.html",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n## , , 1\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2\n## \n## , , 2\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2"
  },
  {
    "objectID": "man/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "href": "man/bcapply.html#apply-a-function-to-2-broadcasted-arrays",
    "title": "bcapply",
    "section": "",
    "text": "The bcapply() function applies a function to 2 arrays with broadcasting. \n\n\n\nbcapply(x, y, f, v = \"list\")\n\n\n\n\n\n\n\n\nx, y\n\n\nconformable atomic or recursive arrays.\n\n\n\n\nf\n\n\na function that takes in exactly 2 arguments, and returns a result that can be stored in a single element of a recursive or atomic array.\n\n\n\n\nv\n\n\na single string, giving the scalar type for a single iteration.  If NULL or “list” (default), the result will be a recursive array.  If it is certain that, for every iteration, f() always results in a single atomic scalar, the user can specify the type in v to pre-allocate the result.  Pre-allocating the results leads to slightly faster and more memory efficient code.  NOTE: Incorrectly specifying v leads to undefined behaviour. \n\n\n\n\n\n\n\nAn atomic or recursive array with dimensions bc_dim(x, y). \n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\nf &lt;- function(x, y) list(x, y)\nbcapply(x, y, f)\n## , , 1\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2\n## \n## , , 2\n## \n##       [,1]   [,2]  \n##  [1,] list,2 list,2\n##  [2,] list,2 list,2\n##  [3,] list,2 list,2\n##  [4,] list,2 list,2\n##  [5,] list,2 list,2\n##  [6,] list,2 list,2\n##  [7,] list,2 list,2\n##  [8,] list,2 list,2\n##  [9,] list,2 list,2\n## [10,] list,2 list,2"
  },
  {
    "objectID": "man/bc_ifelse.html",
    "href": "man/bc_ifelse.html",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported except for raw.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n## , , 1\n## \n##       [,1]         [,2]        \n##  [1,] character,26 character,26\n##  [2,] character,26 character,26\n##  [3,] character,12 character,12\n##  [4,] integer,10   integer,10  \n##  [5,] integer,10   integer,10  \n##  [6,] character,26 character,26\n##  [7,] character,12 character,12\n##  [8,] character,26 character,26\n##  [9,] character,26 character,26\n## [10,] character,12 character,12\n## \n## , , 2\n## \n##       [,1]         [,2]        \n##  [1,] character,26 character,26\n##  [2,] character,26 character,26\n##  [3,] character,12 character,12\n##  [4,] integer,10   integer,10  \n##  [5,] integer,10   integer,10  \n##  [6,] character,26 character,26\n##  [7,] character,12 character,12\n##  [8,] character,26 character,26\n##  [9,] character,26 character,26\n## [10,] character,12 character,12"
  },
  {
    "objectID": "man/bc_ifelse.html#broadcasted-ifelse",
    "href": "man/bc_ifelse.html#broadcasted-ifelse",
    "title": "bc_ifelse",
    "section": "",
    "text": "The bc_ifelse() function performs a broadcasted form of ifelse. \n\n\n\nbc_ifelse(cond, yes, no)\n\n\n\n\n\n\n\n\ncond\n\n\nlogical vector or array with the length equal to prod(bc_dim(yes, no)).\n\n\n\n\nyes, no\n\n\nconformable arrays of the same type.  All atomic types (see atomic) are supported except for raw.  Recursive arrays of type list are also supported.  \n\n\n\n\n\n\n\nThe ouput, here referred to as out, will be an array of the same type as yes and no.  After broadcasting yes against no, given any element index i, the following will hold for the output:\n\n\nwhen cond[i] == TRUE, out[i] is yes[i];\n\n\nwhen cond[i] == FALSE, out[i] is no[i];\n\n\nwhen cond[i] is NA, out[i] is NA when yes and no are atomic, and out[i] is list(NULL) when yes and no are recursive.  \n\n\n\n\n\n\nlibrary(\"broadcast\")\n\nx.dim &lt;- c(c(10, 2,2))\nx.len &lt;- prod(x.dim)\n\ngen &lt;- function(n) sample(list(letters, month.abb, 1:10), n, TRUE)\n\nx &lt;- array(gen(10), x.dim)\ny &lt;- array(gen(10), c(10,1,1))\n\ncond &lt;- bc.list(\n  x, y,\n  \\(x, y)c(length(x) == length(y) && typeof(x) == typeof(y))\n) |&gt; as_bool()\n\nbc_ifelse(cond, yes = x, no = y)\n## , , 1\n## \n##       [,1]         [,2]        \n##  [1,] character,26 character,26\n##  [2,] character,26 character,26\n##  [3,] character,12 character,12\n##  [4,] integer,10   integer,10  \n##  [5,] integer,10   integer,10  \n##  [6,] character,26 character,26\n##  [7,] character,12 character,12\n##  [8,] character,26 character,26\n##  [9,] character,26 character,26\n## [10,] character,12 character,12\n## \n## , , 2\n## \n##       [,1]         [,2]        \n##  [1,] character,26 character,26\n##  [2,] character,26 character,26\n##  [3,] character,12 character,12\n##  [4,] integer,10   integer,10  \n##  [5,] integer,10   integer,10  \n##  [6,] character,26 character,26\n##  [7,] character,12 character,12\n##  [8,] character,26 character,26\n##  [9,] character,26 character,26\n## [10,] character,12 character,12"
  },
  {
    "objectID": "man/properties.html",
    "href": "man/properties.html",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nFor ndim(): an integer scalar.  For lst.ndim(): an integer vector, with the same length, names and dimensions as x.  For lst.typeof(): a character vector, with the same length, names and dimensions as x. \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- list(\n  array(1:10, 10),\n  array(1:10, c(2, 5)),\n  array(c(letters, NA), c(3,3,3))\n)\nlst.ndim(x)\n## [1] 1 2 3\nlst.typeof(x)\n## [1] \"integer\"   \"integer\"   \"character\""
  },
  {
    "objectID": "man/properties.html#small-property-functions",
    "href": "man/properties.html#small-property-functions",
    "title": "properties",
    "section": "",
    "text": "ndim() returns the number of dimensions of an object.  lst.ndim() returns the number of dimensions of every list-element.  lst.typeof() returns the (internal) type of every list-element.  \n\n\n\nndim(x)\n\nlst.ndim(x)\n\nlst.typeof(x)\n\n\n\n\n\n\n\n\nx\n\n\nan object. For functions starting with lst., x must be a list (i.e. recursive vector or recursive array). \n\n\n\n\n\n\n\nFor ndim(): an integer scalar.  For lst.ndim(): an integer vector, with the same length, names and dimensions as x.  For lst.typeof(): a character vector, with the same length, names and dimensions as x. \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- list(\n  array(1:10, 10),\n  array(1:10, c(2, 5)),\n  array(c(letters, NA), c(3,3,3))\n)\nlst.ndim(x)\n## [1] 1 2 3\nlst.typeof(x)\n## [1] \"integer\"   \"integer\"   \"character\""
  },
  {
    "objectID": "man/typecast.html",
    "href": "man/typecast.html",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n##     January February March April   May\n## Jan    TRUE     TRUE  TRUE  TRUE FALSE\n## Feb    TRUE     TRUE  TRUE  TRUE  TRUE\n## Mar    TRUE     TRUE  TRUE  TRUE  TRUE\n## Apr    TRUE     TRUE  TRUE  TRUE  TRUE\n## May    TRUE     TRUE  TRUE  TRUE  TRUE\n## Jun    TRUE     TRUE  TRUE  TRUE  TRUE\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_int(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_dbl(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_chr(x)\n##     January February March April May \n## Jan \"16\"    \"11\"     \"21\"  \"20\"  \"0\" \n## Feb \"12\"    \"10\"     \"26\"  \"15\"  \"8\" \n## Mar \"22\"    \"27\"     \"3\"   \"24\"  \"13\"\n## Apr \"2\"     \"4\"      \"19\"  \"23\"  \"6\" \n## May \"-1\"    \"5\"      \"9\"   \"14\"  \"28\"\n## Jun \"7\"     \"25\"     \"18\"  \"1\"   \"17\"\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_cplx(x)\n##     January February March April   May\n## Jan   16+0i    11+0i 21+0i 20+0i  0+0i\n## Feb   12+0i    10+0i 26+0i 15+0i  8+0i\n## Mar   22+0i    27+0i  3+0i 24+0i 13+0i\n## Apr    2+0i     4+0i 19+0i 23+0i  6+0i\n## May   -1+0i     5+0i  9+0i 14+0i 28+0i\n## Jun    7+0i    25+0i 18+0i  1+0i 17+0i\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_raw(x)\n##     January February March April May\n## Jan      10       0b    15    14  00\n## Feb      0c       0a    1a    0f  08\n## Mar      16       1b    03    18  0d\n## Apr      02       04    13    17  06\n## May      00       05    09    0e  1c\n## Jun      07       19    12    01  11\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n##   January  February     March     April       May      June      July    August \n##       Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \n## September   October  November  December \n##       Sep       Oct       Nov       Dec \n## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n##   January  February     March     April       May      June      July    August \n##     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \n## September   October  November  December \n##      TRUE      TRUE      TRUE      TRUE\nas_int(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_dbl(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_chr(x)\n##   January  February     March     April       May      June      July    August \n##     \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \n## September   October  November  December \n##     \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\"\nas_cplx(x)\n##   January  February     March     April       May      June      July    August \n##  1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\n## September   October  November  December \n##  9+0i 10+0i 11+0i 12+0i\nas_raw(x)\n##   January  February     March     April       May      June      July    August \n##        01        02        03        04        05        06        07        08 \n## September   October  November  December \n##        09        0a        0b        0c"
  },
  {
    "objectID": "man/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "href": "man/typecast.html#atomic-and-list-type-casting-with-names-and-dimensions-preserved",
    "title": "typecast",
    "section": "",
    "text": "Type casting usually strips away attributes of objects.  The functions provided here preserve dimensions, dimnames, and names, which may be more convenient for arrays and array-like objects.   The functions are as follows: \n\n\nas_bool(): converts object to atomic type logical (TRUE, FALSE, NA).\n\n\nas_int(): converts object to atomic type integer.\n\n\nas_dbl(): converts object to atomic type double (AKA numeric).\n\n\nas_chr(): converts object to atomic type character.\n\n\nas_cplx(): converts object to atomic type complex.\n\n\nas_raw(): converts object to atomic type raw.\n\n\nas_list(): converts object to recursive type list. \n\n\nas_num() is an alias for as_dbl().  as_str() is an alias for as_chr().   See also typeof.  \n\n\n\nas_bool(x, ...)\n\nas_int(x, ...)\n\nas_dbl(x, ...)\n\nas_num(x, ...)\n\nas_chr(x, ...)\n\nas_str(x, ...)\n\nas_cplx(x, ...)\n\nas_raw(x, ...)\n\nas_list(x, ...)\n\n\n\n\n\n\n\n\nx\n\n\nan R object.\n\n\n\n\n…\n\n\nfurther arguments passed to or from other methods.\n\n\n\n\n\n\n\nThe converted object.  \n\n\n\n\nlibrary(\"broadcast\")\n\n\n# matrix example ====\nx &lt;- matrix(sample(-1:28), ncol = 5)\ncolnames(x) &lt;- month.name[1:5]\nrownames(x) &lt;- month.abb[1:6]\nnames(x) &lt;- c(letters[1:20], LETTERS[1:10])\nprint(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\nas_bool(x)\n##     January February March April   May\n## Jan    TRUE     TRUE  TRUE  TRUE FALSE\n## Feb    TRUE     TRUE  TRUE  TRUE  TRUE\n## Mar    TRUE     TRUE  TRUE  TRUE  TRUE\n## Apr    TRUE     TRUE  TRUE  TRUE  TRUE\n## May    TRUE     TRUE  TRUE  TRUE  TRUE\n## Jun    TRUE     TRUE  TRUE  TRUE  TRUE\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_int(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_dbl(x)\n##     January February March April May\n## Jan      16       11    21    20   0\n## Feb      12       10    26    15   8\n## Mar      22       27     3    24  13\n## Apr       2        4    19    23   6\n## May      -1        5     9    14  28\n## Jun       7       25    18     1  17\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_chr(x)\n##     January February March April May \n## Jan \"16\"    \"11\"     \"21\"  \"20\"  \"0\" \n## Feb \"12\"    \"10\"     \"26\"  \"15\"  \"8\" \n## Mar \"22\"    \"27\"     \"3\"   \"24\"  \"13\"\n## Apr \"2\"     \"4\"      \"19\"  \"23\"  \"6\" \n## May \"-1\"    \"5\"      \"9\"   \"14\"  \"28\"\n## Jun \"7\"     \"25\"     \"18\"  \"1\"   \"17\"\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_cplx(x)\n##     January February March April   May\n## Jan   16+0i    11+0i 21+0i 20+0i  0+0i\n## Feb   12+0i    10+0i 26+0i 15+0i  8+0i\n## Mar   22+0i    27+0i  3+0i 24+0i 13+0i\n## Apr    2+0i     4+0i 19+0i 23+0i  6+0i\n## May   -1+0i     5+0i  9+0i 14+0i 28+0i\n## Jun    7+0i    25+0i 18+0i  1+0i 17+0i\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\nas_raw(x)\n##     January February March April May\n## Jan      10       0b    15    14  00\n## Feb      0c       0a    1a    0f  08\n## Mar      16       1b    03    18  0d\n## Apr      02       04    13    17  06\n## May      00       05    09    0e  1c\n## Jun      07       19    12    01  11\n## attr(,\"names\")\n##  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n## [20] \"t\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"\n\n\n################################################################################\n\n# factor example ====\nx &lt;- factor(month.abb, levels = month.abb)\nnames(x) &lt;- month.name\nprint(x)\n##   January  February     March     April       May      June      July    August \n##       Jan       Feb       Mar       Apr       May       Jun       Jul       Aug \n## September   October  November  December \n##       Sep       Oct       Nov       Dec \n## Levels: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\n\nas_bool(as_int(x) &gt; 6)\n##   January  February     March     April       May      June      July    August \n##     FALSE     FALSE     FALSE     FALSE     FALSE     FALSE      TRUE      TRUE \n## September   October  November  December \n##      TRUE      TRUE      TRUE      TRUE\nas_int(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_dbl(x)\n##   January  February     March     April       May      June      July    August \n##         1         2         3         4         5         6         7         8 \n## September   October  November  December \n##         9        10        11        12\nas_chr(x)\n##   January  February     March     April       May      June      July    August \n##     \"Jan\"     \"Feb\"     \"Mar\"     \"Apr\"     \"May\"     \"Jun\"     \"Jul\"     \"Aug\" \n## September   October  November  December \n##     \"Sep\"     \"Oct\"     \"Nov\"     \"Dec\"\nas_cplx(x)\n##   January  February     March     April       May      June      July    August \n##  1+0i  2+0i  3+0i  4+0i  5+0i  6+0i  7+0i  8+0i\n## September   October  November  December \n##  9+0i 10+0i 11+0i 12+0i\nas_raw(x)\n##   January  February     March     April       May      June      July    August \n##        01        02        03        04        05        06        07        08 \n## September   October  November  December \n##        09        0a        0b        0c"
  },
  {
    "objectID": "vignettes/b_installation.html",
    "href": "vignettes/b_installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install ‘broadcast’ from GitHub, one may run the following code in :\n\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n‘broadcast’ is not a large package per-sé, but it does contain a large amount of compiled code (‘C’ and ‘C++’). Compilation of the package may therefore be slow on some operating systems, especially Linux systems; please be patient. On an average laptop running Windows 11, installation of the ‘broadcast’ package shouldn’t take more than just a few minutes.\nIf installation is too slow, one may try to speed up the installation using multi-threading, for example like so:\n\n\nnthreads &lt;- 8L # specify number of threads\nSys.setenv(MAKEFLAGS = paste0(\"-j\", nthreads)) # may speed up installation\n\nremotes::install_github(\"https://github.com/tony-aw/broadcast\")\n\n \nTo attach the package - thus expose its functions to the namespace - please use the following:\n\n\nlibrary(broadcast)\n\n \nTo open the introduction help page of the ‘broadcast’ package, please use any of the following:\n\n\n?broadcast::broadcast\n?broadcast::broadcast_help\n?broadcast::`broadcast-package`"
  },
  {
    "objectID": "vignettes/d_broadcasting_explained.html#example-case",
    "href": "vignettes/d_broadcasting_explained.html#example-case",
    "title": "Broadcasting Explained",
    "section": "2.1 Example case",
    "text": "2.1 Example case\nLet’s start with a simple example.\nConsider the column vector x and the row vector y:\n\nx &lt;- array(1:5, c(5, 1))\ny &lt;- array(1:5*10, c(1, 5))\nprint(x)\n#&gt;      [,1]\n#&gt; [1,]    1\n#&gt; [2,]    2\n#&gt; [3,]    3\n#&gt; [4,]    4\n#&gt; [5,]    5\nprint(y)\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   10   20   30   40   50\n\nSuppose one wishes to compute the outer sum of these 2 vectors.\nThis won’t work in base ‘R’:\n\nx + y\nError in x + y : non-conformable arrays\n\nWhen computing the outer sum of these vectors, both vectors need to be recycled to equal size in order to compute the outer computation.\nI.e. x needs its single column to be recycled (in this case) 5 times, and y needs its single row to be recycled 5 times, creating 2 conformable matrices.\n‘R’ provides linear vector recycling, but not recycling of array dimensions. Instead, in base ‘R’ we need to replicate (and thus copy) the array dimensions. This can be done manually, or using outer() |&gt; drop():\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55"
  },
  {
    "objectID": "vignettes/d_broadcasting_explained.html#what-is-the-problem",
    "href": "vignettes/d_broadcasting_explained.html#what-is-the-problem",
    "title": "Broadcasting Explained",
    "section": "2.2 What is the problem?",
    "text": "2.2 What is the problem?\nWhen x and y are small arrays, like in the above example, there is hardly a problem; but when x and y become larger, the 3 matrices (x is replicated to a matrix, y is replicated to a matrix, and the result is also matrix) also become larger.\nIf the 3 matrices become too large, you may require more memory than is available in your current system, resulting in a message like the following:\n\n&gt; Error: cannot allocate vector of size\n\nThe problem isn’t limited to available memory. As the object sizes increase, the speed decreases. And let’s not forget that computational inefficiency in general is also bad for the environment."
  },
  {
    "objectID": "vignettes/d_broadcasting_explained.html#introducing-broadcasting",
    "href": "vignettes/d_broadcasting_explained.html#introducing-broadcasting",
    "title": "Broadcasting Explained",
    "section": "2.3 Introducing Broadcasting",
    "text": "2.3 Introducing Broadcasting\nIn an operation like outer(x, y, \"+\"), x and y are replicated to become the same size. The thing is, physical replication - and thus copying - of the dimensions of x and y should not be necessary; they only need to be recycled virtually.\nVirtual recycling does not actually physically replicate x and y. Instead, nested loops in ‘C’ and ‘C++’ are used to simulate a recycled array.\nThis is similar to how ‘R’ recycles regular (i.e. dimensionless) vectors.\nVirtual recycling requires no additional memory (apart from allocating the final end result); it is much faster and much more memory efficient than using the outer() function or something similar.\nAnd that is what broadcasting does: broadcasting provides fast virtual recycling of array dimensions in the context of operations involving 2 (or more) arrays without allocating additional memory.\nIn the earlier example, we used:\n\nx[, rep(1L, 5L)] + y[rep(1L, 5L),]\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nouter(x, y, \"+\") |&gt; drop()\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nTo compute the outer sum using broadcasting through the ‘broadcast’ package, we can do the following:\n\nlibrary(broadcast)\n\nbc.num(x, y, \"+\")\n#&gt;      [,1] [,2] [,3] [,4] [,5]\n#&gt; [1,]   11   21   31   41   51\n#&gt; [2,]   12   22   32   42   52\n#&gt; [3,]   13   23   33   43   53\n#&gt; [4,]   14   24   34   44   54\n#&gt; [5,]   15   25   35   45   55\n\nThe result is the same (as it should). But as the size of the resulting array increases, the broadcasted functions become more and more efficient in terms of both speed and memory, in comparison with base ‘R’ approaches.\nBenchmarks can be found on the website."
  },
  {
    "objectID": "vignettes/d_broadcasting_explained.html#conformability",
    "href": "vignettes/d_broadcasting_explained.html#conformability",
    "title": "Broadcasting Explained",
    "section": "4.1 Conformability",
    "text": "4.1 Conformability\nBroadcasted operations only work when 2 arrays are conformable for broadcasting.\nConsider again 2 arrays x and y, and their dimensions given by dim(x) and dim(y), respectively.\n‘broadcast’ goes through dim(x) and dim(y), from left (i.e. first dimension / rows) to right (i.e. the last dimension), and checks for each axis i if at least one of the following conditions is TRUE:\n\ndim(x)[i] and dim(y)[i] are equal;\neither dim(x)[i] or dim(y)[i] is 1;\neither dim(x)[i] or dim(y)[i] is non-existing.\n\nif at least one of the above conditions is true for each and every one of the dimensions of x and y, the 2 arrays are compatible for broadcasted operations. If not, they are not compatible, and attempting to perform a broadcasted operations results in an error.\nTo illustrate, let’s check 2 arrays to see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 1))\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                dim(x)\n                dim(y)\n                compatible\n                reason\n              \n        \n        \n        \n                \n                  10\n                  10\n                  TRUE\n                  equal\n                \n                \n                  1\n                  5\n                  TRUE\n                  either is 1\n                \n                \n                  9\n                  1\n                  TRUE\n                  either is 1\n                \n                \n                  6\n                  NA\n                  TRUE\n                  either is missing\n                \n        \n      \n    \n\n\n\nAs shown in the data.frame above, all dimensions of x and y are compatible.\nTherefore, broadcasted binary operations involving x and y can be performed.\n \nNow let’s look at another 2 arrays, and see if they are compatible:\n\nx &lt;- array(rnorm(10), c(10, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 5, 2))\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                dim(x)\n                dim(y)\n                compatible\n                reason\n              \n        \n        \n        \n                \n                  10\n                  10\n                  TRUE\n                  equal\n                \n                \n                  1\n                  5\n                  TRUE\n                  either is 1\n                \n                \n                  9\n                  2\n                  FALSE\n                  not equal & neither is 1/missing\n                \n                \n                  6\n                  NA\n                  TRUE\n                  either is missing\n                \n        \n      \n    \n\n\n\nOne of the dimensions, namely the third dimension, is not compatible. Therefore, these 2 arrays are not conformable for broadcasted operations."
  },
  {
    "objectID": "vignettes/d_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "href": "vignettes/d_broadcasting_explained.html#which-dimensions-are-broadcasted",
    "title": "Broadcasting Explained",
    "section": "4.2 Which dimensions are broadcasted",
    "text": "4.2 Which dimensions are broadcasted\nIn the context of an operation involving exactly 2 arrays, this sub-section explains which dimensions of which array is broadcasted, and which dimension of which array is left as-is.\nThere are 3 scenarios relevant for this explanation.\n \nScenario 1:\nFor some dimension i, dim(x)[i] and dim(y)[i] are equal.\nIn this scenario, no broadcasting needs to occur on that dimension for either array.\n \nScenario 2:\nFor some dimension i, suppose dim(x)[i] == 1 and dim(y)[i] &gt; 1.\nThen dimension dim(x)[i] is broadcasted to size dim(y)[i].\nSimilarly, if dim(x)[i] &gt; 1 and dim(y)[i] == 1, dimension dim(y)[i] is broadcasted to size dim(x)[i].\n \nScenario 3:\nFinally, suppose for some dimension i, dim(x)[i] &gt; 1, and dim(y)[i] is non-existing.\nI.e., x has more dimensions than y.\nIn this case, the missing dimension in y is replaced with a dimensions of size 1, and scenario 2 is used.\nSimilarly, if dim(y)[i] &gt; 1 and dim(x)[i] is non-existing, the missing dimension in x is replaced with a dimension of size 1 and we get back to scenario 2.\nIt does not matter how much difference there is between the number of dimensions of x and the number of dimensions of y: any number of missing dimensions will be replaced with 1, as long as the total number of dimensions for each array does not exceed 16.\n \nIllustration\nTo illustrate, let’s check 2 conformable arrays, and see which dimension of which array is broadcasted by how much\n\nx &lt;- array(rnorm(10), c(10, 1, 1, 9, 6))\ny &lt;- array(rnorm(10), c(10, 1, 5, 1))\n\n\n\n\n\n\n    \n\n    \n    \n      \n        \n        \n              \n                i\n                dim(x)\n                dim(y)\n                broadcasted\n                reason\n                note\n              \n        \n        \n        \n                \n                  1\n                  10\n                  10\n                  neither\n                  dims equal\n                  \n                \n                \n                  2\n                  1\n                  1\n                  neither\n                  dims equal\n                  \n                \n                \n                  3\n                  1\n                  5\n                  x\n                  dim(x)[i] == 1\n                  dim(x)[i] recycled to size 5\n                \n                \n                  4\n                  9\n                  1\n                  y\n                  dim(y)[i] == 1\n                  dim(y)[i] recycled to size 9\n                \n                \n                  5\n                  6\n                  NA\n                  y\n                  dim(y)[i] is missing\n                  dim(y) extended with a 1; dim(y)[i] recycled to size 6"
  },
  {
    "objectID": "vignettes/f_benchmarks_numpy.html",
    "href": "vignettes/f_benchmarks_numpy.html",
    "title": "Benchmarks with Numpy+reticulate",
    "section": "",
    "text": "Introduction\nIn this article, the speed of ‘broadcast’ is compared to the speed of ‘Numpy’ via {reticulate}.\n \n\n\nKeeping comparisons fair\nTo keep the comparisons between ‘broadcast’ and ‘Numpy’+‘reticulate’ fair, a number of measures have been taken:\n\nconversion from Numpy to ‘R’ is DISABLED; this allows for comparing the speed more fairly. When conversion would be enabled, precious time would be wasted to convert from Numpy structures to comparable ‘R’ structures.\ngarbage collection is disabled in reticulate’s Python. In ‘R’, only benchmarks with no garbage collection, or level 0 garbage collection, is used. I feel this keeps the comparisons relatively fair (but it’s not perfect).\n‘R’ has more support for missing values than ‘Numpy’, which also leads to a difference in speed. But both ‘R’ and ‘Numpy’ handle missing values equally in decimal numbers ( 64bit floats in Numpy and 64bit doubles in ‘R’ ), through the NaN construct. Therefore, only operations on decimal numbers are compared.\n\n \n\n\nThe Set-Up\n8 pairs of decimal number arrays are created in both ‘R’ and ‘Numpy’. They all have a length of (approximately) 9*10^6 elements. Each pair will have a different number of dimensions, from 2 to 9 (hence 8 pairs of arrays). I.e. a pair of 2d arrays, a pair of 3d arrays, etc.\nThese pairs of arrays are fully orthogonal, thus the maximum amount of broadcasting will be employed.\nFor each pair of array the outer sum is computed using ‘broadcast’ and ‘Numpy’. This computation is repeated 100 times, and the median result is taken.\nThus we get the following code:\n\n# set-up ====\nlibrary(broadcast)\nlibrary(reticulate)\nnp &lt;- import(\"numpy\", convert = FALSE)\ngc &lt;- import(\"gc\", convert = FALSE)\nget_times &lt;- function(obj, j) {\n  nms &lt;- names(res$expression)\n  j &lt;- which(nms == j)\n  idx &lt;- rowSums(obj$gc[[j]][, 2:3]) == 0\n  times &lt;- obj$time[[j]][idx]\n  return(times)\n}\ngc$disable()\n\n# loop\nmedian_bc &lt;- median_np &lt;- q1_bc &lt;- q1_np &lt;- q3_bc &lt;- q3_np &lt;- vector(\"numeric\", 8)\ncounter &lt;- 1L\ntarget_len &lt;- 9e6\n\nfor(i in 2:9) {\n  print(i)\n  n &lt;- round(target_len^(1/i)) |&gt; as.integer()\n  len &lt;- n^i\n  cat(\"i = \", i, \"\\n\")\n  cat(\"n = \", n, \"\\n\")\n  cat(\"len = \", len, \"\\n\")\n  x.dims &lt;- rep(c(n, 1L), i - 1)[1:i]\n  y.dims &lt;- rep(c(1L, n), i - 1)[1:i]\n  a.dims &lt;- rt$r_to_py(as.list(x.dims))\n  b.dims &lt;- rt$r_to_py(as.list(y.dims))\n  \n  npa &lt;- np$random$random_sample(a.dims)\n  npb &lt;- np$random$random_sample(b.dims)\n  a &lt;- array(runif(100), x.dims)\n  b &lt;- array(runif(100), y.dims)\n  \n  res &lt;- bench::mark(\n    broadcast = bc.num(a, b, \"+\"),\n    `numpy (NO conversion to R)` = npa + npb,\n    check = FALSE,\n    min_iterations = 100\n  )\n  bc_all &lt;- get_times(res, \"broadcast\")\n  np_all &lt;- get_times(res, \"numpy (NO conversion to R)\")\n  median_bc[counter] &lt;- median(bc_all)\n  median_np[counter] &lt;- median(np_all)\n  q1_bc[counter] &lt;- quantile(bc_all, 0.25)\n  q3_bc[counter] &lt;- quantile(bc_all, 0.75)\n  q1_np[counter] &lt;- quantile(np_all, 0.25)\n  q3_np[counter] &lt;- quantile(np_all, 0.75)\n  \n  counter &lt;- counter + 1L\n}\n\n \n\n\nResults\nUsing {tinyplot}, the median, first quartile, and third quartile of the bench-marked computation times are presented in the following graph:\n\n\n\n\n\n \n\n\nConclusion\nFor arrays with a low number of dimensions, ‘Numpy’ is a bit faster than ‘broadcast’. As the number of dimensions increases, however, ‘broadcast’ beats the speed of ‘Numpy’. Either direction the differences are rather small, however, and one can say in general that ‘broadcast’ and ‘Numpy’ have somewhat similar speeds."
  }
]