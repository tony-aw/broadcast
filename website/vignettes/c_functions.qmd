---
title: "Functions Overview"
format: html
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, eval=TRUE, echo=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(broadcast)
library(kableExtra) |> suppressWarnings()
```


&nbsp;

# Introduction

The 'broadcast' package provides 5 main functionalities:

 - outer-like functions to perform broadcasted outer-computations
 - broadcasted dimensional binding of arrays (and also matrices and data.tables)
 - broadcasted generic pair-wise functions
 - casting/pivoting an array into a new dimension
 - array typecasting with dimensions and names preserved
 
This guide will explain the design choices of the functions provided by the 'broadcast' 'R'-package.


&nbsp;

# Outer-like functions


The 'broadcast' package provides functions that perform Broadcasted outer operations,
similar to base R's `outer()` function.
The outer-like functions are the following:

 - [bc.b()](/man/bc.b.qmd): Broadcasted Boolean operations.
 - [bc.i()](/man/bc.i.qmd) Broadcasted (53bit) Integer Numeric operations.
 - [bc.d()](/man/bc.d.qmd): Broadcasted (64bit) Decimal Numeric operations.
 - [bc.cplx()](/man/bc.cplx.qmd): Broadcasted Complex Numeric operations.
 - [bc.str()](/man/bc.str.qmd): Broadcasted String operations.
 - [bc.list()](/man/bc.list.qmd): Broadcasted operations on Recursive arrays.
 
 

There are several things to note about the above functions.

First, the `outer()` function from base 'R' is only optimized for the "*" operator.  
The outer-like functions provided by 'broadcast', however, come with a very large set of optimised operators, written and compiled in 'C' and 'C++'.

Second, where base 'R' provides a single `outer()` function, 'broadcast' provides several outer-like functions.  
This is done for the following reasons:

 - The outer-like functions provided by 'broadcast' come with a very large set of pre-compiled, optimised operations; fitting all of those operators into a single outer-like function may result in the user losing track of all of the supported operators.
 - Splitting the numeric-ish operations into Boolean, (53bit) Integer, and (64bit) Decimal numbers, allows for only performing typecasting when necessary, and only at the 'C' level to prevent allocating an entirely new vector/array.  
 This allows for far more efficient code.  
 For example: `bc.i(x, y "+")` is significantly faster and more memory efficient than `bc.d(trunc(x), trunc(y), "+")`, as the latter results in producing unnecessary copies of both `x` and `y`.

Finally, much like the `outer()` function from base 'R', the outer-like functions provided by 'broadcast', are pair-wise functions; i.e. they operate on 2 arrays at a time.  
This is intentional, as it is quite difficult to reason about broadcasting when it involves more than a pair of arrays.

&nbsp;

::: {.callout-note}

 [bc.num()](/man/bc.d.qmd) is an alias for [bc.d()](/man/bc.d.qmd).

:::

&nbsp;

For details on the operators supported in each of the outer-like functions, please refer to the relevant sections in the Reference Manual.

  
 
&nbsp;

# Binding implementations

'broadcast' provides 3 functions for dimensional binding:

 - [bind_mat()](/man/bind.qmd): binds vectors and matrices row-wise or column-wise; allows for vector (i.e. linear) recycling. Returns a matrix.
 - [bind_array()](/man/bind.qmd): binds arrays (including matrices) along any arbitrary dimension; allows dimensional broadcasting. Returns an array.
 - [bind_dt()](/man/bind.qmd): binds data.frames and data.tables; allows for matching unmatched columns. Returns a data.table.
 


::: {.callout-note}

The [bind_dt()](/man/bind.qmd) function is only callable if the 'data.table' package is also installed.

:::

&nbsp;


# Acast

The [acast()](/man/acast.qmd) function casts an array into a new dimension.  
Roughly speaking, it is somewhat analogous to `data.table::dcast()`, except that [acast()](/man/acast.qmd) works on arrays (instead of data.tables) and casts into a entirely new dimension (instead of into more columns).

&nbsp;

# Type-casting

'broadcast' offers type-casting functions. Unlike base R's type-casting functions (`as.logical()`, `as.integer()`, etc.), the type-casting functions from 'broadcast' preserve names and dimensions.

&nbsp;

# Naming convention

The naming convention of the outer-like functions is "bc." followed by some abbreviation of the operation type.  
For example, "b" refers to "Boolean operations", "i" to "Integer Numeric operations", and "d" to "Decimal Numeric Operations".

&nbsp;

The naming convention of the binding implementations here is "bind_" followed by the **resulting class** (abbreviated) - i.e. ...

 - [bind_mat()](/man/bind.qmd) **returns** a matrix, but can bind both matrices and vectors.
 - [bind_array()](/man/bind.qmd) **returns** an array, but can bind both arrays and matrices.
 - [bind_dt()](/man/bind.qmd) **returns** a data.table, but can bind not only data.tables, but also most other data.frame-like objects.



&nbsp;
&nbsp;
