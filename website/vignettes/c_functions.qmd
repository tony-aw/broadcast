---
title: "Functions Overview"
format: html
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, eval=TRUE, echo=FALSE}
library(fontawesome) |> suppressWarnings()
```


&nbsp;

# Introduction

The 'broadcast' package provides 5 main functionalities:

 - functions to perform broadcasted element-wise binary operations
 - broadcasted dimensional binding of arrays
 - broadcasted generic pair-wise functions
 - casting/pivoting an array into a new dimension
 - array typecasting with dimensions and names preserved
 
This guide gives a brief overview of the functions provided by the 'broadcast' `r fa("r-project")` - package.


&nbsp;

# Functions for broadcasted element-wise binary operations


The 'broadcast' package provides functions that perform broadcasted element-wise binary operations.
These functions use an API similar to the `outer()` function.

The functions are the following:

 - [bc.b()](/man/bc.b.qmd): Broadcasted Boolean operations.  
 Includes the &, |, xor, nand, ==, !=, <, >, <=, >= operations.
 - [bc.i()](/man/bc.i.qmd) Broadcasted (53bit) Integer Numeric operations.  
 Includes relational operations, basic arithmetic, and the GCD (greatest common divisor) operation.
 - [bc.d()](/man/bc.d.qmd): Broadcasted (64bit) Decimal Numeric operations.  
 Includes relational operations, relational operations with Machine precision specification, and arithmetic operations.
 - [bc.cplx()](/man/bc.cplx.qmd): Broadcasted Complex Numeric operations.  
 Includes (in)equality operations, and basic arithmetic operations.
 - [bc.str()](/man/bc.str.qmd): Broadcasted String operations.  
 Includes operations for (in)equality, concatenation, and string distance (Levenshtein) calculation.
 - [bc.list()](/man/bc.list.qmd): Broadcasted operations on Recursive arrays.  
 

These are all pair-wise functions; i.e. they operate on 2 arrays at a time.  
This is intentional, as it is quite difficult to reason about broadcasting when it involves more than a pair of arrays.

&nbsp;

::: {.callout-note}

 - [bc.num()](/man/bc.d.qmd) is an alias for [bc.d()](/man/bc.d.qmd)
 - `bc.i(x, y "+")` is faster and more memory efficient than `bc.num(trunc(x), trunc(y), "+")`, as the latter results in producing unnecessary copies of both `x` and `y`.
 
:::


  
 
&nbsp;

# Binding arrays

'broadcast' provides the [bind_array()](/man/bind_array.qmd) function. This binds arrays (including matrices) along any arbitrary dimension. It allows for dimensional broadcasting, and returns an array.


&nbsp;


## Why another array binding function

There is already a famous, battle-tested function for binding arrays, namely the `abind()` function from the fantastic `r fa("r-project")` package of the same name. So why does 'broadcast' provide another array binding function?

Well, as great as `abind::abind()` is, there are some issues with it, and the [bind_array()](/man/bind_array.qmd) function from 'broadcast` attempts (and in my humble opinion succeeds) to provide a better alternative:

 - `abind()` is a bit slow. [bind_array()](/man/bind_array.qmd) is significantly faster.
 - `abind()` does not support broadcasting. [bind_array()](/man/bind_array.qmd) does support broadcasting.
 - `abind()` does not support recursive arrays (i.e. arrays of type `list`). When binding recursive arrays, `abind()` will attempt to unlist it, even when it does not make sense, ruining the structure of the array. [bind_array()](/man/bind_array.qmd) fully supports recursive arrays, as well as arrays of all atomic types.
 - `abind()` has somewhat confusing mechanisms for giving dimension names to the output. [bind_array()](/man/bind_array.qmd) has more streamlined naming arguments.


[bind_array()](/man/bind_array.qmd) uses a similar API to that of `abind::abind()`, and provides similar features like binding arrays before the first dimension (using `along = 0`) or after the last dimension.

&nbsp;

# Generic Broadcasted functions

'broadcast' provides [bcapply()](/man/bcapply.qmd), which is a broadcasted apply-like function, and [bc_ifelse()](/man/bc_ifelse.qmd), which is a broadcasted version of `ifelse()`.

&nsbp;

# Acast

The [acast()](/man/acast.qmd) function casts an array into a new dimension.  
Roughly speaking, it is somewhat analogous to `data.table::dcast()`, except that [acast()](/man/acast.qmd) works on arrays (instead of data.tables) and casts into a entirely new dimension (instead of into more columns).

&nbsp;

# Type-casting

'broadcast' offers type-casting functions. Unlike base R's type-casting functions (`as.logical()`, `as.integer()`, etc.), the type-casting functions from 'broadcast' preserve names and dimensions.

&nbsp;

# Supported Structures

The functions in the 'broadcast' package only support S3 structures. S4 structures, Reference Classes, and so on are not supported.


&nbsp;
