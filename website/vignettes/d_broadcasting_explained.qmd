---
title: "Broadcasting Explained"
format:
  html:
    number-sections: true
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup, eval=TRUE, echo=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(broadcast)
library(fontawesome) |> suppressWarnings()
library(tinytable) |> suppressWarnings()
```


&nbsp;

# Introduction

In the context of operations involving 2 (or more) arrays, "broadcasting" refers to recycling array dimensions **without** allocating additional memory or making needles copies. This is considerably **faster** and **more memory-efficient** than R's regular dimensions repetition (and similar) mechanisms.

This article explains the concept of "broadcasting" in more detail.
A good understanding of atomic and recursive arrays in base `r fa("r-project")` is somewhat essential to follow this article.

&nbsp;

# What is broadcasting and why is it needed?

## Example case

Let's start with a simple example.  
Consider the matrices `x` and `y`:

```{r}
x <- array(1:20, c(4, 5))
y <- array(1:5*10, c(1, 5))
print(x)
print(y)
```

Suppose one wishes to compute the element-wise addition of these 2 arrays.  

This won't work in base `r fa("r-project")`:

```{r eval=FALSE, echo=TRUE}
x + y
Error in x + y : non-conformable arrays
```


When computing the element-wise sum of these arrays, one or both of them need to be recycled so that they are equal size, in order to compute the element-wise computation.

In this case, matrix `y` needs its single row to be recycled 4 times, making   `y` the same size as `x`, and thus conformable.  

`r fa("r-project")` provides linear **vector** recycling, but not recycling of array dimensions. Instead, in base `r fa("r-project")` we need to **replicate** (and thus **copy**) the array dimensions. This can be done manually, like so:

```{r}
x + y[rep(1L, 4L),]
```


&nbsp;

## What is the problem?

There are several problems.

First and foremost, when the arrays become larger, the replicated arrays become larger, and if the arrays become too large, you may require more memory than is available in your current system, resulting in a message like the following:

```{r eval=FALSE, echo=TRUE}
> Error: cannot allocate vector of size
```


The problem isn't limited to available memory. As the required memory to allocate increase, the speed decreases. And let's not forget that computational inefficiency in general is also bad for the environment.

Additionally, a solution like `x + y[rep(1L, 4L),]` is not easily scalable for other arrays when the dimensions are  not known a-priori.

&nbsp;

## Introducing Broadcasting

In an operation like `x + y[rep(1L, 4L),]`, `y` is replicated to become the same size. The thing is, physical replication - and thus copying - of the dimensions of an array should not be necessary; arrays only need to be recycled virtually.  

Virtual recycling does not actually physically replicate arrays. Instead, nested loops in 'C' and 'C++' are used to simulate a recycled array.  
This is similar to how `r fa("r-project")` recycles regular (i.e. dimensionless) vectors.  
Virtual recycling requires no additional memory (apart from allocating the final end result); it is much faster and much more memory efficient than replicating dimensions.

And **that** is what broadcasting does: broadcasting provides **fast** virtual recycling of array dimensions in the context of element-wise operations involving 2 (or more) arrays **without** allocating additional memory.

In the earlier example, we used:

```{r}
x + y[rep(1L, 4L),]
```

To compute the element-wise addition using broadcasting through the 'broadcast' package, we can do the following:

```{r}
library(broadcast)

bc.num(x, y, "+")

```

The result is the same (as it should). But as the size of the resulting array increases, the broadcasted functions become more and more efficient in terms of both speed and memory, in comparison with base `r fa("r-project")` approaches.  

Technically, one can also use `t(t(x) + drop(y))`, but that has a similar problem: one needs to perform transposition twice, which makes unnecessary copies, is slow, and is - again - not scalable to arrays where the dimensions are not known a-priori.

Benchmarks can be found on the website.

&nbsp;

# Illustrating Broadcasting

## Retracing the first example

In the previous example the following arrays were used:

```{r}
x <- array(1:20, c(4, 5))
y <- array(1:5*10, c(1, 5))
```

Let's see what happens if we sum them together using broadcasting:

```{r}
bc.num(x, y, "+")
```

What happens here is that `x` remains the same, but row vector `y` is **virtually** recycled 4 times, but without requiring 4 times more memory. This is also illustrated here:

```{r eval=TRUE, echo=FALSE}


foo <- rbind(
  sprintf("x[%d, %d] + y[1, %d]", 1, 1:5, 1:5),
  sprintf("x[%d, %d] + y[1, %d]", 2, 1:5, 1:5),
  sprintf("x[%d, %d] + y[1, %d]", 3, 1:5, 1:5),
  sprintf("x[%d, %d] + y[1, %d]", 4, 1:5, 1:5)
)

foo <- as.data.frame(foo)
colnames(foo) <- NULL
tt(foo, theme = "grid") |> style_tt(line = "tlbr")


```

&nbsp;

## Perpendicular vectors

Let's now consider another scenario.
We not take again 2 matrices `x` and `y`, but `x` is a column vector (i.e. a matrix with 1 column and multiple rows), and `y` is a row vector (i.e. a matrix with 1 row and multiple columns):


```{r}
x <- array(1:5, c(5, 1))
y <- array(1:5 * 10, c(1, 5))
print(x)
print(y)
```


Computing the broadcasted element-wise sum of `x` and `y` produces the following:

```{r}
bc.num(x, y, "+")
```


So what exactly does broadcasting compute here?

The following table illustrates what broadcasting does, conceptually:

```{r eval=TRUE, echo=FALSE}


foo <- cbind(
  sprintf("x[%d, 1] + y[1, %d]", 1:5, 1),
  sprintf("x[%d, 1] + y[1, %d]", 1:5, 2),
  sprintf("x[%d, 1] + y[1, %d]", 1:5, 3),
  sprintf("x[%d, 1] + y[1, %d]", 1:5, 4),
  sprintf("x[%d, 1] + y[1, %d]", 1:5, 5)
)
foo <- as.data.frame(foo)
colnames(foo) <- NULL
tt(foo, theme = "grid") |> style_tt(line = "tlbr")


```

&nbsp;


# Broadcasting limitations and rules

The examples shown so far used matrices. But 'broadcast' is not restricted to only handling matrices; this package can handle any array, provided it does not have more than 16 dimensions.
Moreover, any number of dimensions (provided <= 16) can be broadcasted simultaneously.

The examples show so far only used addition. But 'broadcast' supports a wide variety of binary operations, inlcuding relational-, arithmetic-, Boolean-, and string operations.


&nbsp;

## Conformability

Broadcasted operations only work when 2 arrays are conformable for broadcasting.  

Consider again 2 arrays `x` and `y`, and their dimensions given by `dim(x)` and `dim(y)`, respectively.  
'broadcast' goes through `dim(x)` and `dim(y)`, from left (i.e. first dimension / rows) to right (i.e. the last dimension), and checks for each axis `i` if **at least one** of the following conditions is TRUE:

 - `dim(x)[i]` and `dim(y)[i]` are equal;
 - either `dim(x)[i]` or `dim(y)[i]` is `1`;
 - either `dim(x)[i]` or `dim(y)[i]` is non-existing.
 
if at least one of the above conditions is true for each and every one of the dimensions of `x` and `y`, the 2 arrays are compatible for broadcasted operations. If not, they are not compatible, and attempting to perform a broadcasted operations results in an error.


To illustrate, let's check 2 arrays to see if they are compatible:

```{r echo = TRUE, eval = TRUE}
x <- array(rnorm(10), c(10, 1, 9, 6))
y <- array(rnorm(10), c(10, 5, 1))
```


```{r echo=FALSE, eval=TRUE}
dimx <- dim(x)
dimy <- dim(y)
foo <- data.frame(
  `dim(x)` = dimx,
  `dim(y)` = c(dimy, NA),
  compatible = rep(TRUE, 4),
  reason = c("equal", "either is 1", "either is 1", "either is missing"),
  check.names = FALSE
)

tt(foo)

```

As shown in the data.frame above, all dimensions of `x` and `y` are compatible.  
Therefore, broadcasted binary operations involving `x` and `y` can be performed.

&nbsp;

Now let's look at another 2 arrays, and see if they are compatible:


```{r echo = TRUE, eval=TRUE}
x <- array(rnorm(10), c(10, 1, 9, 6))
y <- array(rnorm(10), c(10, 5, 2))
```


```{r echo=FALSE, eval=TRUE}
dimx <- dim(x)
dimy <- dim(y)
foo <- data.frame(
  `dim(x)` = dimx,
  `dim(y)` = c(dimy, NA),
  compatible = c(TRUE, TRUE, FALSE, TRUE),
  reason = c("equal", "either is 1", "not equal & neither is 1/missing", "either is missing"),
  check.names = FALSE
)

tt(foo)

```

One of the dimensions, namely the third dimension, is not compatible. Therefore, these 2 arrays are **not** conformable for broadcasted operations.

&nbsp;

## Which dimensions are broadcasted

In the context of an operation involving exactly 2 arrays, this sub-section explains which dimensions of which array is broadcasted, and which dimension of which array is left as-is.  
There are 3 scenarios relevant for this explanation.

&nbsp;

**Scenario 1:**  
For some dimension `i`, `dim(x)[i]` and `dim(y)[i]` are equal.  
In this scenario, no broadcasting needs to occur on that dimension for either array.

&nbsp;


**Scenario 2:**  
For some dimension `i`, suppose `dim(x)[i] == 1` and `dim(y)[i] > 1`.  
Then dimension `dim(x)[i]` is **broadcasted** to size `dim(y)[i]`.  
Similarly, if `dim(x)[i] > 1` and `dim(y)[i] == 1`, dimension `dim(y)[i]` is **broadcasted** to size `dim(x)[i]`.

&nbsp;


**Scenario 3:**  
Finally, suppose for some dimension `i`, `dim(x)[i] > 1`, and `dim(y)[i]` is non-existing.  
I.e., `x` has more dimensions than `y`.  
In this case, the missing dimension in `y` is replaced with a dimensions of size `1`, and scenario 2 is used.  
Similarly, if `dim(y)[i] > 1` and `dim(x)[i]` is non-existing, the missing dimension in `x` is replaced with a dimension of size `1` and we get back to scenario 2.  

It does not matter how much difference there is between the number of dimensions of `x` and the number of dimensions of `y`: any number of missing dimensions will be replaced with `1`, as long as the total number of dimensions for each array does not exceed `16`.

&nbsp;

**Illustration**

To illustrate, let's check 2 conformable arrays, and see which dimension of which array is broadcasted by how much

```{r echo = TRUE, eval = TRUE}
x <- array(rnorm(10), c(10, 1, 1, 9, 6))
y <- array(rnorm(10), c(10, 1, 5, 1))
```


```{r echo=FALSE, eval=TRUE}
dimx <- dim(x)
dimy <- dim(y)
foo <- data.frame(
  i = 1:length(dimx),
  `dim(x)` = dimx,
  `dim(y)` = c(dimy, NA),
  broadcasted = c("neither", "neither", "x", "y", "y"),
  reason = c(
    "dims equal", "dims equal",
    "dim(x)[i] == 1", "dim(y)[i] == 1",
    "dim(y)[i] is missing"
  ),
  note = c(
    rep("", 2),
    "dim(x)[i] recycled to size 5",
    "dim(y)[i] recycled to size 9",
    "dim(y) extended with a 1; dim(y)[i] recycled to size 6"
  ),
  check.names = FALSE
)

tt(foo)

```


&nbsp;

# Orthogonal Arrays

In the documentation of 'broadcast', the reader may come across the term "orthogonal arrays" here and there.  
"orthogonal" is a term that can mean a great many things; this section therefore explains what "orthogonal" means in the context of broadcasting.

Consider a column-vector `x` and row-vector `y`:

```{r}
x <- array(1:5, c(5, 1))
y <- array(1:5*10, c(1, 5))
print(x)
print(y)
```

These vectors are (in a very literal sense) perpendicular to each other, and thus in that sense orthogonal to each other.  
This type of orthogonality can be extended to arrays as follows.  
For the purposes of broadcasting, any pair of arrays, `x` and `y`, can be referred to as being "orthogonal" if **all** of the following holds for that pair of arrays:  

 - For **every** dimension index `i`, `dim(x)[i] != dim(y)[i]`
 - For **every** dimensions index `i`,`dim(x)[i]` is `1` or missing, **OR** `dim(y)[i]` is `1` or missing.


For example, the following 2 arrays are orthogonal:

```{r echo=TRUE, eval=FALSE}
x <- array(1:10, c(10, 1, 8, 1, 10))
y <- array(1:10, c(1, 9, 1, 9, 1, 11))

```

And the following 2 arrays are not orthogonal:


```{r echo=TRUE, eval=FALSE}
x <- array(1:10, c(10, 1, 8, 1, 10))
y <- array(1:10, c(10, 9, 1, 9, 10))

```


&nbsp;


# Broadcasting vs outer

The base `r fa("r-project")` `outer()` function performs outer computations on vectors and arrays.

Earlier in this guide, we used the following computation:

```{r}
x <- array(1:5, c(5, 1))
y <- array(1:5*10, c(1, 5))

bc.num(x, y, "+")

```


This is equivalent to using the `outer()` function as follows:

```{r}
outer(as.vector(x), as.vector(y), "+")
```


As you can see, broadcasting 2 orthogonal vectors is equivalent to using `outer()` on 2 dimensionless vectors.

The `outer()` approach has the same problems as the `x[, rep(1L, 5L)] + y[rep(1L, 5L),]` approach: it consumes a lot of unnecessary memory, and is slow.

Broadcasting can thus be used as a more efficient alternative to `outer()` in case of vector inputs, simply by making the inputs orthogonal. But please don't confuse outer computations with broadcasting: broadcasting is efficient array recycling for element-wise computations.

&nbsp;
