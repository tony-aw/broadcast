x <- array(rnorm(10), c(10, 1, 9, 6))
y <- arrAy(rnorm(10), c(10, 5, 2))
dimx <- dim(x)
dimy <- dim(y)
data.frame(
`dim(x)` = dimx,
`dim(y)` = c(dimy, NA),
compatible = c(TRUE, TRUE, FALSE, TRUE),
reason = c("equal", "either is 1", "not equal & neither is 1/missing", "either is missing"),
check.names = FALSE
)
x <- array(rnorm(10), c(10, 1, 9, 6))
y <- array(rnorm(10), c(10, 5, 1))
dimx <- dim(x)
dimy <- dim(y)
data.frame(
`dim(x)` = dimx,
`dim(y)` = c(dimy, NA),
compatible = rep(TRUE, 4),
reason = c("equal", "either is 1", "either is 1", "either is missing"),
check.names = FALSE
)
dimx <- dim(x)
dimy <- dim(y)
data.frame(
`dim(x)` = dimx,
`dim(y)` = c(dimy, NA),
compatible = c(TRUE, TRUE, FALSE, TRUE),
reason = c("equal", "either is 1", "not equal & neither is 1/missing", "either is missing"),
check.names = FALSE
)
15/12
1.25*30
install.packages("altdoc")
# Preview documentation ====
library(broadcast)
?bc.d
?install.packages("pkgdown")
library(altdoc)
sessionInfo()
library(quarto)
sessionInfo()
library(broadcast)
library(broadcast)
?bc.i
?help
?
help()
help("bc.i", help_type = "text")
help("bc.i", help_type = "pdf")
help("bc.i", help_type = "html")
utils:::index.search("bc.i", find.package())
utils:::index.search("bind_array", find.package())
# map functions to Rds ====
utils:::index.search("bind_array", "broadcast")
# map functions to Rds ====
utils:::index.search("bind_array", find.package())
ifelse(TRUE, 1:10, letters)
?ifelse
ifelse(TRUE, 1:10, letters)
ifelse(NA, 1:10, letters)
ifelse(NULL, 1:10, letters)
# speed tests
library(broadcast)
code <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_bc_dbl_orthogonal_test)]]
SEXP rcpp_bc_dbl_orthogonal_test(
SEXP x, SEXP y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
const double *px = REAL_RO(x);
const double *py = REAL_RO(y);
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
R_xlen_t counter = 0;
const int *pout_dim = INTEGER_RO(out_dim);
R_xlen_t flatind_x;
R_xlen_t flatind_y;
R_xlen_t y2, y4, x3;
for(int iter4 = 0; iter4 < pout_dim[3]; ++iter4) {
y4 = iter4 * pdcp_y[3];
for(int iter3 = 0; iter3 < pout_dim[2]; ++iter3) {
x3 = iter3 * pdcp_y[2];
for(int iter2 = 0; iter2 < pout_dim[1]; ++iter2) {
y2 = iter2 * pdcp_y[1];
for(int iter1 = 0; iter1 < pout_dim[0]; ++iter1) {
flatind_x = iter1 + x3;
flatind_y = y2 + y4;
tempout = (double)px[flatind_x] + (double)py[flatind_y];
pout[counter] = tempout;
counter++;
}
}
}
}
UNPROTECT(1);
return out;
}
"
Rcpp::sourceCpp(code = code)
n <- 75L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n, 1L)
npb <- np$random$rand(1L, n, 1L, n)
npa + npb
a.dim <- rep(c(n, 1L), 2)
b.dim <- rep(c(1L, n), 2)
a <- array(rnorm(100), a.dim)
b <- array(rnorm(100), b.dim)
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
foo <- bench::mark(
bc = bc.num(a, b, "+"), # bc is massively better,
bc_internal = broadcast:::.rcpp_bc_dec_d(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len, 1L),
test = rcpp_bc_dbl_orthogonal_test(a, b, dcp_a, dcp_b, out.dim, out.len),
# `numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
library(broadcast)
library(tinytest)
bc_ifelse(letters, LETTERS, letters)
bc_ifelse(c(TRUE, FALSE, TRUE, FALSE), letters[1:4], 1:4)
expect_error(
bc_ifelse(c(TRUE, FALSE, TRUE, FALSE), letters[1:4], 1:4),
pattern = "`yes` and `no` must be of the same type"
)
??cast
for(i in 1:(2^32)) i^2
for(i in 1:(2^16)) i+1
for(i in 1:(2^16)) i+1
for(i in 1:(2^16)) i-1
i
for(i in 1:(2^16)) i+1
i
for(i in 1:(2^16)) print(i)
2^16
6000^3
6000^3/1000
x <- rpois(10, 2)
x
tabulate(x)
table(x)
tabulate(as.factor(x))
table(as.factor(x))
levels(as.factor(x))
library(stringi)
# MACRO ====
all_N_decl <- sprintf("const int N%d = INTEGER(lens)[%d];\t\\", 1:16, 0:15)
all_ind_decl <- sprintf("const SEXP ind%d = VECTOR_ELT(subs, %d);\t\\", 1:16, 0:15)
all_ind_pointer <- sprintf("const int *pind%d = INTEGER_RO(ind%d);\t\\", 1:16, 1:16)
all_for <- c(
sprintf("\t for(int iter%d = 0; iter%d < N%d; ++iter%d) {\t\\", 1:16, 1:16, 1:16, 1:16)
)
forout <- sprintf("i_out%d = (pstarts[%d] + iter%d) * pdcp_out[%d];\t\\", 1:16, 0:15, 1:16, 0:15)
fory <- sprintf("i_y%d = (pind%d[iter%d] - 1) * pdcp_y[%d];\t\\", 1:16, 1:16, 1:16, 0:15)
all_for <- stri_c(all_for, forout, fory, sep = "\n")
cat(all_for[1])
cat(all_for[16])
all_parts_out <-  sprintf("i_out%d", 1:16)
all_parts_y <-  sprintf("i_y%d", 1:16)
all_out_decl <- sprintf("i_out%d", 1:16)
all_y_decl <- sprintf("i_y%d", 1:16)
temp <- "
#define MACRO_DIM_ACAST(DOCODE) do {              \\
if(Rf_length(subs) != 16) {                     \\
stop(\"subs not of length 16\");              \\
}                                               \\
if(Rf_length(starts) != 16) {                   \\
stop(\"starts not of length 16\");            \\
}                                               \\
if(Rf_length(lens) != 16) {                     \\
stop(\"lens not of length 16\");              \\
}                                               \\
if(Rf_length(dcp_y) != 16) {                    \\
stop(\"dcp_y not of length 16\");             \\
}                                               \\
if(Rf_length(dcp_out) != 16) {                  \\
stop(\"dcp_out not of length 16\");           \\
}                                               \\
\\
const double *pdcp_out = REAL_RO(dcp_out);      \\
const double *pdcp_y = REAL_RO(dcp_y);          \\
\\
const int *pstarts = INTEGER_RO(starts);        \\
\\
\\
<all_N_decl>
\\
<all_ind_decl>
\\
<all_ind_pointer>
\\
R_xlen_t flatind_out;       \\
R_xlen_t flatind_y;       \\
R_xlen_t <all_out_decl>; \\
R_xlen_t <all_y_decl>; \\
<startfor>
flatind_out = <main_out>;       \\
flatind_y = <main_y>;     \\
\\
DOCODE;                                                          \\
\\
flatind_out++;                      \\
<endfor>
} while(0)
"
i <- 16L
current_N_decl <- stri_c(all_N_decl[1:i], collapse = "\n")
current_ind_decl <- stri_c(all_ind_decl[1:i], collapse = "\n")
current_ind_pointer <- stri_c(all_ind_pointer[1:i], collapse = "\n")
current_out_decl <- stri_c(all_out_decl[1:(i)], collapse = ", ")
current_y_decl <- stri_c(all_y_decl[1:(i)], collapse = ", ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main_out <- stri_c(all_parts_out[1:i], collapse = " + ")
current_main_y <- stri_c(all_parts_y[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<all_N_decl>",
"<all_ind_decl>",
"<all_ind_pointer>",
"<all_out_decl>",
"<all_y_decl>",
"<startfor>",
"<main_out>",
"<main_y>",
"<endfor>"
)
current_replacement <- c(
i,
current_N_decl,
current_ind_decl,
current_ind_pointer,
current_out_decl,
current_y_decl,
current_for,
current_main_out,
current_main_y,
current_end
)
out <- stri_replace_all(
temp,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
macro_dim_acast <- out
cat(macro_dim_acast)
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
main <- "
// [[Rcpp::export(rcpp_acast)]]
void rcpp_acast(
SEXP out, SEXP y, const SEXP starts, const SEXP lens, const SEXP subs,
const SEXP dcp_out, const SEXP dcp_y
) {
double *py = REAL(y);
double *pout = REAL(out);
MACRO_DIM_ACAST(pout[flatind_out] = py[flatind_y]);
}
"
code <- stri_c(header, "\n", macro_dim_acast, "\n", main)
cat(code)
Rcpp::sourceCpp(code = code)
library(broadcast)
testfun <- function(x, margin, grp) {
lvls <- levels(grp)
grp <- unclass(grp)
# get x & grp properties:
x.dim <- dim(x)
x.ndim <- ndim(x)
x.dimchunk <- c(x.dim, rep(1L, 16L - x.ndim))
grp_n <- length(unique(grp))
grp_mode <- max(tabulate(grp))
newdim <- x.ndim + 1L
# create output:
out.dim <- c(dim(x), grp_n)
out.dim[margin] <- grp_mode
out.ndim <- ndim(out)
out.dimchunk <- c(out.dim, rep(1L, 16L - out.ndim))
out <- array(NA_real_, out.dim)
# pre params:
subs <- lapply(1:16L, \(i)1:x.dimchunk[i])
starts <- rep(0L, 16L)
lens <- lengths(subs)
dcp_out <- cumprod(c(1, out.dimchunk))[1:16]
dcp_x <- cumprod(c(1, x.dimchunk))[1:16]
# loop:
for(i in 1:grp_n) {
subs[[margin]] <- which(grp == i)
lens[[margin]] <- sum(grp == i)
rcpp_acast(out, x, starts, lens, subs, dcp_out, dcp_x)
starts[newdim] <- starts[newdim] + grp_mode
}
return(out)
}
# after last ====
# expectation: group 1 is spread OVER rows, WITHIN layer 1
out <- array(NA_real_, c(3,3,3, rep(1L, 13L)))
x <- cbind(id = rep(1:3, each = 2), grp = rep(1:2, 3), val = rnorm(6))
grp <- as.factor(x[, 2])
testfun(out, 1L, grp)
# speed tests
library(broadcast)
library(tinytest)
tempfun <- function(x, grp) {
margin <- 1L
maxfreq <- max(tabulate(unclass(grp)))
out.dim <- c(dim(x), length(unique(grp)))
out.dim[margin] <- maxfreq
out <- array(NA_real_, out.dim)
for(k in 1:nlevels(grp)) {
extract <- x[grp == levels(grp)[k],, drop=FALSE]
out[1:nrow(extract), 1:ncol(extract), k] <- extract
}
return(out)
}
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(ceiling(x[, 2]/2))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L))
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
n <- 2500
m <- 500
x <- matrix(1:m, n, n)
grp <- as.factor(sample(1:(m-1L), n, TRUE))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp, TRUE)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp, TRUE),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
pryr::show_c_source(.Primitive("%%"))
4.94065645841247E-324
4.94065645841247E-324 * 10
4.94065645841247E-324 * 10^324
4.94065645841247E-324 * 10^32
4.94065645841247E-324 * 10^320
4.94065645841247E-324 * 10^50
4.94065645841247E-324 * 10^60
4.94065645841247E-324 * 10^100
4.94065645841247E-324 * 10^200
4.94065645841247E-324 * 10^250
4.94065645841247E-324 * 10^300
4.94065645841247E-324 * 10^324
4.94065645841247E-324 * 10^323
4.94065645841247E-324 * 10^320
4.94065645841247E-324 * 10^310
4.94065645841247E-324 * 10^300
4.94065645841247E-324 * 10^310
4.94065645841247E-324 * 10^305
4.94065645841247E-324 * 10^306
4.94065645841247E-324 * 10^309
4.94065645841247E-324 * 10^308
4.94065645841247E-324 * 10^308 + 4*10^16
4.94065645841247E-324 * 10^308 + 4*10^15
4.94065645841247E-324 * 10^308
4.94065645841247E-324 * 10^309
4.94065645841247E-324 * 10^308 +10
4.94065645841247E-324 * 10^308 +1
2^53
1/(2^53)
1/(2^53) < 4.9e-324
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
# set-up ====
library(stringi)
source("siteutils.R")
################################################################################
# Create man pages ====
#
## pre-process Rds for linking ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("man", pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("man", i)
outpath <- file.path("preprocess", "man")
rd_links(filepath, outpath, funs)
}
## convert Rd to qmd ====
lst.files <- list.files(file.path("preprocess", "man"), pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("preprocess", "man", i)
temp_html <- stri_replace_last(i, ".html", fixed = ".Rd")
temp_html <- file.path("preprocess", "man", temp_html)
outpath <- file.path("website", "man")
rd2qmd(filepath, temp_html, outpath, pkgpath)
}
## adapt man titles ====
detection <- "---\ntitle:"
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
print(i)
filename <- i
title <- stri_replace_last(filename, "", fixed = ".qmd")
temp <- readLines(file.path("website", "man", filename))
check <- stringi::stri_detect(paste0(temp[1:2], collapse = "\n"), fixed = detection)
if(!check && !stri_detect(title, fixed = "aaa")) {
temp <- c("---", paste0("title: ", title), "---", temp)
writeLines(temp, file.path("website", "man", filename))
}
}
## unpack links in man pages ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "man", i)
outpath <- file.path("website", "man")
qmd_extractlinks(filepath, outpath, funs)
}
################################################################################
# Create Vignettes, Index page, and GitHub Readme ====
#
# copy & render intro template ====
from <- "intro_template.qmd"
to <- file.path("website", "vignettes", "a_readme.qmd")
file.copy(from, to, overwrite = TRUE)
to <- "README.qmd"
file.copy(from, to, overwrite = TRUE)
gfm <- readLines("README.qmd")
gfm <- stri_replace_all(
gfm,
"'R'",
fixed = '`r fa("r-project")`'
)
writeLines(gfm, to)
quarto::quarto_render(to, "gfm", "README.md")
# create links in vignettes ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files(file.path("website", "vignettes"), pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "vignettes", i)
temp <- readLines(filepath)
p <- paste0("`", funs, "()`")
rp <- paste0("[", funs, "()]", "(/man/", rd_index(funs), ".qmd)")
temp <- stri_replace_all(
temp, rp, fixed = p, vectorize_all = FALSE
)
writeLines(temp, file.path("website", "vignettes", i))
}
# copy readme vignette to index page ====
from <- file.path("website", "vignettes", "a_readme.qmd")
to <- file.path("website", "index.qmd")
file.copy(from, to, overwrite = TRUE)
# end of rd2qmd ====
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
library(quarto)
library(stringi)
quarto_render()
quarto_render()
# wait until render is done!
quarto_preview()
tools::package_dependencies("ggplot2", recursive = TRUE)
