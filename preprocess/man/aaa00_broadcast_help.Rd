% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aaa00_broadcast_help.R
\name{aaa00_broadcast_help}
\alias{aaa00_broadcast_help}
\alias{broadcast-package}
\alias{broadcast}
\alias{broadcast_help}
\title{broadcast: Simple Broadcasted Operations for Atomic and Recursive Arrays with Minimal Dependencies}
\description{
broadcast: \cr
Simple Broadcasted Binding and Binary Operations for Atomic and Recursive Arrays with Minimal Dependencies. \cr \cr
Implements simple broadcasted operations for atomic and recursive arrays.

Besides linking to 'Rcpp', 'broadcast' does not depend on, vendor, link to, include, or otherwise use any external libraries;
'broadcast' was essentially made from scratch and can be installed out-of-the-box.

The implementations available in 'broadcast' include, but are not limited to, the following:
\enumerate{
\item A faster, more memory efficient, and broadcasted version of \code{abind()}, for binding arrays along an arbitrary dimension;
\item A set of type-specific functions for broadcasted element-wise binary operations;
they support a large set of relational-, arithmetic-, Boolean-, and string operations.
\item A Broadcasted implementation of \code{ifelse()};
\item A Broadcasted apply-like function;
\item The \code{acast()} function, for casting/pivoting an array into a new dimension.
}

The functions in the 'broadcast' package strive to minimize computation time and memory usage (which is not just good for efficient computing, but also for the environment).
}
\section{Getting Started}{

An introduction and overview of the package can be found on the website. \cr
Note that 'broadcast' is still somewhat experimental;
if you find bugs or other issues, please report them promptly on the 'broadcast' GitHub page. \cr
\cr
}

\section{Functions}{


\bold{Functions for broadcasted element-wise binary operations} \cr
'broadcast' provides a set of functions for broadcasted element-wise binary operations
with broadcasting. \cr
These functions use an API similar to the \link[base]{outer} function. \cr
\cr
The following functions for type-specific binary operations are available:
\itemize{
\item \code{[bc.b](bc.b.qmd)}: Boolean operations;
\item \code{[bc.i](bc.i.qmd)}: integer (53bit) arithmetic and relational operations;
\item \code{[bc.d](bc.d.qmd)}: decimal (64bit) arithmetic and relational operations;
\item \code{[bc.cplx](bc.cplx.qmd)}: complex arithmetic and (in)equality operations;
\item \code{[bc.str](bc.str.qmd)}: string (in)equality, concatenation, and distance operations;
\item \code{[bc.list](bc.list.qmd)}: apply any 'R' function to 2 recursive arrays with broadcasting. \cr \cr
}

\bold{Binding Implementations} \cr
'broadcast' provides the \code{[bind_array](bind_array.qmd)} function,
to bind arrays along an arbitrary dimension,
with support for broadcasting. \cr
\cr

\bold{General functions} \cr
'broadcast' also comes with 2 general broadcasted functions:
\itemize{
\item \code{[bc_ifelse](bc_ifelse.qmd)}: Broadcasted version of \link[base]{ifelse}.
\item \code{[bcapply](bcapply.qmd)}: Broadcasted apply-like function. \cr \cr
}

\bold{Other functions} \cr
'broadcast' also provides
\code{[type-casting](typecast.qmd)} functions,
which preserve names and dimensions - convenient for arrays. \cr \cr
}

\author{
\strong{Author, Maintainer}: Tony Wilkes \email{tony_a_wilkes@outlook.com} (\href{https://orcid.org/0000-0001-9498-8379}{ORCID})
}
