);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION1(                                           \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_careful <- "
#define MACRO_TYPESWITCH_DECIMAL_CAREFUL(DIMCODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_simple <- "
#define MACRO_TYPESWITCH_DECIMAL_SIMPLE(DIMCODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_special <- "
#define MACRO_TYPESWITCH_DECIMAL_SPECIAL(DIMCODE, RULECHECK, RULECODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION3(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_rel <- "
#define MACRO_TYPESWITCH_DECIMAL_REL(DIMCODE, NACODE1, DOCODE1, NACODE2, DOCODE2) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                \\
const int *py = INTEGER_RO(y);                                \\
DIMCODE(                                                      \\
MACRO_DOUBLEPASS(                                           \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(xint && !yint) {                                      \\
const int *px = INTEGER_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && yint) {                                      \\
const double *px = REAL_RO(x);                              \\
const int *py = INTEGER_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && !yint) {                                     \\
const double *px = REAL_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                       \\
}                                                         \\
} while(0)
"
################################################################################
# Integer ====
#
macro_typeswitch_integer1 <- "
#define MACRO_TYPESWITCH_INTEGER1(DIMCODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
double e1;                                                \\
double e2;                                                \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                                     \\
trunc(px[flatind_x]),                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
trunc(px[flatind_x]),                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_integer2 <- "
#define MACRO_TYPESWITCH_INTEGER2(DIMCODE, RULECHECK, RULECODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
double e1;                                                \\
double e2;                                                \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
trunc(px[flatind_x]),                                   \\
(double)py[flatind_y],                                   \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
trunc(px[flatind_x]),                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
################################################################################
# Save ====
#
macro_typeswitch_numeric <- stri_c(
macro_typeswitch_decimal_common,
"\n",
macro_typeswitch_decimal_careful,
"\n",
macro_typeswitch_decimal_simple,
"\n",
macro_typeswitch_decimal_special,
"\n",
macro_typeswitch_decimal_rel,
"\n",
macro_typeswitch_integer1,
"\n",
macro_typeswitch_integer2,
"\n"
)
readr::write_file(macro_typeswitch_numeric, "macro_typeswitch_numeric.txt")
# set-up ====
library(stringi)
# dMacro_skeletons <- qs::qread("dMacro_skeletons")
# macros <- stri_c(dMacro_skeletons, collapse = "\n")
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header <- stri_c("
#ifndef BROADCAST_H
#define BROADCAST_H
",
macro_action,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"\n",
macro_dim,
"
#endif
"
)
cat(header)
Rcpp::sourceCpp(code = header)
readr::write_file(header, "inst/include/broadcast.h")
library(stringi)
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp/Lightest>
using namespace Rcpp;
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op
)
header_for_package <- "
#include <Rcpp/Lightest>
#include \"Broadcast.h\"
using namespace Rcpp;
"
readr::write_file(header_for_sourcing, "header.txt")
Rcpp::sourceCpp(code = header_for_sourcing)
txt1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_int_v)]]
SEXP rcpp_bc_int_v(
SEXP x, SEXP y,
R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_INT_MATH(MACRO_DIM_VECTOR);
UNPROTECT(1);
return out;
}
"
txt2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_int_ov)]]
SEXP rcpp_bc_int_ov(
SEXP x, SEXP y, bool RxC, SEXP out_dim,
R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_INT_MATH(MACRO_DIM_ORTHOVECTOR);
UNPROTECT(1);
return out;
}
"
txt3 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_int_bs)]]
SEXP rcpp_bc_int_bs(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, bool bigx,
int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_INT_MATH(MACRO_DIM_BIGSMALL_DOCALL);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_int_d)]]
SEXP rcpp_bc_int_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_INT_MATH(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt <- stringi::stri_c(
header_for_sourcing,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
Rcpp::sourceCpp(code = txt)
txt <- stringi::stri_c(
header_for_sourcing,
txt1
collapse = "\n\n"
Rcpp::sourceCpp(code = txt)
foo <- Rcpp::sourceCpp(code = txt)
foo
?Rcpp::sourceCpp
