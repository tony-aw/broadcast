counter <- counter + 1
}
cat(dMacro_skeletons[[2]])
macro_dim_bigx <- stri_c(dMacro_skeletons, collapse = "\n")
################################################################################
# BigY ====
#
DTYPES <- c(2:16)
all_N_decl <- sprintf("const int N%d = INTEGER(out_dim)[%d];\t\\", 1:16, 0:15)
all_for <- c(
sprintf("\t for(int iter%d = 0; iter%d < N%d; ++iter%d) {\t\\", 1:16, 1:16, 1:16, 1:16)
)
forx <- c(
"\t\\",
sprintf("i_x%d = pby_x[%d] * iter%d * pdcp_x[%d];\t\\", 2:16, 1:15, 2:16, 1:15)
)
all_for <- stri_c(all_for, forx, sep = "\n")
cat(all_for[16])
all_parts_x <- c(
"iter1 * pby_x[0]",
sprintf("i_x%d", 2:16)
)
all_x_decl <- sprintf("i_x%d", 2:16)
temp <- "
#define MACRO_DIM_BIGY_<dtype>(DOCODE) do {      \\
R_xlen_t flatind_out = 0;         \\
const int *pby_x = INTEGER_RO(by_x);        \\
<all_N_decl>
const double *pdcp_x = REAL_RO(dcp_x);        \\
R_xlen_t flatind_x;       \\
R_xlen_t flatind_y = 0;       \\
R_xlen_t <all_x_decl>; \\
<startfor>
flatind_x = <main_x>;     \\
\\
DOCODE;                   \\
\\
flatind_y++;                    \\
flatind_out++;                      \\
<endfor>
} while(0)
"
dMacro_skeletons <- character(length(DTYPES))
names(dMacro_skeletons) <- DTYPES
counter <- 1
for(i in DTYPES) {
current_N_decl <- stri_c(all_N_decl[1:i], collapse = "\n")
current_x_decl <- stri_c(all_x_decl[1:(i-1)], collapse = ", ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main_x <- stri_c(all_parts_x[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<all_N_decl>",
"<all_x_decl>",
"<startfor>",
"<main_x>",
"<endfor>"
)
current_replacement <- c(
i,
current_N_decl,
current_x_decl,
current_for,
current_main_x,
current_end
)
out <- stri_replace_all(
temp,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
dMacro_skeletons[counter] <- out
counter <- counter + 1
}
cat(dMacro_skeletons[[2]])
macro_dim_bigy <- stri_c(dMacro_skeletons, collapse = "\n")
################################################################################
# DoCall BigSmall skeleton ====
#
# cases:
case_bigx <-
"case %d:                                       \\
MACRO_DIM_BIGX_%d(DOCODE);    \\
break;                                        \\
"
cases_bigx <- sprintf(case_bigx, 2:16, 2:16) |> stringi::stri_c(collapse = "")
case_bigy <-
"case %d:                                       \\
MACRO_DIM_BIGY_%d(DOCODE);    \\
break;                                        \\
"
cases_bigy <- sprintf(case_bigy, 2:16, 2:16) |> stringi::stri_c(collapse = "")
cat(cases_bigx)
cat(cases_bigy)
templatecode_docall <- "
#define MACRO_DIM_BIGSMALL_DOCALL(DOCODE) do {     \\
int ndims = Rf_length(out_dim);         \\
\\
if(bigx) {                           \\
switch(ndims) {                       \\
<cases_bigx>                     \\
}                                     \\
}                                       \\
else {                                  \\
switch(ndims) {                       \\
<cases_bigy>                     \\
}                                     \\
}                                       \\
} while(0)"
templatecode_docall2 <- stringi::stri_replace_all(
templatecode_docall,
fixed = c("<cases_bigx>", "<cases_bigy>"),
replacement = c(cases_bigx, cases_bigy),
vectorize_all = FALSE
)
cat(templatecode_docall2)
macro_dim_bigsmall_docall <- templatecode_docall2
################################################################################
# General ====
#
DTYPES <- c(2:16)
all_N_decl <- sprintf("const int N%d = INTEGER(out_dim)[%d];\t\\", 1:16, 0:15)
all_for <- c(
sprintf("\t for(int iter%d = 0; iter%d <N%d; ++iter%d) {\t\\", 1:16, 1:16, 1:16, 1:16)
)
forx <- c(
"\t\\",
sprintf("i_x%d = pby_x[%d] * iter%d * pdcp_x[%d];\t\\", 2:16, 1:15, 2:16, 1:15)
)
fory <- c(
"\t\\",
sprintf("i_y%d = pby_y[%d] * iter%d * pdcp_y[%d];\t\\", 2:16, 1:15, 2:16, 1:15)
)
all_for <- stri_c(all_for, forx, fory, sep = "\n")
cat(all_for[16])
all_parts_x <- c(
"pby_x[0] * iter1",
sprintf("i_x%d", 2:16)
)
all_parts_y <- c(
"pby_y[0] * iter1",
sprintf("i_y%d", 2:16)
)
all_x_decl <- sprintf("i_x%d", 2:16)
all_y_decl <- sprintf("i_y%d", 2:16)
temp <- "
#define MACRO_DIM_<dtype>(DOCODE) do {      \\
R_xlen_t flatind_out = 0;         \\
const int *pby_x = INTEGER_RO(by_x);        \\
const int *pby_y = INTEGER_RO(by_y);        \\
const double *pdcp_x = REAL_RO(dcp_x);        \\
const double *pdcp_y = REAL_RO(dcp_y);        \\
<all_N_decl>
R_xlen_t flatind_x;       \\
R_xlen_t flatind_y;       \\
R_xlen_t <all_x_decl>; \\
R_xlen_t <all_y_decl>; \\
<startfor>
flatind_x = <main_x>;       \\
flatind_y = <main_y>;     \\
\\
DOCODE;                                                          \\
\\
flatind_out++;                      \\
<endfor>
} while(0)
"
dMacro_skeletons <- character(length(DTYPES))
names(dMacro_skeletons) <- DTYPES
counter <- 1
for(i in DTYPES) {
current_N_decl <- stri_c(all_N_decl[1:i], collapse = "\n")
current_x_decl <- stri_c(all_x_decl[1:(i-1)], collapse = ", ")
current_y_decl <- stri_c(all_y_decl[1:(i-1)], collapse = ", ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main_x <- stri_c(all_parts_x[1:i], collapse = " + ")
current_main_y <- stri_c(all_parts_y[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<all_N_decl>",
"<all_x_decl>",
"<all_y_decl>",
"<startfor>",
"<main_x>",
"<main_y>",
"<endfor>"
)
current_replacement <- c(
i,
current_N_decl,
current_x_decl,
current_y_decl,
current_for,
current_main_x,
current_main_y,
current_end
)
out <- stri_replace_all(
temp,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
dMacro_skeletons[counter] <- out
counter <- counter + 1
}
cat(dMacro_skeletons[[2]])
macro_dim_d <- stri_c(dMacro_skeletons, collapse = "\n")
################################################################################
# do call ====
#
# cases:
case <-
"case %d:                                       \\
MACRO_DIM_%d(DOCODE);    \\
break;                                        \\
"
cases <- sprintf(case, 2:16, 2:16) |> stringi::stri_c(collapse = "")
cat(cases)
templatecode_docall <- "
#define MACRO_DIM_DOCALL(DOCODE) do {     \\
int ndims = Rf_length(out_dim);         \\
\\
switch(ndims) {       \\
<cases>       \\
}       \\
} while(0)"
templatecode_docall2 <- stringi::stri_replace_all(
templatecode_docall,
fixed = c("<cases>"),
replacement = c(cases),
vectorize_all = FALSE
)
cat(templatecode_docall2)
macro_dim_docall <- templatecode_docall2
################################################################################
# Save macros ====
#
macro_dim <- stri_c(
"\n",
macro_dim_vector,
"\n",
macro_dim_orthovector,
"\n",
macro_dim_bigx,
"\n",
macro_dim_bigy,
"\n",
macro_dim_bigsmall_docall,
"\n",
macro_dim_d,
"\n",
macro_dim_docall,
"\n"
)
readr::write_file(macro_dim, "macro_dim.txt")
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
# set-up ====
library(stringi)
# dMacro_skeletons <- qs::qread("dMacro_skeletons")
# macros <- stri_c(dMacro_skeletons, collapse = "\n")
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header <- stri_c("
#ifndef BROADCAST_H
#define BROADCAST_H
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"
#endif
"
)
cat(header)
Rcpp::sourceCpp(code = header)
readr::write_file(header, "src/broadcast.h")
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
library(stringi)
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp.h>
using namespace Rcpp;
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op
)
header_for_package <- "
#include <Rcpp.h>
#include \"Broadcast.h\"
using namespace Rcpp;
"
readr::write_file(header_for_sourcing, "header.txt")
Rcpp::sourceCpp(code = header_for_sourcing)
txt1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_dbl_v)]]
SEXP rcpp_bc_dbl_v(
SEXP x, SEXP y,
R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_DBL(MACRO_DIM_VECTOR);
UNPROTECT(1);
return out;
}
"
txt2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_dbl_ov)]]
SEXP rcpp_bc_dbl_ov(
SEXP x, SEXP y, bool RxC, SEXP out_dim,
R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_DBL(MACRO_DIM_ORTHOVECTOR);
UNPROTECT(1);
return out;
}
"
txt3 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_dbl_bs)]]
SEXP rcpp_bc_dbl_bs(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, bool bigx,
int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_DBL(MACRO_DIM_BIGSMALL_DOCALL);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bc_dbl_d)]]
SEXP rcpp_bc_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, int op
) {
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
MACRO_OP_DBL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt <- stringi::stri_c(
header_for_sourcing,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
Rcpp::sourceCpp(code = txt)
txt <- stringi::stri_c(
header_for_package,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
readr::write_file(txt, "src/rcpp_bc_dbl.cpp")
library(stringi)
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp.h>
using namespace Rcpp;
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"\n"
)
header_for_package <- "
#include <Rcpp.h>
#include \"Broadcast.h\"
using namespace Rcpp;
"
readr::write_file(header_for_sourcing, "header.txt")
txt1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_v)]]
SEXP rcpp_bcRel_dbl_v(
SEXP x, SEXP y,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_VECTOR);
UNPROTECT(1);
return out;
}
"
txt2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_ov)]]
SEXP rcpp_bcRel_dbl_ov(
SEXP x, SEXP y, bool RxC, SEXP out_dim,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_ORTHOVECTOR);
UNPROTECT(1);
return out;
}
"
txt3 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_bs)]]
SEXP rcpp_bcRel_dbl_bs(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, bool bigx,
int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_BIGSMALL_DOCALL);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_d)]]
SEXP rcpp_bcRel_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt <- stringi::stri_c(
header_for_sourcing,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
txt <- stringi::stri_c(
header_for_package,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
readr::write_file(txt, "src/rcpp_bcRel_dbl.cpp")
getwd()
