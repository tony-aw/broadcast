)
bc_all <- get_times(res, "broadcast")
if(length(bc_all) < 100) {
stop("too few benchmarks for 'R'")
}
median_bc[counter] <- median(bc_all)
q1_bc[counter] <- quantile(bc_all, 0.25)
q3_bc[counter] <- quantile(bc_all, 0.75)
counter <- counter + 1L
}
median_bc <- median_bc * 1000
q1_bc <- q1_bc * 1000
q3_bc <- q3_bc * 1000
save(
dimsizes, median_bc, q1_bc, q3_bc,
file = "benchmarks/bm_bc_7d.RData"
)
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website/vignettes")
load("benchmarks/bm_bc_3d.RData")
median_np = scan("benchmarks/bm_py_3d_median.txt")
q1_np = scan("benchmarks/bm_py_3d_q1.txt")
q3_np = scan("benchmarks/bm_py_3d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = dimsizes
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median, by = module, type = "l",
main = "benchmarks",
xlab = "size of each dimension",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1, ymax = df$q3, by = module,
type = type_ribbon(alpha = 0.25)
)
load("benchmarks/bm_bc_4d.RData")
median_np = scan("benchmarks/bm_py_4d_median.txt")
q1_np = scan("benchmarks/bm_py_4d_q1.txt")
q3_np = scan("benchmarks/bm_py_4d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = dimsizes
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median, by = module, type = "l",
main = "benchmarks",
xlab = "size of each dimension",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1, ymax = df$q3, by = module,
type = type_ribbon(alpha = 0.25)
)
load("benchmarks/bm_bc_5d.RData")
median_np = scan("benchmarks/bm_py_5d_median.txt")
q1_np = scan("benchmarks/bm_py_5d_q1.txt")
q3_np = scan("benchmarks/bm_py_5d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = dimsizes
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median, by = module, type = "l",
main = "benchmarks",
xlab = "size of each dimension",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1, ymax = df$q3, by = module,
type = type_ribbon(alpha = 0.25)
)
load("benchmarks/bm_bc_6d.RData")
median_np = scan("benchmarks/bm_py_6d_median.txt")
q1_np = scan("benchmarks/bm_py_6d_q1.txt")
q3_np = scan("benchmarks/bm_py_6d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = dimsizes
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median, by = module, type = "l",
main = "benchmarks",
xlab = "size of each dimension",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1, ymax = df$q3, by = module,
type = type_ribbon(alpha = 0.25)
)
load("benchmarks/bm_bc_7d.RData")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
load("benchmarks/bm_bc_7d.RData")
median_np = scan("benchmarks/bm_py_7d_median.txt")
q1_np = scan("benchmarks/bm_py_7d_q1.txt")
q3_np = scan("benchmarks/bm_py_7d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
load("benchmarks/bm_bc_7d.RData")
median_np = scan("benchmarks/bm_py_7d_median.txt")
q1_np = scan("benchmarks/bm_py_7d_q1.txt")
q3_np = scan("benchmarks/bm_py_7d_q3.txt")
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website/vignettes")
reticulate::repl_python()
load("benchmarks/bm_bc_7d.RData")
median_np = scan("benchmarks/bm_py_7d_median.txt")
q1_np = scan("benchmarks/bm_py_7d_q1.txt")
q3_np = scan("benchmarks/bm_py_7d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = dimsizes
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median, by = module, type = "l",
main = "benchmarks",
xlab = "size of each dimension",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1, ymax = df$q3, by = module,
type = type_ribbon(alpha = 0.25)
)
load("benchmarks/bm_bc_2d.RData")
median_np = scan("benchmarks/bm_py_2d_median.txt")
q1_np = scan("benchmarks/bm_py_2d_q1.txt")
q3_np = scan("benchmarks/bm_py_2d_q3.txt")
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = dimsizes
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = dimsizes
)
reticulate::repl_python()
x <- array(1:20, c(4, 5))
y <- array(1:5*10, c(1, 5))
print(x)
print(y)
abind(x, y)
abind::abind(x, y)
abind::abind(x, y, 2)
abind::abind(x, y, along = 2)
bind_array(list(x, y))
library(broadcast)
bind_array(list(x, y))
bind_array(list(x, y), 2L)
x <- array(1:20, c(4, 5, 3))
x
bind_array(list(x, y), 2L, ndim2bc = 0)
x <- array(1:20, c(4, 5, 3))
print(x)
bind_array(list(x, y), 2L)
bind_array(list(x, y), 2L, ndim2bc = 3L)
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website/about")
along <- 2L
n <- 150L
nms <- function(n) sample(letters, n, TRUE)
x <- array(as.double(1:25), c(n, n, n))
y <- array(as.double(-1:-25), c(n, n, n))
dimnames(x) <- lapply(dim(x), nms)
dimnames(y) <- lapply(dim(y), nms)
input <- list(x, y)
bm_abind <- bench::mark(
abind = abind::abind(input, along = 2),
broadcast = bind_array(input, 2),
min_iterations = 100,
check = FALSE # because abind adds empty dimnames
)
# set-up ====
library(broadcast)
library(abind)
along <- 2L
n <- 150L
nms <- function(n) sample(letters, n, TRUE)
x <- array(as.double(1:25), c(n, n, n))
y <- array(as.double(-1:-25), c(n, n, n))
dimnames(x) <- lapply(dim(x), nms)
dimnames(y) <- lapply(dim(y), nms)
input <- list(x, y)
bm_abind <- bench::mark(
abind = abind::abind(input, along = 2),
broadcast = bind_array(input, 2),
min_iterations = 100,
check = FALSE # because abind adds empty dimnames
)
summary(bm_abind)
ggplot2::autoplot(bm_abind)
bm_abind <- bench::mark(
abind = abind::abind(input, along = 2),
broadcast = bind_array(input, 2),
min_iterations = 100,
check = FALSE # because abind adds empty dimnames
)
summary(bm_abind)
ggplot2::autoplot(bm_abind)
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
library(quarto)
quarto_render()
# wait until render is done!
quarto_preview()
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
setwd("..")
current.folder <- "website/_site"
new.folder <- "docs"
lst.files <- list.files(current.folder)
lst.files
file.copy(list.of.files, new.folder)
file.copy(lst.files, new.folder)
lst.files <- list.files(current.folder, recursive = TRUE)
file.copy(lst.files, new.folder, recursive = TRUE)
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
setwd("..")
current.folder <- "website/_site"
new.folder <- "docs"
lst.files <- list.files(current.folder, recursive = TRUE)
lst.files
?file.copy
?R.utils::copyDirectory()
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
setwd("..")
current.folder <- "website/_site"
new.folder <- "docs"
lst.files <- list.files(current.folder, recursive = TRUE)
file.copy(lst.files, new.folder, recursive = TRUE)
warning()
warnings()
lst.files <- list.files(current.folder, recursive = TRUE)
file.copy(lst.files, new.folder, recursive = TRUE, overwrite = TRUE)
badger::badge_repostatus("WIP")
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
# set-up ====
library(stringi)
source("siteutils.R")
################################################################################
# Create man pages ====
#
## pre-process Rds for linking ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("man", pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("man", i)
outpath <- file.path("preprocess", "man")
rd_links(filepath, outpath, funs)
}
## convert Rd to qmd ====
lst.files <- list.files(file.path("preprocess", "man"), pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("preprocess", "man", i)
temp_html <- stri_replace_last(i, ".html", fixed = ".Rd")
temp_html <- file.path("preprocess", "man", temp_html)
outpath <- file.path("website", "man")
rd2qmd(filepath, temp_html, outpath, pkgpath)
}
## adapt man titles ====
detection <- "---\ntitle:"
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
print(i)
filename <- i
title <- stri_replace_last(filename, "", fixed = ".qmd")
temp <- readLines(file.path("website", "man", filename))
check <- stringi::stri_detect(paste0(temp[1:2], collapse = "\n"), fixed = detection)
if(!check && !stri_detect(title, fixed = "aaa")) {
temp <- c("---", paste0("title: ", title), "---", temp)
writeLines(temp, file.path("website", "man", filename))
}
}
## unpack links in man pages ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "man", i)
outpath <- file.path("website", "man")
qmd_extractlinks(filepath, outpath, funs)
}
################################################################################
# Process Vignettes, Index page, and GitHub Readme ====
#
# copy & render intro template ====
from <- "intro_template.qmd"
to <- file.path("website", "vignettes", "a_readme.qmd")
file.copy(from, to, overwrite = TRUE)
to <- "README.qmd"
file.copy(from, to, overwrite = TRUE)
gfm <- readLines("README.qmd")
gfm <- stri_replace_all(
gfm,
"'R'",
fixed = '`r fa("r-project")`'
)
writeLines(gfm, to)
quarto::quarto_render(to, "gfm", "README.md")
# create links in vignettes ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files(file.path("website", "vignettes"), pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "vignettes", i)
temp <- readLines(filepath)
p <- paste0("`", funs, "()`")
rp <- paste0("[", funs, "()]", "(/man/", rd_index(funs), ".qmd)")
temp <- stri_replace_all(
temp, rp, fixed = p, vectorize_all = FALSE
)
writeLines(temp, file.path("website", "vignettes", i))
}
# copy readme vignette to index page ====
from <- file.path("website", "vignettes", "a_readme.qmd")
to <- file.path("website", "index.qmd")
file.copy(from, to, overwrite = TRUE)
################################################################################
# Process About pages ====
#
# create links in About pages ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files(file.path("website", "About"), pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "About", i)
temp <- readLines(filepath)
p <- paste0("`", funs, "()`")
rp <- paste0("[", funs, "()]", "(/man/", rd_index(funs), ".qmd)")
temp <- stri_replace_all(
temp, rp, fixed = p, vectorize_all = FALSE
)
writeLines(temp, file.path("website", "About", i))
}
# end of rd2qmd ====
# wait until render is done!
quarto_preview()
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/website")
library(quarto)
# wait until render is done!
quarto_preview()
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
# set-up ====
library(stringi)
source("siteutils.R")
################################################################################
# Create man pages ====
#
## pre-process Rds for linking ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("man", pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("man", i)
outpath <- file.path("preprocess", "man")
rd_links(filepath, outpath, funs)
}
## convert Rd to qmd ====
lst.files <- list.files(file.path("preprocess", "man"), pattern = "Rd")
pkgpath <- getwd()
for(i in lst.files) {
print(i)
filepath <- file.path("preprocess", "man", i)
temp_html <- stri_replace_last(i, ".html", fixed = ".Rd")
temp_html <- file.path("preprocess", "man", temp_html)
outpath <- file.path("website", "man")
rd2qmd(filepath, temp_html, outpath, pkgpath)
}
## adapt man titles ====
detection <- "---\ntitle:"
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
print(i)
filename <- i
title <- stri_replace_last(filename, "", fixed = ".qmd")
temp <- readLines(file.path("website", "man", filename))
check <- stringi::stri_detect(paste0(temp[1:2], collapse = "\n"), fixed = detection)
if(!check && !stri_detect(title, fixed = "aaa")) {
temp <- c("---", paste0("title: ", title), "---", temp)
writeLines(temp, file.path("website", "man", filename))
}
}
## unpack links in man pages ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files("website/man/", pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "man", i)
outpath <- file.path("website", "man")
qmd_extractlinks(filepath, outpath, funs)
}
################################################################################
# Process Vignettes, Index page, and GitHub Readme ====
#
# copy & render intro template ====
from <- "intro_template.qmd"
to <- file.path("website", "vignettes", "a_readme.qmd")
file.copy(from, to, overwrite = TRUE)
to <- "README.qmd"
file.copy(from, to, overwrite = TRUE)
gfm <- readLines("README.qmd")
gfm <- stri_replace_all(
gfm,
"'R'",
fixed = '`r fa("r-project")`'
)
writeLines(gfm, to)
quarto::quarto_render(to, "gfm", "README.md")
# create links in vignettes ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files(file.path("website", "vignettes"), pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "vignettes", i)
temp <- readLines(filepath)
p <- paste0("`", funs, "()`")
rp <- paste0("[", funs, "()]", "(/man/", rd_index(funs), ".qmd)")
temp <- stri_replace_all(
temp, rp, fixed = p, vectorize_all = FALSE
)
writeLines(temp, file.path("website", "vignettes", i))
}
# copy readme vignette to index page ====
from <- file.path("website", "vignettes", "a_readme.qmd")
to <- file.path("website", "index.qmd")
file.copy(from, to, overwrite = TRUE)
################################################################################
# Process About pages ====
#
# create links in About pages ====
funs <- getNamespaceExports("broadcast")
lst.files <- list.files(file.path("website", "About"), pattern = "qmd")
for(i in lst.files) {
filepath <- file.path("website", "About", i)
temp <- readLines(filepath)
p <- paste0("`", funs, "()`")
rp <- paste0("[", funs, "()]", "(/man/", rd_index(funs), ".qmd)")
temp <- stri_replace_all(
temp, rp, fixed = p, vectorize_all = FALSE
)
writeLines(temp, file.path("website", "About", i))
}
# end of rd2qmd ====
