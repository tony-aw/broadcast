macro_typeswitch_numeric_special,
"\n",
macro_typeswitch_numeric_rel
)
readr::write_file(macro_typeswitch_numeric, "macro_typeswitch_numeric.txt")
library(stringi)
################################################################################
# Numeric ====
#
macro_typeswitch_numeric_common <- "
#define MACRO_TYPESWITCH_NUMERIC_COMMON(DIMCODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION1(                                           \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_numeric_careful <- "
#define MACRO_TYPESWITCH_NUMERIC_CAREFUL(DIMCODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_numeric_simple <- "
#define MACRO_TYPESWITCH_NUMERIC_SIMPLE(DIMCODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
} while(0)
"
macro_typeswitch_numeric_special <- "
#define MACRO_TYPESWITCH_NUMERIC_SPECIAL(DIMCODE, RULECHECK, RULECODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION3(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_numeric_rel <- "
#define MACRO_TYPESWITCH_NUMERIC_REL(DIMCODE, NACODE1, DOCODE1, NACODE2, DOCODE2) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                \\
const int *py = INTEGER_RO(y);                                \\
DIMCODE(                                                      \\
MACRO_DOUBLEPASS(                                           \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(xint && !yint) {                                      \\
const int *px = INTEGER_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && yint) {                                      \\
const double *px = REAL_RO(x);                              \\
const int *py = INTEGER_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && !yint) {                                     \\
const double *px = REAL_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_numeric <- stri_c(
macro_typeswitch_numeric_common,
"\n",
macro_typeswitch_numeric_careful,
"\n",
macro_typeswitch_numeric_simple,
"\n",
macro_typeswitch_numeric_special,
"\n",
macro_typeswitch_numeric_rel
)
readr::write_file(macro_typeswitch_numeric, "macro_typeswitch_numeric.txt")
library(stringi)
################################################################################
# Numeric ====
#
macro_op_rel_dbl <- "
#define MACRO_OP_REL_DBL(DIMCODE) do {	\\
switch(op) {	\\
case 1:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = abs((double)px[flatind_x] - (double)py[flatind_y]), \\
tempout = NA_LOGICAL, \\
tempout = tempout < prec  \\
);	\\
break;	\\
}	\\
case 2:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = abs((double)px[flatind_x] - (double)py[flatind_y]),	\\
tempout = NA_LOGICAL, \\
tempout = tempout >= prec  \\
);	\\
break;	\\
}	\\
case 3:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = ((double)px[flatind_x] - (double)py[flatind_y]),  \\
tempout = NA_LOGICAL, \\
tempout = tempout <= -prec  \\
);	\\
break;	\\
}	\\
case 4:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = ((double)px[flatind_x] - (double)py[flatind_y]),  \\
tempout = NA_LOGICAL, \\
tempout = tempout >= prec  \\
);	\\
break;	\\
}	\\
case 5:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = ((double)px[flatind_x] - (double)py[flatind_y]),  \\
tempout = NA_LOGICAL, \\
tempout = tempout < prec  \\
);	\\
break;	\\
}	\\
case 6:	\\
{	\\
MACRO_TYPESWITCH_NUMERIC_REL(	\\
DIMCODE,	\\
tempcalc = NA_REAL,	\\
tempcalc = ((double)px[flatind_x] - (double)py[flatind_y]),	\\
tempout = NA_LOGICAL, \\
tempout = tempout > -prec  \\
);	\\
break;	\\
}	\\
default:	\\
{	\\
stop(\"given operator not supported in the given context\");	\\
}	\\
}	\\
} while(0)
"
#
# macro_op_rel_dbl <- stri_split_regex(
#   macro_op_rel_dbl, "\\n", simplify = TRUE
# )
# macro_op_rel_dbl <- stri_c(macro_op_rel_dbl, "\t\\\\")
# macro_op_rel_dbl <- stri_c(macro_op_rel_dbl, collapse = "\n")
# cat(macro_op_rel_dbl)
readr::write_file(macro_op_rel_dbl, "macro_op.txt")
# set-up ====
library(stringi)
# dMacro_skeletons <- qs::qread("dMacro_skeletons")
# macros <- stri_c(dMacro_skeletons, collapse = "\n")
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header <- stri_c("
#ifndef MACROS_EVERYWHERE_H
#define MACROS_EVERYWHERE_H
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"
#endif
"
)
cat(header)
Rcpp::sourceCpp(code = header)
readr::write_file(header, "src/Macros_Everywhere.h")
library(stringi)
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp.h>
using namespace Rcpp;
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"\n"
)
header_for_package <- "
#include <Rcpp.h>
#include \"Macros_Everywhere.h\"
using namespace Rcpp;
"
readr::write_file(header_for_sourcing, "header.txt")
Rcpp::sourceCpp(code = header_for_sourcing)
txt1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_v)]]
SEXP rcpp_bcRel_dbl_v(
SEXP x, SEXP y,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_VECTOR);
UNPROTECT(1);
return out;
}
"
txt2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_ov)]]
SEXP rcpp_bcRel_dbl_ov(
SEXP x, SEXP y, bool RxC, SEXP out_dim,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_ORTHOVECTOR);
UNPROTECT(1);
return out;
}
"
txt3 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_bs)]]
SEXP rcpp_bcRel_dbl_bs(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout, bool bigx,
int op, double prec
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_BIGSMALL_DOCALL);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_d)]]
SEXP rcpp_bcRel_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout, int op, double prec
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_REL_DBL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt <- stringi::stri_c(
header_for_sourcing,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
Rcpp::sourceCpp(code = txt)
txt <- stringi::stri_c(
header_for_package,
txt1, txt2, txt3, txt4,
collapse = "\n\n"
)
readr::write_file(txt, "src/rcpp_bcRel_dbl.cpp")
