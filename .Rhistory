np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, 1L, n)
npb <- np$random$rand(n, n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, 1, 1, n))
b <- array(rnorm(100), c(n, n, n, 1))
a2 <- a
b2 <- b
dim(a2) <- c(n, 1, n)
dim(b2) <- c(n, n^2, 1)
tinytest::expect_equal(
bc.d(a, b, "+") |> as.vector(),
bc.d(a2, b2, "+") |> as.vector()
)
by_a <- c(1L, 0L, 0L, 1L)
by_b <- c(1L, 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.d(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 200L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n)
npb <- np$random$rand(n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, 1, n))
b <- array(rnorm(100), c(n, n, 1))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, rep(1L, n), 1:n)
s_b <- list(1:n, 1:n, rep(1L, n))
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.d(a, b, "+"),
# test = .rcpp_bc_dbl_test_general(a, b, by_a, by_b, dim(a), dim(b), out.dim, out.len),
# d = broadcast:::.rcpp_bc_dbl_d(
#   a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len, 1L
# ),
# general = broadcast:::.rcpp_bc_dbl_general(
#   a, b, s_a, s_b, dim(a), dim(b), out.len, 1L
# ),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 10L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n, 1L, n, 1L)
npb <- np$random$rand(n, n, 1L, n, 1L, n)
npa + npb
a.dim <- c(n, rep(c(1L, n), 2), 1L)
b.dim <- c(n, rep(c(n, 1L), 2), n)
a <- array(rnorm(100), a.dim)
b <- array(rnorm(100), b.dim)
foo <- bench::mark(
bc = bc.d(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
code <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_bc_dbl_irregular_test)]]
SEXP rcpp_bc_dbl_irregular_test(
SEXP x, SEXP y, SEXP i_x, SEXP i_y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
const double *px = REAL_RO(x);
const double *py = REAL_RO(y);
const int *pi_x = INTEGER_RO(i_x);
const int *pi_y = INTEGER_RO(i_y);
const int k1 = Rf_length(i_x);
const int k2 = Rf_length(i_y);
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
R_xlen_t counter = 0;
const int *pout_dim = INTEGER_RO(out_dim);
R_xlen_t flatind_common;
R_xlen_t flatind_x;
R_xlen_t flatind_y;
SEXP iters = PROTECT(Rf_allocVector(INTSXP, 3));
int *piters = INTEGER(iters);
int j1;
int j2;
int i;
for(piters[2] = 0; piters[2] < pout_dim[2]; piters[2]++) {
for(piters[1] = 0; piters[1] < pout_dim[1]; piters[1]++) {
for(piters[0] = 0; piters[0] < pout_dim[0]; piters[0]++) {
flatind_x = 0;
flatind_y = 0;
for(j1 = 0; j1 < k1; ++j1) {
i = pi_x[j1];
flatind_x += piters[i] * pdcp_x[i];
i = pi_y[j1];
flatind_y += piters[i] * pdcp_y[i];
}
tempout = (double)px[flatind_x] + (double)py[flatind_y];
pout[counter] = tempout;
counter++;
}
}
}
UNPROTECT(2);
return out;
}
"
Rcpp::sourceCpp(code = code)
n <- 100L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n)
npb <- np$random$rand(n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, 1, n))
b <- array(rnorm(100), c(n, n, 1))
i_a <- c(1L, 3L) - 1L
i_b <- c(1L, 2L) - 1L
s_a <- list(1:n, rep(1L, n), 1:n)
s_b <- list(1:n, 1:n, rep(1L, n))
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.d(a, b, "+"),
# test = rcpp_bc_dbl_irregular_test(
#   a, b, i_a, i_b, dcp_a, dcp_b, out.dim, out.len
# ),
`numpy (no conversion to R)` = npa + npb,
# bc.general = broadcast:::.rcpp_bc_dbl_general(
#   a, b, s_a, s_b, dim(a), dim(b), out.len, 1L
# ),
# aflat + bflat,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
`==`
`+`
methods("==")
methods("+")
isS3method("==")
isS3method("+")
setwd("D:/D Desktop/Publications/R package broadcast")
code <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_bc_dbl_d_test)]]
SEXP rcpp_bc_dbl_d_test(
SEXP x, SEXP y, SEXP by_x, SEXP by_y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
const double *px = REAL_RO(x);
const double *py = REAL_RO(y);
const int *pby_x = INTEGER_RO(by_x);
const int *pby_y = INTEGER_RO(by_y);
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
R_xlen_t counter = 0;
const int *pout_dim = INTEGER_RO(out_dim);
R_xlen_t flatind_x;
R_xlen_t flatind_y;
R_xlen_t x4, y4, x3, y3, x2, y2;
for(int iter4 = 0; iter4 < pout_dim[3]; ++iter4) {
x4 = pby_x[3] * iter4 * pdcp_x[3];
y4 = pby_y[3] * iter4 * pdcp_y[3];
for(int iter3 = 0; iter3 < pout_dim[2]; ++iter3) {
x3 = pby_x[2] * iter3 * pdcp_x[2];
y3 = pby_y[2] * iter3 * pdcp_y[2];
for(int iter2 = 0; iter2 < pout_dim[1]; ++iter2) {
x2 = pby_x[1] * iter2 * pdcp_x[1];
y2 = pby_y[1] * iter2 * pdcp_y[1];
for(int iter1 = 0; iter1 < pout_dim[0]; ++iter1) {
flatind_x = pby_x[0] * iter1 + x2 + x3 + x4;
flatind_y = pby_y[0] * iter1 + y2 + y3 + y4;
tempout = (double)px[flatind_x] + (double)py[flatind_y];
pout[counter] = tempout;
counter++;
}
}
}
}
UNPROTECT(1);
return out;
}
"
Rcpp::sourceCpp(code = code)
n <- 200L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, n, 1L, 1L)
npa + npb
a <- array(rnorm(100), c(n, n, 1, n))
b <- array(rnorm(100), c(n, n, 1, 1))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, 1:n, 1:n)
s_b <- list(1:n, 1:n, rep(1L, n))
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
library(broadcast)
bc.num
foo <- bench::mark(
bc = bc.num(a, b, "+"),
# test_bs = rcpp_bc_dbl_bigx_test(a, b, by_b, dcp_b, out.dim, out.len),
# test_regular = rcpp_bc_dbl_d_test(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
# test_bs = rcpp_bc_dbl_bigx_test(a, b, by_b, dcp_b, out.dim, out.len),
# test_regular = rcpp_bc_dbl_d_test(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 700L
gen <- function(n)sample(c(NA, NaN, Inf, -Inf, 1.5:10.5))
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L)
npb <- np$random$rand(1L, n)
npa + npb
npa$ndim
npb$ndim
a <- array(gen(), c(n, 1))
b <- array(gen(), c(1, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, rep(1L, n), 1:n, rep(1L, n))
s_b <- list(rep(1L, n), 1:n, rep(1L, n), 1:n)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
broadcast:::.determine_dimmode(a, b, out.dim, sys.call())
foo <- bench::mark(
# internal = broadcast:::.rcpp_bc_dbl_ov(a, b, TRUE, out.dim, out.len, 1L),
# internal2 = broadcast:::.rcpp_bc_dbl_d(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len, 1L),
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
a <- array(gen(), c(n, 1))
b <- array(gen(), c(1, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, rep(1L, n), 1:n, rep(1L, n))
s_b <- list(rep(1L, n), 1:n, rep(1L, n), 1:n)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
broadcast:::.determine_dimmode(a, b, out.dim, sys.call())
foo <- bench::mark(
# internal = broadcast:::.rcpp_bc_dbl_ov(a, b, TRUE, out.dim, out.len, 1L),
# internal2 = broadcast:::.rcpp_bc_dbl_d(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len, 1L),
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 60L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, n, 1, n))
b <- array(rnorm(100), c(n, n, n, 1))
by_a <- c(1L, 1L, 0L, 1L)
by_b <- c(1L, 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 10L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n, 1L, n, 1L)
npb <- np$random$rand(n, n, 1L, n, 1L, n)
npa + npb
a.dim <- c(n, rep(c(1L, n), 2), 1L)
b.dim <- c(n, rep(c(n, 1L), 2), n)
a <- array(rnorm(100), a.dim)
b <- array(rnorm(100), b.dim)
foo <- bench::mark(
bc = bc.num(a, b, "+"), # bc is massively better
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
library(stringi)
macro_dim <- readr::read_file("macro_dim.txt")
macro_typeswitch_numeric <- readr::read_file("macro_typeswitch_numeric.txt")
macro_action <- readr::read_file("macro_action.txt")
macro_op <- readr::read_file("macro_op.txt")
header_for_sourcing <- stri_c(
"
#include <Rcpp/Lightest>
using namespace Rcpp;
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"\n"
)
header_for_package <- "
#include <Rcpp/Lightest>
#include \"Broadcast.h\"
using namespace Rcpp;
"
readr::write_file(header_for_sourcing, "header.txt")
Rcpp::sourceCpp(code = header_for_sourcing)
txt1 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_v)]]
SEXP rcpp_bcRel_dbl_v(
SEXP x, SEXP y,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_NUM_REL(MACRO_DIM_VECTOR);
UNPROTECT(1);
return out;
}
"
txt2 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_ov)]]
SEXP rcpp_bcRel_dbl_ov(
SEXP x, SEXP y, bool RxC, SEXP out_dim,
R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_NUM_REL(MACRO_DIM_ORTHOVECTOR);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_d)]]
SEXP rcpp_bcRel_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_NUM_REL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt4 <- "
//' @keywords internal
//' @noRd
// [[Rcpp::export(.rcpp_bcRel_dbl_d)]]
SEXP rcpp_bcRel_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, R_xlen_t nout, int op, double prec
) {
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_NUM_REL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return out;
}
"
txt <- stringi::stri_c(
header_for_sourcing,
txt4,
collapse = "\n\n"
)
Rcpp::sourceCpp(code = txt)
txt4 <- "
SEXP C_bcRel_dbl_d(
SEXP x, SEXP y,
SEXP by_x,
SEXP by_y,
SEXP dcp_x, SEXP dcp_y, SEXP out_dim, SEXP nout2, SEXP op2, SEXP prec2
) {
R_xlen_t nout = REAL(nout2)[0];
int op = INTEGER(op2)[0];
double prec = REAL(prec2)[0];
double tempcalc;
int tempout;
SEXP out = PROTECT(Rf_allocVector(LGLSXP, nout));
int *pout;
pout = LOGICAL(out);
MACRO_OP_NUM_REL(MACRO_DIM_DOCALL);
UNPROTECT(1);
return(out);
}
"
header_for_sourcing <- stri_c(
"
",
macro_action,
"\n",
macro_dim,
"\n",
macro_typeswitch_numeric,
"\n",
macro_op,
"\n"
)
