code <- "
#include <Rcpp.h>
using namespace Rcpp;
//' @keywords internal
//' @noRd
// [[Rcpp::export(rcpp_bc_dbl_sandwich_xstart_test)]]
SEXP rcpp_bc_dbl_sandwich_xstart_test(
SEXP x, SEXP y,
SEXP dimcumprod_x, SEXP dimcumprod_y, SEXP out_dim, R_xlen_t nout
) {
double *pdcp_x = REAL(dimcumprod_x);
double *pdcp_y = REAL(dimcumprod_y);
const double *px = REAL_RO(x);
const double *py = REAL_RO(y);
double tempout;
SEXP out = PROTECT(Rf_allocVector(REALSXP, nout));
double *pout;
pout = REAL(out);
R_xlen_t counter = 0;
const int *pout_dim = INTEGER_RO(out_dim);
R_xlen_t flatind_x;
R_xlen_t flatind_y;
for(int iter4 = 0; iter4 < pout_dim[3]; ++iter4) {
for(int iter3 = 0; iter3 < pout_dim[2]; ++iter3) {
for(int iter2 = 0; iter2 < pout_dim[1]; ++iter2) {
for(int iter1 = 0; iter1 < pout_dim[0]; ++iter1) {
flatind_x = iter1 + iter2 * pdcp_x[1] + iter4 * pdcp_x[3];
flatind_y = iter1 + iter3 * pdcp_y[2] + iter4 * pdcp_y[3];
tempout = (double)px[flatind_x] + (double)py[flatind_y];
pout[counter] = tempout;
counter++;
}
}
}
}
UNPROTECT(1);
return out;
}
"
Rcpp::sourceCpp(code = code)
library(broadcast)
n <- 100L
gen <- function(n)sample(c(NA, NaN, Inf, -Inf, 1.5:10.5))
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, 1L, n, n)
npa + npb
npa$ndim
npb$ndim
a <- array(gen(), c(n, 1, n, n))
b <- array(gen(), c(n, n, 1, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
out <- rcpp_bc_dbl_sandwich_test(a, b, dcp_a, dcp_b, out.dim, out.len)
out <- rcpp_bc_dbl_sandwich_xstart_test(a, b, dcp_a, dcp_b, out.dim, out.len)
dim(out) <- out.dim
expected <- bc.d(a, b, "+")
comp <- cbind(o = as.vector(out), e = as.vector(expected))
tinytest::expect_equal(
expected,out
)
View(comp)
n <- 10L
gen <- function(n)sample(c(NA, NaN, Inf, -Inf, 1.5:10.5))
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, 1L, n, n)
npa + npb
npa$ndim
npb$ndim
a <- array(gen(), c(n, 1, n, n))
b <- array(gen(), c(n, n, 1, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
out <- rcpp_bc_dbl_sandwich_xstart_test(a, b, dcp_a, dcp_b, out.dim, out.len)
dim(out) <- out.dim
expected <- bc.d(a, b, "+")
comp <- cbind(o = as.vector(out), e = as.vector(expected))
tinytest::expect_equal(
expected,out
)
View(comp)
a <- array(gen(), c(n, n, 1, n))
b <- array(gen(), c(n, 1, n, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
out <- rcpp_bc_dbl_sandwich_xstart_test(a, b, dcp_a, dcp_b, out.dim, out.len)
dim(out) <- out.dim
expected <- bc.d(a, b, "+")
comp <- cbind(o = as.vector(out), e = as.vector(expected))
tinytest::expect_equal(
expected,out
)
foo <- bench::mark(
bc = bc.d(a, b, "+"),
test = rcpp_bc_dbl_sandwich_xstart_test(
a, b, dcp_a, dcp_b, out.dim, out.len
),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 10,
)
summary(foo)
ggplot2::autoplot(foo)
