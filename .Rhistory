2+2
library(broadcast)
bc.num(x, y, "+")
x + y
x <- array(1:5, c(5, 1))
y <- array(1:5, c(1, 5))
print(x)
print(y)
x + y
mapply
pryr::show_c_source(.Internal(mapply(FUN, dots, MoreArgs)))
txt <- "
int LevenshteinDistance(std::string s,
std::string t) {
// Number of elements
int n = s.size();
int m = t.size();
Rcpp::IntegerMatrix d(n+1 * m+1);
if (n == 0){
return m;
}
if (m == 0){
return n;
}
for (int i = 0; i <= n; i++){
d(i, 0) = i;
}
// No sense to revisit the (0,0) coordinate
for (int j = 1; j <= m; j++){
d(0, j) = j;
}
for (int j = 1; j <= m; j++){
for (int i = 1; i <= n; i++){
if (s[i - 1] == t[j - 1]){
d(i, j) = d(i - 1, j - 1);  // no operation
} else {
d(i, j) = std::min(d(i - 1, j) + 1,    //a deletion
std::min(d(i, j - 1) + 1,   //an insertion
d(i - 1, j - 1) + 1)); //a substitution
} // end if
} // end inner for
} // end outer for
return d(n, m);
}
"
x <- matrix(1:25, 5, 5)
x
x-1
txt <- "
int LevenshteinDistance(std::string s,
std::string t) {
// Number of elements
int n = s.size();
int m = t.size();
int nrow = n + 1;
int ncol = m + 1;
std::vector<int> d(nrow * ncol, 0);
if (n == 0){
return m;
}
if (m == 0){
return n;
}
for (int i = 0; i < nrow; i++){
d[i] = i;
}
for (int j = 1; j < ncol; j++){
d[nrow * j] = j;
}
for (int j = 1; j <= m; j++){
for (int i = 1; i <= n; i++){
if (s[i - 1] == t[j - 1]){
d[i + nrow * j] = d[(i - 1) + nrow * (j - 1)];  // no operation
} else {
d[i + nrow * j] = std::min(d[(i - 1) + nrow * j] + 1,    //a deletion
std::min(d[i + nrow * (j - 1)] + 1,   //an insertion
d((i - 1) + nrow * (j - 1)) + 1)); //a substitution
} // end if
} // end inner for
} // end outer for
return d[n + nrow * m];
}
"
Rcpp::cppFunction(txt)
txt <- "
int LevenshteinDistance(std::string s,
std::string t) {
// Number of elements
int n = s.size();
int m = t.size();
int nrow = n + 1;
int ncol = m + 1;
std::vector<int> d(nrow * ncol, 0);
if (n == 0){
return m;
}
if (m == 0){
return n;
}
for (int i = 0; i < nrow; i++){
d[i] = i;
}
for (int j = 1; j < ncol; j++){
d[nrow * j] = j;
}
for (int j = 1; j <= m; j++){
for (int i = 1; i <= n; i++){
if (s[i - 1] == t[j - 1]){
d[i + nrow * j] = d[(i - 1) + nrow * (j - 1)];  // no operation
} else {
d[i + nrow * j] = std::min(
d[(i - 1) + nrow * j] + 1,    //a deletion
std::min(
d[i + nrow * (j - 1)] + 1,   //an insertion
d[(i - 1) + nrow * (j - 1)] + 1
)
); //a substitution
} // end if
} // end inner for
} // end outer for
return d[n + nrow * m];
}
"
Rcpp::cppFunction(txt)
LevenshteinDistance("hello", "kello")
LevenshteinDistance("hello", "hello")
LevenshteinDistance("hello", "hello") # should be 0
LevenshteinDistance("kitten", "sitting") # should be 3
n <- 200L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, n, 1L, 1L)
npa + npb
a <- array(rnorm(100), c(n, n, 1L, n))
b <- array(rnorm(100), c(n, n, 1, 1))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, 1:n, 1:n)
s_b <- list(1:n, 1:n, rep(1L, n))
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
foo <- microbenchmark::microbenchmark(
bc = bc.num(a, b, "+"),
# test_bs = rcpp_bc_dbl_bigx_test(a, b, by_b, dcp_b, out.dim, out.len),
# test_regular = rcpp_bc_dbl_d_test(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len),
`numpy (no conversion to R)` = npa + npb,
times = 200
)
library(broadcast)
foo <- microbenchmark::microbenchmark(
bc = bc.num(a, b, "+"),
# test_bs = rcpp_bc_dbl_bigx_test(a, b, by_b, dcp_b, out.dim, out.len),
# test_regular = rcpp_bc_dbl_d_test(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len),
`numpy (no conversion to R)` = npa + npb,
times = 200
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
# test_bs = rcpp_bc_dbl_bigx_test(a, b, by_b, dcp_b, out.dim, out.len),
# test_regular = rcpp_bc_dbl_d_test(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 700L
gen <- function(n)sample(c(NA, NaN, Inf, -Inf, 1.5:10.5))
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L)
npb <- np$random$rand(1L, n)
npa + npb
npa$ndim
npb$ndim
a <- array(gen(), c(n, 1))
b <- array(gen(), c(1, n))
by_a <- ifelse(dim(a) > 1L, 1L, 0L)
by_b <- ifelse(dim(b) > 1L, 1L, 0L)
s_a <- list(1:n, rep(1L, n), 1:n, rep(1L, n))
s_b <- list(rep(1L, n), 1:n, rep(1L, n), 1:n)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
broadcast:::.determine_dimmode(a, b, out.dim, sys.call())
foo <- bench::mark(
# internal = broadcast:::.rcpp_bc_dbl_ov(a, b, TRUE, out.dim, out.len, 1L),
# internal2 = broadcast:::.rcpp_bc_dbl_d(a, b, by_a, by_b, dcp_a, dcp_b, out.dim, out.len, 1L),
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100,
)
summary(foo)
ggplot2::autoplot(foo)
tinytest::expect_equal(
bc.num(a, b, "+") |> as.vector(),
rcpp_bc_dbl_orthogonal_test(
a, b, dcp_a, dcp_b, out.dim, out.len
)
)
n <- 60L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, n, 1L, n)
npb <- np$random$rand(n, n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, n, 1, n))
b <- array(rnorm(100), c(n, n, n, 1))
by_a <- c(1L, 1L, 0L, 1L)
by_b <- c(1L, 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 200,
)
summary(foo)
ggplot2::autoplot(foo)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 200,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 60L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, 1L, n)
npb <- np$random$rand(n, n, n, 1L)
npa + npb
a <- array(rnorm(100), c(n, 1, 1, n))
b <- array(rnorm(100), c(n, n, n, 1))
a2 <- a
b2 <- b
dim(a2) <- c(n, 1, n)
dim(b2) <- c(n, n^2, 1)
tinytest::expect_equal(
bc.num(a, b, "+") |> as.vector(),
bc.num(a2, b2, "+") |> as.vector()
)
by_a <- c(1L, 0L, 0L, 1L)
by_b <- c(1L, 1L, 1L, 0L)
dcp_a <- c(1, cumprod(dim(a)))
dcp_b <- c(1, cumprod(dim(b)))
out.dim <- pmax(dim(a), dim(b))
out.len <- prod(out.dim)
aflat <- rnorm(n^3)
bflat <- rnorm(n^3)
foo <- bench::mark(
bc = bc.num(a, b, "+"),
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 200,
)
summary(foo)
ggplot2::autoplot(foo)
n <- 25L
rt <- loadNamespace("reticulate")
np <- rt$import("numpy", convert = FALSE)
timeit <- rt$import("timeit", convert = FALSE)
npa <- np$random$rand(n, 1L, n, 1L, n)
npb <- np$random$rand(n, n, 1L, n, 1L)
npa + npb
a.dim <- c(n, rep(c(1L, n), 2))
b.dim <- c(n, rep(c(n, 1L), 2))
a <- array(rnorm(100), a.dim)
b <- array(rnorm(100), b.dim)
foo <- bench::mark(
bc = bc.num(a, b, "+"), # bc is massively better
`numpy (no conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 200,
)
summary(foo)
ggplot2::autoplot(foo)
foo <- microbenchmark::microbenchmark(
bc = bc.num(a, b, "+"), # bc is massively better
`numpy (no conversion to R)` = npa + npb,
times = 200
)
summary(foo)
ggplot2::autoplot(foo)
# bc_ifelse vs ifelse ====
n <- 1000
x <- 1:n
y <- 1:n
cond <- bc.num(x, y, "<")
# bc_ifelse vs ifelse ====
n <- 1000
x <- array(1:n, 1L)
y <- array(1:n, 1L)
cond <- bc.num(x, y, "<")
bench::mark(
ifelse = ifelse(cond, x, y),
bc = bc_ifelse(cond, x, y),
min_iterations = 100
)
# bc_ifelse vs ifelse ====
n <- 1e5
x <- array(1:n, 1L)
y <- array(1:n, 1L)
cond <- bc.num(x, y, "<")
foo <- bench::mark(
ifelse = ifelse(cond, x, y),
bc = bc_ifelse(cond, x, y),
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
# bc_ifelse vs ifelse ====
n <- 1e5
x <- array(1:n, n)
y <- array(1:n, n)
cond <- bc.num(x, y, "<")
foo <- bench::mark(
ifelse = ifelse(cond, x, y),
bc = bc_ifelse(cond, x, y),
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
formals(args(as.character))
length(formals(args(as.character)))
formals(args(mean))
length(formals(args(mean))
)
names(formals(args(means)))
names(formals(args(mean)))
f <- as.character()
n.args <- names(formals(args(f)))
f <- as.character
n.args <- names(formals(args(f)))
n.args <- setdiff(n.args, "...")
n.args <- names(formals(args(f)))
n.args <- setdiff(n.args, "...") |> length()
#' @keywords internal
#' @noRd
.n_args <- function(f) {
n.args <- names(formals(args(f)))
n.args <- setdiff(n.args, "...") |> length()
return(n.args)
}
.n_args(as.character)
.n_args(mean)
.n_args(pmin)
?broadcast
?broadcast::`broadcast-package`
x <- array(1:5, c(5, 1))
y <- array(1:5*10, c(1, 5))
print(x)
print(y)
x[, rep(1L, 5L)] + y[rep(1L, 5L),]
outer(x, y, "+") |> drop()
x[, rep(1L, 5L)] + y[rep(1L, 5L),]
outer(x, y, "+") |> drop()
library(broadcast)
bc.num(x, y, "+")
sprintf("x[%d] + y[%d]", 1:5, 1)
foo <- data.frame(
sprintf("x[%d] + y[%d]", 1:5, 1)
)
foo
foo <- cbind(
sprintf("x[%d] + y[%d]", 1:5, 1)
)
foo
cbind(
sprintf("x[%d] + y[%d]", 1:5, 1),
sprintf("x[%d] + y[%d]", 1:5, 2),
sprintf("x[%d] + y[%d]", 1:5, 3),
sprintf("x[%d] + y[%d]", 1:5, 4),
sprintf("x[%d] + y[%d]", 1:5, 5)
)
foo <- cbind(
sprintf("x[%d] + y[%d]", 1:5, 1),
sprintf("x[%d] + y[%d]", 1:5, 2),
sprintf("x[%d] + y[%d]", 1:5, 3),
sprintf("x[%d] + y[%d]", 1:5, 4),
sprintf("x[%d] + y[%d]", 1:5, 5)
)
knitr::kable(foo)
?knitr::kable
library(kableExtra)
?kableExtra::column_spec()
knitr::kable(foo) |> kableExtra::column_spec(border_left = TRUE, border_right = TRUE)
knitr::kable(foo) |> kableExtra::column_spec(1:5border_left = TRUE, border_right = TRUE)
knitr::kable(foo) |> kableExtra::column_spec(1:5, border_left = TRUE, border_right = TRUE)
bc.num(x, y, "+")
x <- 1:5
y <- matrix(1:20, 4, 5)
x <- 1:5 * 10
print(x)
y <- matrix(1:20, 4, 5)
print(y)
bc.num(x, y, "+")
x <- array(1:5 * 10, dim = c(5,1))
print(x)
y <- matrix(1:20, 4, 5)
print(y)
bc.num(x, y, "+")
y <- matrix(1:20, 5, 4)
print(y)
bc.num(x, y, "+")
foo <- cbind(
sprintf("x[%d] + y[, %d]", 1:5, 1),
sprintf("x[%d] + y[, %d]", 1:5, 2),
sprintf("x[%d] + y[, %d]", 1:5, 3),
sprintf("x[%d] + y[, %d]", 1:5, 4)
)
knitr::kable(foo) |> kableExtra::column_spec(1:5, border_left = TRUE, border_right = TRUE)
knitr::kable(foo) |> kableExtra::column_spec(1:4, border_left = TRUE, border_right = TRUE)
?character
?string
setwd("D:/D Desktop/Publications/R package broadcast/broadcast")
################################################################################
# perform tests ====
#
library(tinytest)
library(broadcast)
library(tinytest)
library(broadcast)
.internal_bind_array <- broadcast:::.internal_bind_array
n <- 75
x <- array(as.double(1:25), c(n, n, n))
y <- array(as.double(-1:-25), c(n, n, n))
input <- list(x, y, x, y, x, y)
out1 <- abind::abind(input, along = 1L)
out2 <- .internal_bind_array(input, 1L, sys.call())
expect_equivalent(
out1, out2
)
foo <- bench::mark(
abind = abind::abind(input, along = 2L),
bc = .internal_bind_array(input, 2L, sys.call()),
cbind = do.call(cbind, input),
min_iterations = 100,
check = FALSE # because abind adds empty dimnames
)
summary(foo)
ggplot2::autoplot(foo)
