}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(DOCODE);                                                      \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_special <- "
#define MACRO_TYPESWITCH_DECIMAL_SPECIAL(DIMCODE, RULECHECK, RULECODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
px[flatind_x] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION4(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION3(                                           \\
RULECHECK,                                                    \\
RULECODE,                                                     \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_decimal_rel <- "
#define MACRO_TYPESWITCH_DECIMAL_REL(DIMCODE, NACODE1, DOCODE1, NACODE2, DOCODE2) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                \\
const int *py = INTEGER_RO(y);                                \\
DIMCODE(                                                      \\
MACRO_DOUBLEPASS(                                           \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(xint && !yint) {                                      \\
const int *px = INTEGER_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && yint) {                                      \\
const double *px = REAL_RO(x);                              \\
const int *py = INTEGER_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                          \\
}                                                             \\
else if(!xint && !yint) {                                     \\
const double *px = REAL_RO(x);                              \\
const double *py = REAL_RO(y);                              \\
DIMCODE(                                                    \\
MACRO_DOUBLEPASS(                                         \\
MACRO_ACTION2(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE1,                                               \\
DOCODE1                                                \\
),                                                      \\
MACRO_ACTION2(                                          \\
R_isnancpp(tempcalc),                                   \\
NACODE2,                                               \\
DOCODE2                                               \\
)                                                       \\
)                                                         \\
);                                                       \\
}                                                         \\
} while(0)
"
################################################################################
# Integer ====
#
macro_typeswitch_integer1 <- "
#define MACRO_TYPESWITCH_INTEGER1(DIMCODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
double e1;                                                \\
double e2;                                                \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                                     \\
trunc(px[flatind_x]),                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER1(                                           \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
trunc(px[flatind_x]),                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_integer2 <- "
#define MACRO_TYPESWITCH_INTEGER2(DIMCODE, RULECHECK, RULECODE, NACODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
double e1;                                                \\
double e2;                                                \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]), \\
NACODE,                                               \\
(double)px[flatind_x],                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                                     \\
trunc(px[flatind_x]),                                   \\
(double)py[flatind_y],                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER2(                                           \\
RULECHECK,                                                      \\
RULECODE,                                                       \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
NACODE,                                               \\
trunc(px[flatind_x]),                                   \\
trunc(py[flatind_y]),                                   \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
macro_typeswitch_integer_mod <- "
#define MACRO_TYPESWITCH_INTEGER_MOD(DIMCODE, NACODE, RULECODE, DOCODE) do {      \\
bool xint = TYPEOF(x) == LGLSXP || TYPEOF(x) == INTSXP;   \\
bool yint = TYPEOF(y) == LGLSXP || TYPEOF(y) == INTSXP;   \\
double e1;                                                \\
double e2;                                                \\
if(xint && yint) {                                        \\
const int *px = INTEGER_RO(x);                                        \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER_MOD1(                                           \\                                                    \\
px[flatind_x] == NA_INTEGER || py[flatind_y] == NA_INTEGER,  \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(xint && !yint) {                                  \\
const int *px = INTEGER_RO(x);                                        \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER_MOD2(                                           \\                                                    \\
px[flatind_x] == NA_INTEGER || R_isnancpp(py[flatind_y]),  \\
MACRO_OVERFLOW(py[flatind_y]),           \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && yint) {                                  \\
const double *px = REAL_RO(x);                                           \\
const int *py = INTEGER_RO(y);                                        \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER_MOD2(                                           \\                                                    \\
R_isnancpp(px[flatind_x]) || py[flatind_y] == NA_INTEGER,  \\
MACRO_OVERFLOW(px[flatind_x]),           \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
else if(!xint && !yint) {                                 \\
const double *px = REAL_RO(x);                                           \\
const double *py = REAL_RO(y);                                           \\
DIMCODE(                                                          \\
MACRO_ACTION_INTEGER_MOD2(                                           \\                                                    \\
R_isnancpp(px[flatind_x]) || R_isnancpp(py[flatind_y]),  \\
MACRO_OVERFLOW(px[flatind_x]) || MACRO_OVERFLOW(py[flatind_y]),           \\
NACODE,                                               \\
DOCODE                                                \\
)                                                       \\
);                                                       \\
}                                                         \\
} while(0)
"
################################################################################
# Save ====
#
macro_typeswitch_numeric <- stri_c(
macro_typeswitch_decimal_common,
"\n",
macro_typeswitch_decimal_careful,
"\n",
macro_typeswitch_decimal_simple,
"\n",
macro_typeswitch_decimal_special,
"\n",
macro_typeswitch_decimal_rel,
"\n",
macro_typeswitch_integer1,
"\n",
macro_typeswitch_integer2,
"\n",
macro_typeswitch_integer_mod,
"\n"
)
readr::write_file(macro_typeswitch_numeric, "macro_typeswitch_numeric.txt")
DTYPES <- seq(2, 16, 1)
all_N_decl <- sprintf("const int N%d = INTEGER(out_dim)[%d];\t\\", 1:16, 0:15)
library(stringi)
# MACRO ====
all_N_decl <- sprintf("const int N%d = INTEGER(lens)[%d];\t\\", 1:16, 0:15)
all_ind_decl <- sprintf("const SEXP ind%d = VECTOR_ELT(subs, %d);\t\\", 1:16, 0:15)
all_ind_pointer <- sprintf("const int *pind%d = INTEGER_RO(ind%d);\t\\", 1:16, 1:16)
all_for <- c(
sprintf("\t for(int iter%d = 0; iter%d < N%d; ++iter%d) {\t\\", 1:16, 1:16, 1:16, 1:16)
)
forout <- c(
"\t\\",
sprintf( "i_out%d = (pstarts[%d] + iter%d) * pdcp_out[%d];\t\\", 2:16, 1:15, 2:16, 1:15)
)
fory <- c(
"\t\\",
sprintf("i_y%d = (pind%d[iter%d] - 1) * pdcp_y[%d];\t\\", 2:16, 1:15, 2:16, 1:15)
)
all_for <- stri_c(all_for, forout, fory, sep = "\n")
cat(all_for[1])
cat(all_for[16])
all_parts_out <- c(
"pstarts[0] + iter1",
sprintf("i_out%d", 2:16)
)
all_parts_y <- c(
"pind1[iter1]",
sprintf("i_y%d", 2:16)
)
all_out_decl <- sprintf("i_out%d", 2:16)
all_y_decl <- sprintf("i_y%d", 2:16)
temp <- "
#define MACRO_DIM_ACAST(DOCODE) do {              \\
if(Rf_length(subs) != 16) {                     \\
stop(\"subs not of length 16\");              \\
}                                               \\
if(Rf_length(starts) != 16) {                   \\
stop(\"starts not of length 16\");            \\
}                                               \\
if(Rf_length(lens) != 16) {                     \\
stop(\"lens not of length 16\");              \\
}                                               \\
if(Rf_length(dcp_y) != 16) {                    \\
stop(\"dcp_y not of length 16\");             \\
}                                               \\
if(Rf_length(dcp_out) != 16) {                  \\
stop(\"dcp_out not of length 16\");           \\
}                                               \\
\\
const double *pdcp_out = REAL_RO(dcp_out);      \\
const double *pdcp_y = REAL_RO(dcp_y);          \\
\\
const int *pstarts = INTEGER_RO(starts);        \\
\\
\\
<all_N_decl>
\\
<all_ind_decl>
\\
<all_ind_pointer>
\\
R_xlen_t flatind_out;       \\
R_xlen_t flatind_y;       \\
R_xlen_t <all_out_decl>; \\
R_xlen_t <all_y_decl>; \\
<startfor>
flatind_out = <main_out>;       \\
flatind_y = <main_y>;     \\
\\
DOCODE;                                                          \\
\\
flatind_out++;                      \\
<endfor>
} while(0)
"
i <- 16L
current_N_decl <- stri_c(all_N_decl[1:i], collapse = "\n")
current_ind_decl <- stri_c(all_ind_decl[1:i], collapse = "\n")
current_ind_pointer <- stri_c(all_ind_pointer[1:i], collapse = "\n")
current_out_decl <- stri_c(all_out_decl[1:(i-1)], collapse = ", ")
current_y_decl <- stri_c(all_y_decl[1:(i-1)], collapse = ", ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main_out <- stri_c(all_parts_out[1:i], collapse = " + ")
current_main_y <- stri_c(all_parts_y[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<all_N_decl>",
"<all_ind_decl>",
"<all_ind_pointer>",
"<all_out_decl>",
"<all_y_decl>",
"<startfor>",
"<main_out>",
"<main_y>",
"<endfor>"
)
current_replacement <- c(
i,
current_N_decl,
current_ind_decl,
current_ind_pointer,
current_out_decl,
current_y_decl,
current_for,
current_main_out,
current_main_y,
current_end
)
out <- stri_replace_all(
temp,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
macro_dim_acast <- out
cat(macro_dim_acast)
library(broadcast)
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
main <- "
// [[Rcpp::export(rcpp_acast)]]
void rcpp_acast(
SEXP out, SEXP y, const SEXP starts, const SEXP lens, const SEXP subs,
const SEXP dcp_out, const SEXP dcp_y
) {
double *py = REAL(y);
double *pout = REAL(out);
MACRO_DIM_ACAST(pout[flatind_out] = py[flatind_y]);
}
"
code <- stri_c(header, "\n", macro_dim_acast, "\n", main)
cat(code)
Rcpp::sourceCpp(code = code)
out <- array(NA_real_, c(3,3,3, rep(1L, 13L)))
x <- cbind(id = rep(1:3, each = 2), grp = rep(1:2, 3), val = rnorm(6))
print(x)
margin <- 1L
grp <- x[, 2]
starts <- rep(0L, 16L)
lens <- c(1L, 3L, 1L, rep(1L, 13L))
y.dim <- rep(1L, 16L)
y.dim[1:ndim(x)] <- dim(x)
subs <- lapply(y.dim, \(i)1:i)
subs[[margin]] <- which(grp == 1L)
dcp_out <- cumprod(dim(out))
dcp_y <- cumprod(y.dim)
rcpp_acast(out, x, starts, lens, subs, dcp_out, dcp_y)
print(out)
subs
lens <- c(3L, 3L, 1L, rep(1L, 13L))
rcpp_acast(out, x, starts, lens, subs, dcp_out, dcp_y)
print(out)
out <- array(NA_real_, c(3,3,3, rep(1L, 13L)))
x <- cbind(id = rep(1:3, each = 2), grp = rep(1:2, 3), val = rnorm(6))
print(x)
margin <- 1L
grp <- x[, 2]
starts <- rep(0L, 16L)
