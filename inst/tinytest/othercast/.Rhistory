\\
const double *pdcp_out = REAL_RO(dcp_out);      \\
const double *pdcp_y = REAL_RO(dcp_y);          \\
\\
const int *pstarts = INTEGER_RO(starts);        \\
\\
\\
<all_N_decl>
\\
<all_ind_decl>
\\
<all_ind_pointer>
\\
R_xlen_t flatind_out;       \\
R_xlen_t flatind_y;       \\
R_xlen_t <all_out_decl>; \\
R_xlen_t <all_y_decl>; \\
<startfor>
flatind_out = <main_out>;       \\
flatind_y = <main_y>;     \\
\\
DOCODE;                                                          \\
\\
flatind_out++;                      \\
<endfor>
} while(0)
"
i <- 16L
current_N_decl <- stri_c(all_N_decl[1:i], collapse = "\n")
current_ind_decl <- stri_c(all_ind_decl[1:i], collapse = "\n")
current_ind_pointer <- stri_c(all_ind_pointer[1:i], collapse = "\n")
current_out_decl <- stri_c(all_out_decl[1:(i)], collapse = ", ")
current_y_decl <- stri_c(all_y_decl[1:(i)], collapse = ", ")
current_for <- stri_c(all_for[i:1], collapse = "\n")
current_main_out <- stri_c(all_parts_out[1:i], collapse = " + ")
current_main_y <- stri_c(all_parts_y[1:i], collapse = " + ")
current_end <- stri_c(rep("\t }\t\\", i), collapse = "\n")
current_fixed <- c(
"<dtype>",
"<all_N_decl>",
"<all_ind_decl>",
"<all_ind_pointer>",
"<all_out_decl>",
"<all_y_decl>",
"<startfor>",
"<main_out>",
"<main_y>",
"<endfor>"
)
current_replacement <- c(
i,
current_N_decl,
current_ind_decl,
current_ind_pointer,
current_out_decl,
current_y_decl,
current_for,
current_main_out,
current_main_y,
current_end
)
out <- stri_replace_all(
temp,
fixed = current_fixed,
replacement = current_replacement,
case_insensitive = FALSE,
vectorize_all = FALSE
)
macro_dim_acast <- out
cat(macro_dim_acast)
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
main <- "
// [[Rcpp::export(rcpp_acast)]]
void rcpp_acast(
SEXP out, SEXP y, const SEXP starts, const SEXP lens, const SEXP subs,
const SEXP dcp_out, const SEXP dcp_y
) {
double *py = REAL(y);
double *pout = REAL(out);
MACRO_DIM_ACAST(pout[flatind_out] = py[flatind_y]);
}
"
code <- stri_c(header, "\n", macro_dim_acast, "\n", main)
cat(code)
Rcpp::sourceCpp(code = code)
library(broadcast)
testfun <- function(x, margin, grp) {
lvls <- levels(grp)
grp <- unclass(grp)
# get x & grp properties:
x.dim <- dim(x)
x.ndim <- ndim(x)
x.dimchunk <- c(x.dim, rep(1L, 16L - x.ndim))
grp_n <- length(unique(grp))
grp_mode <- max(tabulate(grp))
newdim <- x.ndim + 1L
# create output:
out.dim <- c(dim(x), grp_n)
out.dim[margin] <- grp_mode
out.ndim <- ndim(out)
out.dimchunk <- c(out.dim, rep(1L, 16L - out.ndim))
out <- array(NA_real_, out.dim)
# pre params:
subs <- lapply(1:16L, \(i)1:x.dimchunk[i])
starts <- rep(0L, 16L)
lens <- lengths(subs)
dcp_out <- cumprod(c(1, out.dimchunk))[1:16]
dcp_x <- cumprod(c(1, x.dimchunk))[1:16]
# loop:
for(i in 1:grp_n) {
subs[[margin]] <- which(grp == i)
lens[[margin]] <- sum(grp == i)
rcpp_acast(out, x, starts, lens, subs, dcp_out, dcp_x)
starts[newdim] <- starts[newdim] + grp_mode
}
return(out)
}
# after last ====
# expectation: group 1 is spread OVER rows, WITHIN layer 1
out <- array(NA_real_, c(3,3,3, rep(1L, 13L)))
x <- cbind(id = rep(1:3, each = 2), grp = rep(1:2, 3), val = rnorm(6))
grp <- as.factor(x[, 2])
testfun(out, 1L, grp)
# speed tests
library(broadcast)
library(tinytest)
tempfun <- function(x, grp) {
margin <- 1L
maxfreq <- max(tabulate(unclass(grp)))
out.dim <- c(dim(x), length(unique(grp)))
out.dim[margin] <- maxfreq
out <- array(NA_real_, out.dim)
for(k in 1:nlevels(grp)) {
extract <- x[grp == levels(grp)[k],, drop=FALSE]
out[1:nrow(extract), 1:ncol(extract), k] <- extract
}
return(out)
}
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(ceiling(x[, 2]/2))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L))
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
n <- 2500
m <- 500
x <- matrix(1:m, n, n)
grp <- as.factor(sample(1:(m-1L), n, TRUE))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp, TRUE)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp, TRUE),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
# count number of tests
library(broadcast)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- list.dirs() |> basename() |> setdiff(c(".", "count"))
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
# set-up ====
enumerate <- 0L
errorfun <- function(tt) {
if(isTRUE(tt)) print(tt)
if(isFALSE(tt)) stop(print(tt))
}
test_make_dims <- function(n) {
# make dimensions that are randomly of size 1 or 3:
out <- lapply(1:n, \(n)sample(c(1, 3), 1)) |> unlist()
# check if the dimensions produce a too large object.
# If so, replace one >1L dimension with 1L
if(prod(out) > 5000L) {
ind <- which(out > 1L)[1L]
out[ind] <- 1L
}
return(out)
}
datagens <- list(
# \() as.raw(sample(1:10)), # ifelse() cannot handle raw, apparently
\() sample(c(TRUE, FALSE, NA), 10L, TRUE),
\() sample(c(-10L:10L, NA_integer_)),
\() sample(c(rnorm(10), NA, NaN, Inf, -Inf)),
\() sample(c(rnorm(10), NA, NaN, Inf, -Inf)) + sample(c(rnorm(10), NA, NaN, Inf, -Inf)) * -1i,
\() sample(c(letters, NA)),
\() sample(list(letters, month.abb, 1:10))
)
# along == 1L ====
along <- 1L
for(iSample in 1:5) {
for(iDataX in seq_along(datagens)) {
for(iDataY in seq_along(datagens)) {
for(iNdims in 1:3) {
for(iNmal in c(TRUE, FALSE)) {
for(iLen in 2:3) {
x.dim <- y.dim <- z.dim <- empty.dim <- sample(1:10, iNdims)
x.dim[along] <- sample(1:10, 1)
y.dim[along] <- sample(1:10, 1)
z.dim[along] <- sample(1:10, 1)
empty.dim[along] <- 0L
x.data <- datagens[[iDataX]]()
y.data <- datagens[[iDataY]]()
z.data <- datagens[[iDataY]]()
x <- array(x.data, x.dim)
y <- array(y.data, y.dim)
z <- array(z.data, z.dim)
emptyarray <- vector(typeof(x), 0L)
dim(emptyarray) <- empty.dim
input <- list(x, y, emptyarray)
input <- input[sample(1:3, iLen)]
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
enumerate <- enumerate + 2L
}
}
}
}
}
}
# along == 2L ====
along <- 2L
for(iSample in 1:5) {
for(iDataX in seq_along(datagens)) {
for(iDataY in seq_along(datagens)) {
for(iNdims in 1:3) {
for(iNmal in c(TRUE, FALSE)) {
for(iLen in 2:3) {
x.dim <- y.dim <- z.dim <- empty.dim <- sample(1:10, iNdims)
x.dim[along] <- sample(1:10, 1)
y.dim[along] <- sample(1:10, 1)
z.dim[along] <- sample(1:10, 1)
empty.dim[along] <- 0L
x.data <- datagens[[iDataX]]()
y.data <- datagens[[iDataY]]()
z.data <- datagens[[iDataY]]()
x <- array(x.data, x.dim)
y <- array(y.data, y.dim)
z <- array(z.data, z.dim)
emptyarray <- vector(typeof(x), 0L)
dim(emptyarray) <- empty.dim
input <- list(x, y, emptyarray)
input <- input[sample(1:3, iLen)]
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
enumerate <- enumerate + 2L
}
}
}
}
}
}
# along == 3L ====
along <- 3L
for(iSample in 1:5) {
for(iDataX in seq_along(datagens)) {
for(iDataY in seq_along(datagens)) {
for(iNdims in 2:4) {
for(iNmal in c(TRUE, FALSE)) {
for(iLen in 2:3) {
x.dim <- y.dim <- z.dim <- empty.dim <- sample(1:10, iNdims)
x.dim[along] <- sample(1:10, 1)
y.dim[along] <- sample(1:10, 1)
z.dim[along] <- sample(1:10, 1)
empty.dim[along] <- 0L
x.data <- datagens[[iDataX]]()
y.data <- datagens[[iDataY]]()
z.data <- datagens[[iDataY]]()
x <- array(x.data, x.dim)
y <- array(y.data, y.dim)
z <- array(z.data, z.dim)
emptyarray <- vector(typeof(x), 0L)
dim(emptyarray) <- empty.dim
input <- list(x, y, emptyarray)
input <- input[sample(1:3, iLen)]
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
enumerate <- enumerate + 2L
}
}
}
}
}
}
# along == 0L ====
along <- 0L
for(iSample in 1:5) {
for(iDataX in seq_along(datagens)) {
for(iDataY in seq_along(datagens)) {
for(iNdims in 1:3) {
for(iNmal in c(TRUE, FALSE)) {
for(iLen in 2:3) {
x.dim <- y.dim <- z.dim <- empty.dim <- sample(1:10, iNdims)
empty.dim[1L] <- 0L
x.data <- datagens[[iDataX]]()
y.data <- datagens[[iDataY]]()
z.data <- datagens[[iDataY]]()
x <- array(x.data, x.dim)
y <- array(y.data, y.dim)
z <- array(z.data, z.dim)
emptyarray <- vector(typeof(x), 0L)
dim(emptyarray) <- empty.dim
input <- list(x, y, emptyarray)
input <- input[sample(1:3, iLen)]
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
expect_silent(
bind_array(input, along = along, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
enumerate <- enumerate + 2L
}
}
}
}
}
}
# revalong == 0L ====
along <- 0L
for(iDataX in seq_along(datagens)) {
for(iDataY in seq_along(datagens)) {
for(iNdims in 1:3) {
for(iNmal in c(TRUE, FALSE)) {
for(iLen in 2:3) {
x.dim <- y.dim <- z.dim <- empty.dim <- sample(1:10, iNdims)
empty.dim[1L] <- 0L
x.data <- datagens[[iDataX]]()
y.data <- datagens[[iDataY]]()
z.data <- datagens[[iDataY]]()
x <- array(x.data, x.dim)
y <- array(y.data, y.dim)
z <- array(z.data, z.dim)
emptyarray <- vector(typeof(x), 0L)
dim(emptyarray) <- empty.dim
input <- list(x, y, emptyarray)
input <- input[sample(1:3, iLen)]
expect_silent(
bind_array(input, along = along, rev = TRUE, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
expect_silent(
bind_array(input, along = along, rev = TRUE, name_along = iNmal, comnames_from = sample(1:iLen, 1L))
) |> errorfun()
enumerate <- enumerate + 2L
}
}
}
}
}
# count number of tests
library(broadcast)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- list.dirs() |> basename() |> setdiff(c(".", "count"))
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
