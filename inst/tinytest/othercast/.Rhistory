vectorize_all = FALSE
)
macro_dim_acast <- out
cat(macro_dim_acast)
header <- "
#include <Rcpp.h>
using namespace Rcpp;
"
main <- "
// [[Rcpp::export(rcpp_acast)]]
void rcpp_acast(
SEXP out, SEXP y, const SEXP starts, const SEXP lens, const SEXP subs,
const SEXP dcp_out, const SEXP dcp_y
) {
double *py = REAL(y);
double *pout = REAL(out);
MACRO_DIM_ACAST(pout[flatind_out] = py[flatind_y]);
}
"
code <- stri_c(header, "\n", macro_dim_acast, "\n", main)
cat(code)
Rcpp::sourceCpp(code = code)
library(broadcast)
testfun <- function(x, margin, grp) {
lvls <- levels(grp)
grp <- unclass(grp)
# get x & grp properties:
x.dim <- dim(x)
x.ndim <- ndim(x)
x.dimchunk <- c(x.dim, rep(1L, 16L - x.ndim))
grp_n <- length(unique(grp))
grp_mode <- max(tabulate(grp))
newdim <- x.ndim + 1L
# create output:
out.dim <- c(dim(x), grp_n)
out.dim[margin] <- grp_mode
out.ndim <- ndim(out)
out.dimchunk <- c(out.dim, rep(1L, 16L - out.ndim))
out <- array(NA_real_, out.dim)
# pre params:
subs <- lapply(1:16L, \(i)1:x.dimchunk[i])
starts <- rep(0L, 16L)
lens <- lengths(subs)
dcp_out <- cumprod(c(1, out.dimchunk))[1:16]
dcp_x <- cumprod(c(1, x.dimchunk))[1:16]
# loop:
for(i in 1:grp_n) {
subs[[margin]] <- which(grp == i)
lens[[margin]] <- sum(grp == i)
rcpp_acast(out, x, starts, lens, subs, dcp_out, dcp_x)
starts[newdim] <- starts[newdim] + grp_mode
}
return(out)
}
# after last ====
# expectation: group 1 is spread OVER rows, WITHIN layer 1
out <- array(NA_real_, c(3,3,3, rep(1L, 13L)))
x <- cbind(id = rep(1:3, each = 2), grp = rep(1:2, 3), val = rnorm(6))
grp <- as.factor(x[, 2])
testfun(out, 1L, grp)
# speed tests
library(broadcast)
library(tinytest)
tempfun <- function(x, grp) {
margin <- 1L
maxfreq <- max(tabulate(unclass(grp)))
out.dim <- c(dim(x), length(unique(grp)))
out.dim[margin] <- maxfreq
out <- array(NA_real_, out.dim)
for(k in 1:nlevels(grp)) {
extract <- x[grp == levels(grp)[k],, drop=FALSE]
out[1:nrow(extract), 1:ncol(extract), k] <- extract
}
return(out)
}
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(ceiling(x[, 2]/2))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L))
n <- 2500
x <- matrix(1:100, n, n)
grp <- as.factor(x[, 2] - 1L)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp),
check = FALSE,
min_iterations = 100
)
n <- 2500
m <- 500
x <- matrix(1:m, n, n)
grp <- as.factor(sample(1:(m-1L), n, TRUE))
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp)
)
tinytest::expect_equivalent(
tempfun(x, grp),
acast(x, 1L, grp, TRUE)
)
foo <- bench::mark(
base = tempfun(x, grp),
acast = acast(x, 1L, grp, TRUE),
check = FALSE,
min_iterations = 100
)
summary(foo)
ggplot2::autoplot(foo)
pryr::show_c_source(.Primitive("%%"))
4.94065645841247E-324
4.94065645841247E-324 * 10
4.94065645841247E-324 * 10^324
4.94065645841247E-324 * 10^32
4.94065645841247E-324 * 10^320
4.94065645841247E-324 * 10^50
4.94065645841247E-324 * 10^60
4.94065645841247E-324 * 10^100
4.94065645841247E-324 * 10^200
4.94065645841247E-324 * 10^250
4.94065645841247E-324 * 10^300
4.94065645841247E-324 * 10^324
4.94065645841247E-324 * 10^323
4.94065645841247E-324 * 10^320
4.94065645841247E-324 * 10^310
4.94065645841247E-324 * 10^300
4.94065645841247E-324 * 10^310
4.94065645841247E-324 * 10^305
4.94065645841247E-324 * 10^306
4.94065645841247E-324 * 10^309
4.94065645841247E-324 * 10^308
4.94065645841247E-324 * 10^308 + 4*10^16
4.94065645841247E-324 * 10^308 + 4*10^15
4.94065645841247E-324 * 10^308
4.94065645841247E-324 * 10^309
4.94065645841247E-324 * 10^308 +10
4.94065645841247E-324 * 10^308 +1
2^53
1/(2^53)
1/(2^53) < 4.9e-324
# make convenient functions ====
best_dim_sizes <- function(target_len, ndim, start1) {
n <- floor(target_len^(1/ndim)) # floor to allow easy correction later
if(start1) {
out <- rep(c(1L, n), ndim)[1:ndim]
}
else {
out <- rep(c(n, 1L), ndim)[1:ndim]
}
# adjust last non-1 size to ensure target len is correct:
if(ndim > 2) {
myprod <- n^(ndim - 1)
ind2change <- max(which(out > 1L))
out[ind2change] <- floor(target_len/myprod)
}
return(as.integer(out))
}
get_times <- function(obj, j) {
nms <- names(res$expression)
j <- which(nms == j)
idx <- rowSums(obj$gc[[j]][, 2:3]) == 0
times <- obj$time[[j]][idx]
return(times)
}
# set-up ====
library(broadcast)
library(reticulate)
np <- import("numpy", convert = FALSE)
gc <- import("gc", convert = FALSE)
gc$disable()
# loop
median_bc <- median_np <- q1_bc <- q1_np <- q3_bc <- q3_np <- vector("numeric", 7)
counter <- 1L
target_len <- 9e6
for(i in 2:8) {
print(i)
x.dims <- best_dim_sizes(target_len, i, FALSE)
y.dims <- best_dim_sizes(target_len, i, TRUE)
a.dims <- r_to_py(as.list(x.dims))
b.dims <- r_to_py(as.list(y.dims))
npa <- np$random$random_sample(a.dims)
npb <- np$random$random_sample(b.dims)
a <- array(runif(100), x.dims)
b <- array(runif(100), y.dims)
res <- bench::mark(
broadcast = bc.num(a, b, "+"),
`numpy (NO conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100
)
bc_all <- get_times(res, "broadcast")
np_all <- get_times(res, "numpy (NO conversion to R)")
median_bc[counter] <- median(bc_all)
median_np[counter] <- median(np_all)
q1_bc[counter] <- quantile(bc_all, 0.25)
q3_bc[counter] <- quantile(bc_all, 0.75)
q1_np[counter] <- quantile(np_all, 0.25)
q3_np[counter] <- quantile(np_all, 0.75)
counter <- counter + 1L
}
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = 2:8
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = 2:8
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = 2:8
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median*1000, by = module, type = "l",
main = "benchmarks",
xlab = "number of dimensions",
ylab = "median time (ms)"
)
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = 2:8
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = 2:8
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = 2:8
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median*1000, by = module, type = "l",
main = "benchmarks",
xlab = "number of dimensions",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1*1000, ymax = df$q3*1000, by = module,
type = type_ribbon(alpha = 0.25)
)
library(broadcast)
# make convenient functions ====
best_dim_sizes <- function(target_len, ndim, start1) {
n <- floor(target_len^(1/ndim)) # floor to allow easy correction later
if(start1) {
out <- rep(c(1L, n), ndim)[1:ndim]
}
else {
out <- rep(c(n, 1L), ndim)[1:ndim]
}
# adjust last non-1 size to ensure target len is correct:
if(ndim > 2) {
myprod <- n^(ndim - 1)
ind2change <- max(which(out > 1L))
out[ind2change] <- floor(target_len/myprod)
}
return(as.integer(out))
}
get_times <- function(obj, j) {
nms <- names(res$expression)
j <- which(nms == j)
idx <- rowSums(obj$gc[[j]][, 2:3]) == 0
times <- obj$time[[j]][idx]
return(times)
}
# set-up ====
library(broadcast)
library(reticulate)
np <- import("numpy", convert = FALSE)
gc <- import("gc", convert = FALSE)
gc$disable()
# loop
median_bc <- median_np <- q1_bc <- q1_np <- q3_bc <- q3_np <- vector("numeric", 7)
counter <- 1L
target_len <- 9e6
for(i in 2:8) {
print(i)
x.dims <- best_dim_sizes(target_len, i, FALSE)
y.dims <- best_dim_sizes(target_len, i, TRUE)
a.dims <- r_to_py(as.list(x.dims))
b.dims <- r_to_py(as.list(y.dims))
npa <- np$random$random_sample(a.dims)
npb <- np$random$random_sample(b.dims)
a <- array(runif(100), x.dims)
b <- array(runif(100), y.dims)
res <- bench::mark(
broadcast = bc.num(a, b, "+"),
`numpy (NO conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100
)
bc_all <- get_times(res, "broadcast")
np_all <- get_times(res, "numpy (NO conversion to R)")
median_bc[counter] <- median(bc_all)
median_np[counter] <- median(np_all)
q1_bc[counter] <- quantile(bc_all, 0.25)
q3_bc[counter] <- quantile(bc_all, 0.75)
q1_np[counter] <- quantile(np_all, 0.25)
q3_np[counter] <- quantile(np_all, 0.75)
counter <- counter + 1L
}
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = 2:8
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = 2:8
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = 2:8
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median*1000, by = module, type = "l",
main = "benchmarks",
xlab = "number of dimensions",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1*1000, ymax = df$q3*1000, by = module,
type = type_ribbon(alpha = 0.25)
)
# make convenient functions ====
best_dim_sizes <- function(target_len, ndim, start1) {
n <- floor(target_len^(1/ndim)) # floor to allow easy correction later
if(start1) {
out <- rep(c(1L, n), ndim)[1:ndim]
}
else {
out <- rep(c(n, 1L), ndim)[1:ndim]
}
# adjust last non-1 size to ensure target len is correct:
if(ndim > 2) {
myprod <- n^(ndim - 1)
ind2change <- max(which(out > 1L))
out[ind2change] <- floor(target_len/myprod)
}
return(as.integer(out))
}
get_times <- function(obj, j) {
nms <- names(res$expression)
j <- which(nms == j)
idx <- rowSums(obj$gc[[j]]) == 0
times <- obj$time[[j]][idx]
return(times)
}
# set-up ====
library(broadcast)
library(reticulate)
np <- import("numpy", convert = FALSE)
gc <- import("gc", convert = FALSE)
gc$disable()
# loop
median_bc <- median_np <- q1_bc <- q1_np <- q3_bc <- q3_np <- vector("numeric", 7)
counter <- 1L
target_len <- 9e6
for(i in 2:8) {
print(i)
x.dims <- best_dim_sizes(target_len, i, FALSE)
y.dims <- best_dim_sizes(target_len, i, TRUE)
a.dims <- r_to_py(as.list(x.dims))
b.dims <- r_to_py(as.list(y.dims))
npa <- np$random$random_sample(a.dims)
npb <- np$random$random_sample(b.dims)
a <- array(runif(100), x.dims)
b <- array(runif(100), y.dims)
res <- bench::mark(
broadcast = bc.num(a, b, "+"),
`numpy (NO conversion to R)` = npa + npb,
check = FALSE,
min_iterations = 100
)
bc_all <- get_times(res, "broadcast")
np_all <- get_times(res, "numpy (NO conversion to R)")
median_bc[counter] <- median(bc_all)
median_np[counter] <- median(np_all)
q1_bc[counter] <- quantile(bc_all, 0.25)
q3_bc[counter] <- quantile(bc_all, 0.75)
q1_np[counter] <- quantile(np_all, 0.25)
q3_np[counter] <- quantile(np_all, 0.75)
counter <- counter + 1L
}
library(tinyplot) |> suppressWarnings()
df1 <- data.frame(
broadcast = median_bc, numpy = median_np, i = 2:8
)
df1 <- tidyr::pivot_longer(df1, 1:2, values_to = "median")
df2 <- data.frame(
q1_bc, q1_np, i = 2:8
)
df2 <- tidyr::pivot_longer(df2, 1:2, values_to = "q1")
df3 <- data.frame(
q3_bc, q3_np, i = 2:8
)
df3 <- tidyr::pivot_longer(df3, 1:2, values_to = "q3")
df <- cbind(df1, df2[, 3], df3[, 3])
module <- df$name
tinytheme("minimal")
tinyplot(
df$i, df$median*1000, by = module, type = "l",
main = "benchmarks",
xlab = "number of dimensions",
ylab = "median time (ms)"
)
tinyplot_add(
min = df$q1*1000, ymax = df$q3*1000, by = module,
type = type_ribbon(alpha = 0.25)
)
reticulate::repl_python()
library(reticulate)
library(broadcast)
get_times <- function(obj, j) {
nms <- names(res$expression)
j <- which(nms == j)
idx <- rowSums(obj$gc[[j]][, 2:3]) == 0
times <- obj$time[[j]][idx]
return(times)
}
reticulate::repl_python()
library(broadcast)
?mem.maxVSize()
setwd("D:/D Desktop/Publications/R package broadcast/broadcast/inst/tinytest/count")
# count number of tests
library(broadcast)
library(tinytest)
# set working directory to source file location
SourceFileLocation <- function() {
# BATCH way:
path <- funr::get_script_path()
if(!is.null(path)) return(path)
# R-Studio way:
if(Sys.getenv("RSTUDIO") == "1") {
if(rstudioapi::isAvailable(version_needed = NULL,child_ok = FALSE)) {
return(dirname(rstudioapi::getSourceEditorContext()$path))
}
if(is.null(knitr::current_input(dir = TRUE)) == FALSE) {
return(knitr::current_input(dir = TRUE))
}
return(getwd())
}
}
enumerate_total <- 0
# root folder tests ====
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total"))
rm(list = rem)
# sub folder tests ====
subfolders <- list.dirs() |> basename() |> setdiff(c(".", "count"))
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
path <- file.path(getwd(), subfolders) |> normalizePath()
files <- list.files(path, pattern = "*.R", full.names = TRUE)
max.width <- max(stringi::stri_width(basename(files))) + 8
for(iSubFolder in subfolders) {
wd <- SourceFileLocation()
setwd(wd)
setwd("..")
setwd(normalizePath(iSubFolder))
getwd()
files <- list.files(normalizePath(getwd()), pattern = ".R", full.names = TRUE)
print(iSubFolder)
for(iFile in files) {
capture.output(source(normalizePath(iFile)), file = nullfile()) |> suppressMessages()
cat(stringi::stri_pad_right(basename(iFile), max.width), " -> ", enumerate,  "\n")
enumerate_total <- enumerate_total + enumerate
}
rem <-  setdiff(ls(), c("SourceFileLocation", "enumerate", "enumerate_total", "max.width"))
rm(list = rem)
cat("\n")
}
print(enumerate_total)
# end ====
